# Associative arrays using TRIE structures
#
# This is intended to be a simple and compact associative array.
# It does not contain any provisions for managing the memory of any mapped data (or any recognition of anything other than integer types)
#
# All keys are 64-bit integers
#   These tables were also designed with the assumption that the keys are 8-char ascii values (hashing operation was selected for this case)
#
# Value type varies based on the size of the table
#   nanotable: 16-bit integer valuess
#   minitable: 32-bit integer valuess
#   megatable: 64-bit integer valuess
#
# The simplest (and most obvious) way to interact with these table structures is the "INIT", "PUT", "GET", and "REMOVE" functions
#
# Register allocation:
#   addr1:
#     memblock layout must match the expected layout (memblock with layout specified by struct s_*table)
#   rA:   value
#   rB:   key
# clobbers:  rC rD rE rF  s28h
#
# Internal register allocation ( other values returned from LOOKUP and used by ADD_NODE/REMOVE_NODE ):
#   rC:   success or failure indicator
#   rD:   trie index
#   rE:   temp/scratch field
#   rF:   table size

const megatable_kmask 28
const megatable_krotate 12
const megatable_scale 6
const megatable_iterations 16
struct s_megatable
  4 a
  4 b
  4 c
  4 d
  4 e
  4 f
  4 g
  4 h
  8 id
  . 8 size
  8 parent
  8 prefix
  8 ref

const minitable_kmask 14
const minitable_krotate 3
const minitable_scale 5
const minitable_iterations 22
struct s_minitable
  2 a
  2 b
  2 c
  2 d
  2 e
  2 f
  2 g
  2 h
  8 id
  . 8 size
  2 parent
  2 prefix
  4 ref

const nanotable_kmask 3
const nanotable_krotate 2
const nanotable_scale 4
const nanotable_iterations 32
struct s_nanotable
  1 a
  1 b
  1 c
  1 d
  1 parent
  1 prefix
  2 ref
  8 id
  . 8 size

mem m_ntable s_minitable 65536

MINITABLE__TEST:
  bind addr1 m_ntable
  lwcall MINITABLE__INIT
  
  assign rB 'hello!
  lwcall MINITABLE__LOOKUP
  tcall dump-ctx
  assign rA 999
  lwcall MINITABLE__ADD_NODE
  tcall dump-ctx
  lwcall MINITABLE__PRINT_NODE
  
  assign rB 'goodbye!
  lwcall MINITABLE__LOOKUP
  assign rA 1234
  lwcall MINITABLE__ADD_NODE
  tcall dump-ctx
  lwcall MINITABLE__PRINT_NODE
  
  assign rB '...!
  lwcall MINITABLE__LOOKUP
  assign rA 4321
  lwcall MINITABLE__ADD_NODE

  assign rB 'yello!
  lwcall MINITABLE__LOOKUP
  assign rA 4321
  lwcall MINITABLE__ADD_NODE
  
  assign rB 'a!
  lwcall MINITABLE__LOOKUP
  assign rA 555
  lwcall MINITABLE__ADD_NODE

  assign rB 's?
  lwcall MINITABLE__LOOKUP
  assign rA 12
  lwcall MINITABLE__ADD_NODE

  assign rB 'dmmmmm
  lwcall MINITABLE__LOOKUP
  assign rA 522234
  lwcall MINITABLE__ADD_NODE

  assign rB 'ffffffff!
  lwcall MINITABLE__LOOKUP
  assign rA 3
  lwcall MINITABLE__ADD_NODE

  assign rB 'ffffffff!
  lwcall MINITABLE__CHK
  assign rB 'a!
  lwcall MINITABLE__CHK
  assign rB 'ffffffff!
  lwcall MINITABLE__CHK
  
  assign rA 8765
  assign rB 'zzz
  lwcall MINITABLE__TPUT
  assign rA 10000
  assign rB 'zzz
  lwcall MINITABLE__TPUT
  
  assign rB 'a!
  lwcall MINITABLE__CHK
  assign rB '...!
  lwcall MINITABLE__TGET
  assign rB 'zzz
  lwcall MINITABLE__TGET
  assign rB '...!
  lwcall MINITABLE__TREMOVE
  assign rB '...!
  lwcall MINITABLE__TGET
  assign rB 'FAKE
  lwcall MINITABLE__TREMOVE
  lwreturn

MINITABLE__PRINT_NODE:
  block-stash 6 sA rA
  assign xA 'OFS
  assign xB '.id
  assign xC 'par
  assign xD 'prx
  assign xE 'ref
  assign rA addr1.offset
  load qword rB addr1 s_minitable.id
  load word rC addr1 s_minitable.parent
  load word rD addr1 s_minitable.prefix
  load dword rE addr1 s_minitable.ref
  tcall print-text-xa
  tcall print-space
  tcall print-int-a
  tcall print-newline
  tcall print-text-xb
  tcall print-space
  tcall print-int-b
  tcall print-newline
  tcall print-text-xc
  tcall print-space
  tcall print-int-c
  tcall print-newline
  tcall print-text-xd
  tcall print-space
  tcall print-int-d
  tcall print-newline
  tcall print-text-xe
  tcall print-space
  tcall print-int-e
  tcall print-newline
  block-stash 6 rA sA
  lwreturn

MINITABLE__CHK:
  lwcall MINITABLE__LOOKUP
  tcall print-text-b
  assign rD ':'
  tcall print-text-d
  tcall print-space
  if rC == 1
    tcall print-int-a
  if rC == 0
    assign rD 'NULL'
    tcall print-text-d
  tcall print-newline
  lwreturn

MINITABLE__TPUT:
  assign rC 'put
  assign rD '<-
  tcall print-text-c
  tcall print-space
  tcall print-text-b
  tcall print-space
  tcall print-text-d
  tcall print-space
  tcall print-int-a
  lwcall MINITABLE__PUT
  if rC == 1
    assign rD '*REPLACE
  if rC == 2
    assign rD '*NEW
  if rC == 0
    assign rD '*NO.WAY!
  tcall print-space
  tcall print-space
  tcall print-text-d
  tcall print-newline
  lwreturn
MINITABLE__PUT:
  stash s28h rA
  lwcall MINITABLE__LOOKUP
  if rC == 0
    stash rA s28h
    lwcall MINITABLE__ADD_NODE
    assign rC 2
  if rC == 1
    stash rA s28l
    store dword addr1 s_minitable.ref rA
  lwreturn

MINITABLE__TREMOVE:
  assign rC 'rem
  tcall print-text-c
  tcall print-space
  tcall print-text-b
  tcall print-space
  lwcall MINTABLE__REMOVE
  if rC == 0
    assign rD '*IGNORED
  if rC == 1
    assign rD '*REMOVED
  tcall print-space
  tcall print-space
  tcall print-text-d
  tcall print-newline
  lwreturn

MINTABLE__REMOVE:
  lwcall MINITABLE__LOOKUP
  if rC == 1
    lwcall MINITABLE__REMOVE_NODE
    assign rC 1
  lwreturn

MINITABLE__INIT:
  assign addr1.offset 0
  spread rA 0 0 1 0
  block-store 4 addr1 0 rA
  lwreturn

MINITABLE__TGET:
  assign rC 'get
  assign rD '->
  tcall print-text-c
  tcall print-space
  tcall print-text-b
  tcall print-space
  tcall print-text-d
  tcall print-space
  lwcall MINTABLE__GET
  if rC == 1
    tcall print-int-a
  if rC == 0
    assign rD 'NULL'
    tcall print-text-d
  tcall print-newline
  lwreturn

MINTABLE__GET:
MINITABLE__LOOKUP:
  assign addr1.offset 0
  assign rD 0
  
  # hash the key (to partially mitigate algorithmic bias induced by alphanumeric chars)
  assign rC rB
  rotate-left rC 4
  xor rC rB
  
  assign rE minitable_iterations
  load qword rF addr1 s_minitable.size
  
  # goto MINITABLE_LOOKUP_PLY
  
  MINITABLE_LOOKUP_PLY:
    assign rD rC
    and rD minitable_kmask
    
    # if a null pointer, then the node doesn't exist (but the current node is the scheduled parent)
    load word rA addr1 rD
    if rA == 0
      assign rA 0
      assign rC 0
      lwreturn
    shift-left rA minitable_scale
    assign addr1.offset rA
    
    dec rE
    load qword rA addr1 s_minitable.id
    
    # if id matched, succees!
    if rA == rB
      load dword rA addr1 s_minitable.ref
      assign rC 1
      lwreturn
    
    # Select the next node index
    rotate-right rC minitable_krotate
    
    # This should never reach 0
    if rE > 0 MINITABLE_LOOKUP_PLY

MINITABLE__ADD_NODE:
  store dword addr1 rD rF
  assign rD addr1.offset

  # ref back to parent node (enables dynamic node deletion)
  shift-right rD minitable_scale
  
  inc rF
  assign addr1.offset 0
  store qword addr1 s_minitable.size rF
  dec rF
  
  shift-left rF minitable_scale
  assign addr1.offset rF
  store qword addr1 s_minitable.id rB
  store dword addr1 s_minitable.ref rA
  store word addr1 s_minitable.parent rD
  lwreturn

MINITABLE__REMOVE_NODE:
  assign rF 1
  MINITABLE__REMOVE_NODE.recursive_entry:
  load word rA addr1 s_minitable.parent
  assign rB addr1.offset
  assign rC 0
  MINITABLE_SCAN_CHILDREN:
  if rC < 16
    load word rD addr1 rC
    add rC 2
    if rD == 0 MINITABLE_SCAN_CHILDREN
    goto MINITABLE_PROMOTE_NODE
  
  # follow the reference back to the parent and unlink the node (but not if the reentry point has been called)
  if rF == 1
    load word rC addr1 s_minitable.prefix
    shift-left rA minitable_scale
    assign addr1.offset rA
    assign rA 0
    store word addr1 rC rA

  # no children - delete node
  # get ref to last entry (and update table size)
  assign addr1.offset 0
  load qword rD addr1 s_minitable.size
  dec rD
  store qword addr1 s_minitable.size rD
  shift-left rD minitable_scale
  
  # take the last entry
  assign addr1.offset rD
  block-load 2 xxA addr1 0
  xassign xC 0 0
  block-store 2 addr1 0 xxC
  
  # ... and move it to the vacated position
  assign addr1.offset rB
  block-store 2 addr1 0 xxA
    
  # take the reference to the moved node and navigate to its parent
  load word rA addr1 s_minitable.parent
  shift-left rA minitable_scale
  load word rC addr1 s_minitable.prefix
  assign addr1.offset rA
  
  # lastly, re-link the parent node to the moved node.
  store word addr1 rC rB
  lwreturn
  
  MINITABLE_PROMOTE_NODE:
  shift-left rD minitable_scale
  assign addr1.offset rD
  block-load 2 xxA addr1 0
  
  assign addr1.offset rB
  load word rC addr1 s_minitable.prefix
  block-store 2 addr1 0 xxA
  shift-right rA minitable_scale
  store dword addr1 s_minitable.parent rA
  load word rE addr1 s_minitable.prefix
  
  shift-left rA minitable_scale
  shift-right rB minitable_scale
  assign addr1.offset rA
  assign rA 0
  store word addr1 rC rA
  store word addr1 rE rB
  
  assign addr1.offset rD

  # Remove the vacated node.
  assign rF 0
  goto MINITABLE__REMOVE_NODE.recursive_entry
  
  # iterate children
  # if any non-null
    # pick one to promote (HINT: the first non-null one)
    # read child node data [onto xmm registers]
    # replace child parent with current parent
    # overwrite current node with child data
    # delete the child node [tail-recursive]
  # if all children null
    # select last node in set
    # read last node data [onto xmm registers]
    # zero last node
    # overwrite current node with last node data
    # select last node parent
    # update reference to last node 
    # decrement node count [in root node data]

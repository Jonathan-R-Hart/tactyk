
# DEFLATE stream de-compressor
# This is incomplete, mostly untested.
# It was developed as part of a PNG image loader, and possibly may be overly integrated with it.
#   (it has mostly been separated, but still avoids portions of the stash used by PNG handling)
# 
# Anyway, this makes extensive use of dynamic programming to decode data -- control tables are built
#   which map all combinations of bits [within a preset limit] onto sets of control parameters 
#     (function reference, bitstream bits to 'consume', and symbol or back-ref parameters).
# Two distinct tables are used to account the distinction between "literal/length" symbols and distance symbols.
# 
# Known gaps:  
#   There is no error checking 
#     (it relies on TACTYK memory restrictions to avoid getting out of hand, 
#      and will either yield garbage or crash if the stream is corrupt)
#
# The matter of decoding Huffman data is deferred to a generic decoding utility (code.tkp)

struct s_codebook
  262144 data

# codebook encoding:  
#   bits 0-3:   number of bits to advance [in the input bitstream]
#   bits 4-7:   function to invoke
#   bits 8-15:  argument

mem m_deflate_codebook_fixed s_codebook 2
mem m_deflate_codebook_"DYNAMIC" s_codebook 2
mem m_codelen_codebook s_codebook 1

flat m_codelen_order byte
  16 17 18 0 8 7 9 6 10 5 11 4 12 3 13 2 14 1 15

flat m_codedlength_table dword
  h.00000040
  h.000300e0
  h.000400e0
  h.000500e0
  h.000600e0
  h.000700e0
  h.000800e0
  h.000900e0
  h.000a00e0
  h.000b01e0
  h.000d01e0
  h.000f01e0
  h.001101e0
  h.001302e0
  h.001702e0
  h.001b02e0
  h.001f02e0
  h.002303e0
  h.002b03e0
  h.003303e0
  h.003b03e0
  h.004304e0
  h.005304e0
  h.006304e0
  h.007304e0
  h.008305e0
  h.00a305e0
  h.00c305e0
  h.00e305e0
  h.010200e0

flat m_codeddistance_table dword
  h.00010020
  h.00020020
  h.00030020
  h.00040020
  h.00050120
  h.00070120
  h.00090220
  h.000d0220
  h.00110320
  h.00190320
  h.00210420
  h.00310420
  h.00410520
  h.00610520
  h.00810620
  h.00c10620
  h.01010720
  h.01810720
  h.02010820
  h.03010820
  h.04010920
  h.06010920
  h.08010a20
  h.0c010a20
  h.10010b20
  h.18010b20
  h.20010c20
  h.30010c20
  h.40010d20
  h.60010d20

struct s_defl_misc
  2048 data
mem m_defl_misc s_defl_misc 2

DEFLATE__UNCOMPRESS_RAW.resume:
  goto DEFLATE__UNCOMPRESS_RAW.resume.in

DEFLATE__UNCOMPRESS_RAW:
  lwcall BITSTREAM__INIT.decoder
  DEFLATE__UNCOMPRESS_RAW.resume.in:
  lwcall BITSTREAM__READ_3.decoder
  assign rC rB
  and rC 1
  and rB 6
  stash sWl rC
  if rB == 2
    bind addr3 m_deflate_codebook_fixed
    goto DECODE.deflate
  if rB == 4
    lwcall DEFLATE__MK_"DYNAMIC"_TABLE
    bind addr3 m_deflate_codebook_"DYNAMIC"
    goto DECODE.deflate
  if rB == 0
    goto DEFLATE__UNCOMPRESSED_BLOCK
  
  assign xA 'UNK-defblock
  tcall print-text-xa
  tcall print-space
  tcall print-int-b
  tcall print-newline
  tcall dump-ctx
  exit

DEFLATE__RETURN:
  if rD & h.07
    add rD 8
  shift-right rD 3
  sub rE rD
  inc rE
  lwreturn

# Setup the control table used for unpacking DEFLATE blocks which use the fixed Huffman table
#
# The control table is an array of 32-bit entries specifying what the symbols are and how the decoder should respond to them:
#     bits 0-3:  number of bits from the bitstream to consume
#     bits 4-5:  function to invoke       (most significant bits of jump-table offset from tactyk function "DEFLATE__HUFFMAN.val")
#                   00: literal value
#                   01: lwreturn          (for when the decoder is invoked directly)
#                   10: end of DEFLATE block
#                   11: back-reference
#     bit 7:     unused
#     
#     bits 8-31: varies based on symbol type:
#       Literal Symbols:  bits 8-15:  value, bits 16-31:  unused
#       block-end:        bits 8-31:  unused
#       backref-length:   bits 8-15:  additive bit count ("extra bits"), bits 16-31:  base length of back-reference
#       backref-offset:   bits 8-15:  additive bit count ("extra bits"), bits 16-31:  base offset of back-reference

# -----------------------------------------------------------------------------------------------------------------
# PNG + deflate + code stash/register allocation
# 
# General:
#   addr1:  output
#   addr2:  input
#   rE:   input read head
#   rF:   output write head
#   s26l-s28h:   open
#   sAl-sFh:  ad-hoc locals, usually register-shadowing [used for functions which don't call into anything complex]
# 
# Bistream (while the DEFLATE de-compressor is active)
#   rA:   bitstream loaded bits
#   rB:   open, bitstream output
#   rC:   open
#   rD:   bitstream bit count
#   rE:   memory read head
# 
# PNG global (valid while loading PNGs):
#   s29l-s31h:   PNG control-table (MINITABLE)
# 
# PNG data:
#   sHl:  width
#   sHh:  height
#   sIl:  bit depth
#   sIh:  color mode
#   sJl:  compression method
#   sJh:  filter method
#   sKl:  interlace
#   sKh:  base output offset (PNG__GET input)
#   sLl:  row byte length
#   sLh:    stashed rD during IDAT concatenation
#   
#   sQh:  stashed output buffer position while reading the PNG data structure
#         input buffer end while DEFLATE decrompressor is active
# 
# PNG - process/filter
#   sMl:  byte size of image
# 
# PNG - export:
#   sMl:  output end position
#   sMh:  output current position
#   sNl:  grayscale byte-to-RGB triplet conversion factor (non-alpha formats)
# 
# PNG - padding control:
#   sNh:  padding-skip trigger value  -- possibly switch to width (sHh)
#   sOl:  padding amount
#   sOh:  x
# 
# PNG IDAT concatenation:
#   sPl:  IDAT data block start position
#   sPh:  IDAT concatenator state
#   sQl:  IDAT data position end position
# 
# DEFLATE:
#   rA,rB,rC,rD,rE:  bitstream registers
#   sWl:  final block flag (1 if last block)
#   addr3:  control datable (codebook)
#   addr4:  scratch buffer
# 
# DEFLATE - "dynamic" table builder
#   s26l:  - stashed write head [beginning to end]
#   s27l, s27h, s28l - stashed bitstream persistent vars [while writing codebooks]
#   sRl:  literal quantity
#   sRh:  backref quantity
#   sSl:  codelen quantity
#   sSh:  symbol index
#   sTl:  symbol length buffer index (while unpacking the literal & backref list)
# 
# HUFFMAN decoder
#   rA,rB,rC,rD,rE:  bitstream registers
# 
# Canonical Huffman Code setup:
#   [GUARDED with swap covering rA, rD, rE, and distantly rF]
#   sXh:   codeword length
#   sXl:   index
#   sYl:   base affix value (used to generate all codebook entry duplicates)
#   rB:   base codeword (index bit-reversed)
#   rC:   open
#   rD:   coded value (input)
#   rF:   open
# -----------------------------------------------------------------------------------------------------------------

DEFLATE__INIT:
  bind addr3 m_deflate_codebook_fixed
  assign addr3.offset 0
  lwcall CODEBOOK_CH__INIT.deflate
  
  # start with 7-bit codes
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  
  assign rD h.0047
  lwcall CODEBOOK_CH__PUT.deflate
      
  assign rD h.000300e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000400e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000500e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000600e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000700e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000800e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000900e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000a00e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000b01e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000d01e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000f01e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.001101e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.001302e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.001702e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.001b02e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.001f02e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.002303e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.002b03e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.003303e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.003b03e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.004304e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.005304e7
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.006304e7
  lwcall CODEBOOK_CH__PUT.deflate
  
  # switch to 8-bit codes
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  
  # ltierals 0-143
  assign rD h.0008
  DEFLATE__MK_FIXED_TABLE.literals.low:
  if rD < h.9008
    lwcall CODEBOOK_CH__PUT.deflate
    add rD h.0100
    goto DEFLATE__MK_FIXED_TABLE.literals.low
  
  assign rD h.007304e8
  lwcall CODEBOOK_CH__PUT.deflate  
  assign rD h.008305e8
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00a305e8
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00c305e8
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00e305e8
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.010200e8
  lwcall CODEBOOK_CH__PUT.deflate
  
  assign rD h.ffff00e8
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.ffff00e8
  lwcall CODEBOOK_CH__PUT.deflate
  
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  assign rD h.9009
  
  DEFLATE__MK_FIXED_TABLE.literals.high:
  if rD <= h.ff09
    lwcall CODEBOOK_CH__PUT.deflate
    add rD h.0100
    goto DEFLATE__MK_FIXED_TABLE.literals.high  
  
  #bind addr3 m_deflate_codebook_fixed
  assign addr3.offset s_codebook_size
  
  lwcall CODEBOOK_CH__INIT.deflate
  
  # 5-bit codes
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  lwcall CODEBOOK_CH__NEXTBIT.deflate
  
  # distance codes for offsets 1-4 (no extra bits)
  assign rD h.00010025
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00020025
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00030025
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00040025
  lwcall CODEBOOK_CH__PUT.deflate
  
  # distance codes for base offsets 5-24577 (++1 extra bit every other entry)
  assign rD h.00050125
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00070125
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00090225
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.000d0225
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00110325
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00190325
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00210425
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00310425
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00410525
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00610525
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00810625
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.00c10625
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.01010725
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.01810725
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.02010825
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.03010825
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.04010925
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.06010925
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.08010a25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.0c010a25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.10010b25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.18010b25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.20010c25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.30010c25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.40010d25
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.60010d25
  lwcall CODEBOOK_CH__PUT.deflate
  
  # dummy entries for invalid distnace codes 30 and 31
  assign rD h.ffff0025
  lwcall CODEBOOK_CH__PUT.deflate
  assign rD h.ffff0025
  lwcall CODEBOOK_CH__PUT.deflate
  
  lwreturn

DEFLATE__MK_"DYNAMIC"_TABLE:
  bind addr4 m_defl_misc
  stash s26l rF
  assign rC 0
  DEFLATE__MK_"DYNAMIC"_TABLE.reset:
  if rC < 19
    store byte addr4 rC 0
    inc rC
    goto DEFLATE__MK_"DYNAMIC"_TABLE.reset
  
  lwcall BITSTREAM__PREFETCH.decoder
  
  # set up a control table for handling the stupid codelen code.
  #  It's a compression scheme for a shockingly small amount of data...
  
  # first read the base length values
  lwcall BITSTREAM__READ_5.decoder
  assign sRl rB
  add sRl 257
  lwcall BITSTREAM__READ_5.decoder
  assign sRh rB
  add sRh 1
  lwcall BITSTREAM__READ_4.decoder
  assign sSl rB
  and sSl 15
  add sSl 4
  
  assign rC 0
  
  # read codelen-code lengths
  lwcall BITSTREAM__PREFETCH.decoder
  bind addr3 m_codelen_order
  DEFLATE__MK_"DYNAMIC"_TABLE.read_codelenlen:
  if sSl > 0
    lwcall BITSTREAM__PREFETCH.decoder
    lwcall BITSTREAM__READ_3.decoder
    load byte rF addr3 rC
    store byte addr4 rF rB
    dec sSl
    inc rC
    goto DEFLATE__MK_"DYNAMIC"_TABLE.read_codelenlen
  
  # stash bitstream vars
  stash s27l rA s27h rD s28l rE
  
  bind addr3 m_codelen_codebook
  
  lwcall CODEBOOK_CH__INIT.deflate
  
  # rE:  current stratum
  # rA:  codelen buffer index
  # rC:  codelen stratum
  # rD:  control code (generated codebook entry)
  
  assign rE 1
  DEFLATE__MK_"DYNAMIC"_TABLE.mk_codelencodebook:
  if rE <= 16
    assign rA 0
    DEFLATE__MK_"DYNAMIC"_TABLE.mk_codelencodebook.stratum:
    if rA < 19
      load byte rC addr4 rA
      if rC == rE
        assign rD rA
        shift-left rD 8
        or rD rC
        if rA < 16
          or rD h.60    # codelen-code literal
        if rA == 16
          or rD h.80    # codelen-code copy
        if rA == 17
          or rD h.a0    # codelen-code zeros
        if rA == 18
          or rD h.c0    # codelen-code zeros2
        assign xA 'CODEWORD:
        lwcall CODEBOOK_CH__PUT.deflate
      inc rA
      goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_codelencodebook.stratum
    lwcall CODEBOOK_CH__NEXTBIT.deflate
    inc rE
    goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_codelencodebook
  
  bind addr3 m_codelen_codebook
  bind addr4 m_defl_misc
  assign rF sRl
  # assign rC sRh
  add rF sRh
  assign sTl 0
  
  # unstash bitstream vars
  stash rA s27l rD s27h rE s28l
  
  # read symbols from bitstream
  DEFLATE__MK_"DYNAMIC"_TABLE.mk_literalscodebook:
  if sTl < rF
    # can't goto here because the "copy" subroutine needs to be able to call the "symbol" subroutine multiple times
    lwcall DECODE.deflate
    goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_literalscodebook
  
  # stash bitstream vars
  stash s27l rA s27h rD s28l rE
  
  # build the literal table
  
  # rA:   literal value
  # rD:   packed control-table parameters for handling the encoded literal (codebook entry)
  # rE:   stratum
  # rF:   literal table size
  
  assign rF sRl
  assign rE 1
  assign rA 0
  
  bind addr3 m_deflate_codebook_"DYNAMIC"
  assign addr3.offset 0
  
  lwcall CODEBOOK_CH__INIT.deflate
  
  DEFLATE__MK_"DYNAMIC"_TABLE.mk_literal_table:
  if rE <= 16
    # get codeword length
    if rA < rF
      bind addr4 m_defl_misc
      load byte rD addr4 rA
    
    # if all codewords for the stratum are handled, move to the next
    if rA >= rF
      inc rE
      assign rA 0
      lwcall CODEBOOK_CH__NEXTBIT.deflate
      goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_literal_table
    
    # check codeword length - if the codeword does not belong to the current stratum, skip it
    #   (could also sort the data and record indices, but that's an extra complication)
    if rD == rE
      # if a literal, the code instruction is just a bit-shifted value
      if rA < 256
        assign rD rA
        shift-left rD 8
      if rA >= 256
        bind addr4 m_codedlength_table
        assign rD rA
        sub rD 256
        shift-left rD 2
        load dword rD addr4 rD
      
      or rD rE              # codeword length
      # add the code to the codebook
      lwcall CODEBOOK_CH__PUT.deflate
    inc rA
    goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_literal_table
  
  # build the distance table
  
  # sSh:  symbol index/value
  # rA:   distance table index
  # rD:   packed control-table parameters for handling the encoded distance (codebook entry)
  # rE:   stratum
  # rF:   symbol table size
  
  assign sSh sRl
  assign rF sRh
  add rF sRl
  assign rE 1
  assign rA 0
  
  bind addr3 m_deflate_codebook_"DYNAMIC"
  assign addr3.offset s_codebook_size
  
  lwcall CODEBOOK_CH__INIT.deflate
  
  DEFLATE__MK_"DYNAMIC"_TABLE.mk_distance_table:
  if rE <= 16
    
    # get codeword length
    if sSh < rF
      bind addr4 m_defl_misc
      assign rD sSh
      load byte rD addr4 rD
    
    # if all codewords for the stratum are handled, move to the next
    if sSh >= rF
      inc rE
      assign rA 0
      assign sSh sRl
      lwcall CODEBOOK_CH__NEXTBIT.deflate
      goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_distance_table
    
    # check codeword length - if the codeword does not belong to the current stratum, skip it
    #   (could also sort the data and record indices, but that's an extra complication)
    if rD == rE
      bind addr4 m_codeddistance_table
      assign rD rA
      shift-left rD 2
      load dword rD addr4 rD
      
      or rD rE              # codeword length
      # add the code to the codebook
      lwcall CODEBOOK_CH__PUT.deflate
    inc sSh
    inc rA
    
    goto DEFLATE__MK_"DYNAMIC"_TABLE.mk_distance_table
  
  # unstash bitstream vars
  stash rA s27l rD s27h rE s28l rF s26l
  lwreturn

DEFLATE__MK_CODELENCODEBOOK.symbol:
  store byte addr4 sTl rB
  inc sTl
  lwreturn
  
DEFLATE__MK_CODELENCODEBOOK.copy:
  lwcall BITSTREAM__READ_2.decoder
  add rB 3
  dec sTl
  load byte rC addr4 sTl
  inc sTl
  DEFLATE__MK_CODELENCODEBOOK.copy.lp:
  if rB > 0
    store byte addr4 sTl rC
    inc sTl
    dec rB
    goto DEFLATE__MK_CODELENCODEBOOK.copy.lp
  lwreturn
DEFLATE__MK_CODELENCODEBOOK.zeros:
  lwcall BITSTREAM__READ_3.decoder
  add rB 3
  DEFLATE__MK_CODELENCODEBOOK.zeros.lp:
  if rB > 0
    store byte addr4 sTl 0
    inc sTl
    dec rB
    goto DEFLATE__MK_CODELENCODEBOOK.zeros.lp
  lwreturn
DEFLATE__MK_CODELENCODEBOOK.zeros2:
  assign xA 'ZEROS2
  lwcall BITSTREAM__READ_7.decoder
  add rB 11
  goto DEFLATE__MK_CODELENCODEBOOK.zeros.lp
DEFLATE__HUFFMAN.val:
  store byte addr1 rF rB
  inc rF
  skip
  goto DECODE.deflate

DEFLATE__HUFFMAN.distref.ret:
  goto DEFLATE__HUFFMAN.backref.resume
  skip
  skip
  skip

DEFLATE__HUFFMAN.exit:
  stash rC sWl
  if rC == 0 DEFLATE__UNCOMPRESS_RAW.resume
  skip
  goto DEFLATE__RETURN

DEFLATE__MK_CODELENCODE.symbol:
  goto DEFLATE__MK_CODELENCODEBOOK.symbol
  skip
  skip
  skip
DEFLATE__MK_CODELENCODE.copy:
  goto DEFLATE__MK_CODELENCODEBOOK.copy
  skip
  skip
  skip
DEFLATE__MK_CODELENCODE.zeros:
  goto DEFLATE__MK_CODELENCODEBOOK.zeros
  skip
  skip
  skip
DEFLATE__MK_CODELENCODE.zeros2:
  goto DEFLATE__MK_CODELENCODEBOOK.zeros2
  skip
  skip
  skip

DEFLATE__HUFFMAN.backref:
  # relieve register pressure
  stash sBl rE
  
  assign rC rB
  shift-right rC 8
  and rB h.ff
  
  # read length additive from bitstream and apply it
  sub rD rB
  assign rE rA
  shift-right rA rB
  shift-left rA rB
  xor rE rA
  shift-right rA rB
  add rC rE
  stash sCl rC rE sBl
  assign addr3.offset s_codebook_size
  goto DECODE.deflate
  
  DEFLATE__HUFFMAN.backref.resume:
  stash sBl rE
  assign rC rB
  and rC h.ff
  shift-right rB 8
  assign rE rA
  shift-right rA rC
  shift-left rA rC
  xor rE rA
  shift-right rA rC
  sub rD rC
  add rB rE
  
  assign addr3.offset 0
  
  stash rC sCl rE sBl
  negate rB
  add rB rF
  
  if rB > 0
    DEFLATE__HUFFMAN.backref.copy:
    if rC > 0
      load byte rE addr1 rB
      store byte addr1 rF rE
      sub rC 1
      add rB 1
      add rF 1
      goto DEFLATE__HUFFMAN.backref.copy
  stash rE sBl
  goto DECODE.deflate

DEFLATE__UNCOMPRESSED_BLOCK:
  assign rB rD
  and rB 7
  shift-right rA rB
  and rA h.ffff
  sub rD rB
  shift-right rD 3
  sub rE rD
  add rE 4
  
  DEFLATE__UNCOMPRESSED_BLOCK.copy.qwords:
  if rA >= 8
    load qword rB addr2 rE
    store qword addr1 rF rB
    sub rA 8
    add rE 8
    add rF 8
    goto DEFLATE__UNCOMPRESSED_BLOCK.copy.qwords
  DEFLATE__UNCOMPRESSED_BLOCK.copy.bytes:
  if rA >= 1
    load byte rB addr2 rE
    store byte addr1 rF rB
    dec rA
    inc rE
    inc rF
    goto DEFLATE__UNCOMPRESSED_BLOCK.copy.bytes
  goto DEFLATE__HUFFMAN.exit
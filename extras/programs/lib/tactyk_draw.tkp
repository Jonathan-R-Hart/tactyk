
struct gx_pixel
  16 channel_ABCD
  16 channel_EFGH
  16 normal_ABCD
  16 normal_EFGH
  64 unused

struct gx_info
  4 width
  4 height
  4 fb_width
  4 fb_height
  128 g_colors
  . 16 g_color_A
  16 g_color_B
  16 g_color_C
  16 g_color_D
  16 g_color_E
  16 g_color_F
  16 g_color_G
  16 g_color_H
  32 g_normals
  . 4 g_normal_A
  4 g_normal_B
  4 g_normal_C
  4 g_normal_D
  4 g_normal_E
  4 g_normal_F
  4 g_normal_G
  4 g_normal_H

mem m_gx_info gx_info 1

GX.mk_window:  
  
  bind addr2 m_gx_info
  load dword rA addr2 gx_info.width
  load dword rB addr2 gx_info.height
  assign rC gx_pixel_size
  tcall sdl--new
  lwreturn

GX.bind_memblocks:
  tcall sdl--get-framebuffer
  bind addr3 addr1
  tcall sdl--get-scratchbuffer
  bind addr4 addr1
  bind addr2 m_gx_info
  store dword addr2 gx_info.fb_width rA
  store dword addr2 gx_info.fb_height rB
  lwreturn

GX.cliprect:
  lwreturn

GX.fillrect:
  stash sA rA sB rB sC rC
  FILL_ROW:
  if rD < rF
    stash rA sA
    mul rA rD
    add rA rC
    assign rB rA
    mul rA 4
    mul rB gx_pixel_size
    FILL_PIXEL:
    if rC < rE
      block-store 4 addr4 rB xxA
      # tcall dump-ctx
      add rA 4
      add rB gx_pixel_size
      inc rC
      goto FILL_PIXEL
    inc rD
    stash rC sC 
    goto FILL_ROW
  stash rA sA rB sB
  lwreturn

# A post-compositing pixel shader
# 
# Per pixel, this multiplies the global colors by pixel blending factors
# Pixel blending factors are obtained by comparing pixel normals with global normals, subtracting the deviation from one, then multiplying the inverted deviation by pixel values
#
# For now, this is a software shader.
# At some point, it may be ported to GLSL and used as the final stage in a deferred rendering pipeline.

GX.render:
  # fetch dimensions
  load dword rA addr2 gx_info.fb_width
  load dword rB addr2 gx_info.fb_height
  load dword rC addr2 gx_info.width
  load dword rD addr2 gx_info.height
  
  assign rB rA
  mul rB rD
  mul rA 4
  mul rB 4
  mul rC 4
  assign rD rA
  sub rD rC
  
  # rA:  (fbwidth) * 4            [fb line size]
  # rB:  (fbwidth * height * 4)   [v-end]
  # rC:  (width * 4)              [line-end]
  # rD:  (fbwidth-width) * 4      ["h-blank"]

  assign rE 0
  
  xassign xA 0.0   0.0   0.0   0.0
  xassign xB 255.0 255.0 255.0 255.0
  
  block-load 2 xxC addr2 gx_info.g_normals
  tcall dump-ctx
  DRAW_ROW:
  if rE < rB
    DRAW_PIXEL:
    if rE < rC
      shift-left rE 5
      block-load 4 xxK addr4 rE
      shift-right rE 5
      xassign xE xA
      xassign xF xA
      
      # get negated absolute value of deviation between pixel normals and global normals
      xsub 2 xvK float32 xvC float32
      xsub 2 xvE float32 xvK float32
      xmin 2 xvK float32 xvE float32
      
      # Add one to obtain a "diffuse" value, clamp at 0
      xadd 2 xvK float32 1.0
      xmax 2 xvK float32 xA float32
      
      # multiply raw weights by channel values to obtain blend factors
      xmul 2 xvM float32 xvK float32
      
      # multiply each global color by the blending factors
      block-load 8 xxE addr2 gx_info.g_colors
      xmul 4 xvE float32 xM float32
      xmul 4 xvI float32 xN float32
      
      # mix the colors, scale to range 0-255, and clip to 255
      xadd 8 xA float32 xvE float32      
      xmul xA float32 xB float32
      xmin xA float32 xB float32
      
      # move it out of the way, re-initialize the next pixel,
      # and use the re-initailzied pixel to remove negative components from the output pixel
      xassign xI xA
      xmax xI float32 xA float32
      xassign xA 0.0 0.0 0.0 0.0
      
      # convert and repack to integer RGBA
      unpack float32.4 xE xI
      xassign xI int8 0 xE
      xassign xI int8 1 xF
      xassign xI int8 2 xG
      xassign xI int8 3 xH
      
      # write to framebuffer
      xassign rF xI int32 0
      store dword addr3 rE rF
      
      if rE == 20
        tcall dump-ctx
      
      # iterate (next pixel in current row)
      add rE 4
      goto DRAW_PIXEL

    add rC rA
    add rE rD
    goto DRAW_ROW
  
  tcall sdl--upload-framebuffer
  tcall sdl--render
  lwreturn







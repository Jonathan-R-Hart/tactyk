
# PREPROCESSOR VARS:
# $NAME                      Unique / descriptive text (to allow multiple decoders with different parameters)
# $CODEWORDMASK              binary mask for indexing the codebook
# $CODEWORDSCALE             bitshift to apply to masked index value (to obtain a byte index of a codebook entry for any given code)
# $CODEVALUESIZE              word-size keyword for readong codebook entries (byte, word, dword, or qword, for 8-bit, 16-bit, 32-bit, or 64-bit coded values)
# $CONSUMPTIONBITS           bit count of coded-param consumption field
# $CONSUMPTIONMASK           binary mask for extracting input consumption amount (2^$CONSUMPTION_BITS - 1)
# $CONSUMPTIONCONST          A constant amount of input bits to consume for each decoding op (added to the extracted input consumption value) 
# $HANDLERBASE               Reference to the base handler function (tactyk label)
# $HANDLERBITS               Number of bits for specifying the handler function offset [from the base handler function]
# $HANDLERMASK               binary mask for extracting handler offset (2^$HANDLER_BITS - 1)
# $HANDLERALIGNMENT          Bitshift to apply to the extracted handler offset

# standard vars 
# $NAME hdec
# $CODEWORDMASK h.000fffff
# $CODEVALUESIZE 20
# $CODEWORDSCALE 2
# $CODEVALUESIZE dword
# $CONSUMPTIONBITS 4
# $CONSUMPTIONMASK h.000f
# $CONSUMPTIONCONST 8
# $HANDLERBITS 4
# $HANDLERBASE ~HUFFMAN
# $HANDLERALIGNMENT 4

# Register allocation:
#   addr2:    input stream
#   addr3:    codebook
#   addr4:    output stream
#   rA:   residue             (32-64 bits from input stream)
#   rB:   parameter           (entry obtained from codebook)
#   rC:   variable            (shift parameter or handler ref)
#   rD:   residue bit count   (used to determine when to fetch more input)
#   rE:   input position      (read head)
#   rF:   output position     (write head)

# codebook layout:
#   each entry is a 16-bit word
#   bits 0-3:   extra input bits to consume (a fixed consumption amount is added)
#   bits 4-7:   offset of code handler from base handler (each handler must be aligned in global jump table with base handler)
#   bits 8-LAST:  values (handler-interpreted field)

DECODE.$NAME:
  lwcall BITSTREAM__PREFETCH.decoder
  
  # get codebook entry
  assign rB rA
  and rB $CODEWORDMASK
  shift-left rB $CODEWORDSCALE
  load $CODEVALUESIZE rB addr3 rB
  
  # For now, validate the value
  if b == 0
    assign xA 'BadCodebookEntry
    assign rB rA
    and rB $CODEWORDMASK
    # shift-left rB $CODEWORDSCALE
    tcall print-text-xa
    tcall print-space
    tcall print-int-b
    exit
  
  # consume input bits
  assign rC rB
  and rC $CONSUMPTIONMASK
  add rC $CONSUMPTIONCONST
  sub rD rC
  shift-right rA rC
  
  # select handler
  shift-right rB $CONSUMPTIONBITS
  assign rC rB
  and rC $HANDLERMASK
  shift-left rC $HANDLERALIGNMENT
  add rC $HANDLERBASE
  
  # value
  shift-right rB $HANDLERBITS
  goto rC


# Utility functions for constructing a codebook which interprets Canonical Huffman Codes 
#
# The table is constructed by invoking the PUT function for each entry to insert, and invoking the NEXTBIT function when the codeword length is increases.
# Codebook entries are binary fields (no restrictions on content).
# 
# Each time an entry is inserted, it finds all positions which match the code and inserts codebook entries for them all.
#   (the code is matched if it contains the codeword in its least significant bits)
CODEBOOK_CH__INIT.$NAME:
  assign rA 0
  assign rF 1
  # shift-left rF $CODEWORDBITS
  assign rE 1
  lwreturn

CODEBOOK_CH__NEXTBIT.$NAME:
  shift-left rA 1
  shift-left rE 1
  inc rF 1
  lwreturn

CODEBOOK_CH__PUT.$NAME:
  assign rB 0
  assign rC 1
  if rA & 1
    inc rB
  CODEBOOK_CH__PUT.reverse.$NAME:
  if rC != rF
    rotate-right rA 1
    shift-left rB 1
    if rA & 1
      inc rB
    inc rC
    goto CODEBOOK_CH__PUT.reverse.$NAME
  # rotate-left rA $CODEWORDBITS
  rotate-left rA rF
  rotate-right rA 1
  
  # starting with the calculated base value, derive all "variant" codewords and insert them into the codebook
  #   They're not really variant codewords - just extra entries to cover arbitrary bits which are neither part of the codeword,
  #   not removed after processing the codeword.
  #   [allowing the decoder to directly index the codebook with a raw values].
  assign rC 1
  shift-left rC rF
  CODEBOOK_CH__PUT.insert.$NAME:
  if rB < $CODEWORDLIMIT
    shift-left rB $CODEWORDSCALE
    stash s27 rF
    load $CODEVALUESIZE rF addr3 rB
    #if rF != 0
    #  tcall dump-ctx
    #  assign xB 'OVERWRITE
    #  tcall print-text-xb
    #  tcall print-space
    #  tcall print-int-f
    #  tcall print-space
    #  tcall print-int-d
    #  tcall print-newline
    #  exit
    stash rF s27
    store $CODEVALUESIZE addr3 rB rD
    shift-right rB $CODEWORDSCALE
    add rB rC
    goto CODEBOOK_CH__PUT.insert.$NAME
  inc rA
  lwreturn



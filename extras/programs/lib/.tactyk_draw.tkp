
struct gx_pixel
  32 components
  . 16 channel_ABCD
  16 channel_EFGH
  32 normals
  . 16 normal_ABCD
  16 normal_EFGH
  64 shader_data
  . 4 x
  4 y
  4 u
  4 v
  4 depth
  4 normal
  4 s
  4 t
  
  # positions of global normal and color tables
  4 index_gnorm1
  4 index_gnorm2
  4 index_gcolors1
  4 index_gcolors2
  
  # alpha-blend factor of set 1 <-> set 2
  4 blend_gnorm
  4 blend_gcolors
  
  # alpha-blend factor of blended global data <-> pixel data
  4 blend_pnorm
  4 blend_pvalue
  
  
struct gx_info
  32 g_normals
  . 16 normals_ABCD
  16 normals_EFGH
  32 g_colors
  . 16 components_ABCD
  16 components_EFGH
  64 blend_mat_components_ABCD
  64 blend_mat_components_DEFG
  64 blend_mat_normals_ABCD
  64 blend_mat_normals_EFGH
  > 65536 g_matrixbuf
  
  16 view_size
  . 8 width
  8 height
  
  16 fbuf_size
  . 8 fb_width
  8 fb_height
  
  16 world_position
  . 8 x
  8 y
  
  128 rasterizer_data

struct gx_program
  128 functions
  . 8 f0
  8 f1
  8 f2
  8 f3
  8 f4
  8 f5
  8 f6
  8 f7
  8 f8
  8 f9
  8 f10
  8 f11
  8 f12
  8 f13
  8 f14
  8 f15
  0 end
  3968 data

mem m_gx_info gx_info 1
mem m_gx_drawprogram gx_program 1

# Initialize and obtain a window from SDL
#   At some point, if/when there is a desire to perform off-display rendering, 
#   responsibility for buffer generation and binding will have to be transferred elsewhere.
GX.mk_window:
  bind addr2 m_gx_info
  load qword rA addr2 gx_info.width
  load qword rB addr2 gx_info.height
  assign rC gx_pixel_size
  assign rD 3
  tcall sdl--new
  lwreturn

# Obtain references to tactyk-draw memory
#   All tactyk address registers are used (addr1 is used by renderers for instance-ish parameters), so other components needing memory will have to rebind it.
GX.bind_memblocks:
  tcall sdl--get-framebuffer
  bind addr3 addr1
  tcall sdl--get-scratchbuffer
  bind addr4 addr1
  bind addr2 m_gx_info
  store dword addr2 gx_info.fb_width rA
  store dword addr2 gx_info.fb_height rB
  lwreturn

# Convert all pixels from the complex internal format to 32-bit integer rgba
# 
# Per pixel, this multiplies the global colors by pixel blending factors
# Pixel blending factors are obtained by comparing pixel normals with global normals, subtracting the deviation from one, then multiplying the inverted deviation by pixel values
#
# For now, this is a software shader.
# At some point, responsibility for this may be transferred to the tactyk-runtime, with the conversion ported to GLSL and used as the final stage in a deferred rendering pipeline.
GX.to_rgba:
  # fetch dimensions
  load qword rE addr2 gx_info.fb_width
  load qword rC addr2 gx_info.fb_height
  load qword rB addr2 gx_info.width
  load qword rD addr2 gx_info.height
  assign rC rE
  mul rC rD
  mul rE 4
  mul rC 4
  mul rB 4
  assign rD rE
  sub rD rB
  
  # rE:  (fbwidth) * 4            [fb line size]
  # rC:  (fbwidth * height * 4)   [v-end]
  # rB:  (width * 4)              [line-end]
  # rD:  (fbwidth-width) * 4      ["h-blank"]
  
  assign rA 0
  
  xassign xE 0.0   0.0   0.0   0.0
  xassign xB 255.0 255.0 255.0 255.0
  
  block-load 2 xxC addr2 gx_info.g_normals
  
  DRAW_ROW:
  if rA < rC
    stash sAl rC sAh rD sBl rE
    DRAW_PIXEL:
    if rA < rB
      shift-left rA 5
      assign addr4.offset rA
      block-load 4 xxK addr4 0
      shift-right rA 5
      xassign xE xA
      xassign xF xA
      
      #load word rF addr3 gx_pixel.gnorm1
      #block-load 4 xE addr3
      
      # get negated absolute value of deviation between pixel normals and global normals
      xsub 2 xvM float32 xvC float32
      xsub 2 xvE float32 xvM float32
      xmin 2 xvM float32 xvE float32
      
      # Add one to obtain a "diffuse" value, clamp at 0
      xadd 2 xvM float32 1.0
      xmax 2 xvM float32 xA float32
      
      # multiply raw weights by channel values to obtain blend factors
      xmul 2 xvM float32 xvK float32
      
      # multiply each global color by the blending factors
      block-load 8 xxE addr2 gx_info.g_colors
      xmul 4 xvE float32 xM float32
      xmul 4 xvI float32 xN float32
      
      # mix the colors, scale to range 0-255, and clip to 255
      xadd 8 xA float32 xvE float32      
      xmul xA float32 xB float32
      xmin xA float32 xB float32
      
      # move it out of the way, re-initialize the next pixel,
      # and use the re-initailzied pixel to remove negative components from the output pixel
      xassign xI xA
      xmax xI float32 xA float32
      xassign xA 0.0 0.0 0.0 0.0
      
      # convert and repack to integer RGBA
      unpack float32.4 xE xI
      xassign xI int8 0 xE
      xassign xI int8 1 xF
      xassign xI int8 2 xG
      xassign xI int8 3 xH
      
      # write to framebuffer
      xassign rF xI int32 0
      assign addr3.offset rA
      store dword addr3 0 rF
      
      # iterate (next pixel in current row)
      add rA 4
      goto DRAW_PIXEL
    
    stash rC sAl rD sAh rE sBl
    add rB rE
    add rA rD
    goto DRAW_ROW
  
  tcall sdl--upload-framebuffer
  tcall sdl--render
  lwreturn

# fill a rectangular area
GX.fill.rect:
  bind addr1 m_gx_drawprogram
  assign rF 0
  lwcall GX.rect.fill
  lwcall GX.fills.simple
  lwcall GX.util.exit
  assign rF 0
  goto GX.draw

# draw an inset outline around a rectangular area
GX.trace.rect:
  bind addr1 m_gx_drawprogram
  assign rF 0
  lwcall GX.rect.outline
  lwcall GX.fills.simple
  lwcall GX.util.exit
  assign rF 0
  goto GX.draw

# main rendering driver
GX.draw:
  if rF == 1
    lwreturn
  assign rF 0
  load qword rE addr1 gx_program.f0
  lwcall rE
  goto GX.draw

# basic filling function
# This performs a simple overwrite of all color channels and normals
GX.fills.simple:
  block-store 4 addr1 gx_program.data xxA
  assign rA GX.fills.simple.impl
  store qword addr1 rF rA
  add rF 8
  lwreturn
GX.fills.simple.impl:
  block-load 4 xxA addr1 gx_program.data
  block-store 4 addr4 0 xxA
  add rF 8
  if rF == gx_program.end
    lwreturn
  load qword rE addr1 rF
  goto rE

# return from a renderer
GX.util.exit:
  assign rA GX.util.exit.impl
  store qword addr1 rF rA
  add rF 8
  lwreturn
GX.util.exit.impl:
  assign rF gx_program.end
  lwreturn



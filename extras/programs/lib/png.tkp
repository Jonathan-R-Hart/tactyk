# stash allocation
#
# This gets a little complicated -- you probably should wrap any calls into this with "mctxpush ... mctxpop".
#
#   sA-sF:  shadow-registers
#   sH-sN:  PNG control
#   s28-s31:  table
#   sHl - width
#   sHh - height
#   sIl - bit-depth
#   sIh - color type
#   sJl - compression
#   sJh - filter
#   sKl - interlace
#   sU-sZ:  more shadow-registers
#   

# register allocation
#   addr1 - output texture
#   addr2 - input png data
#   addr3 - *varies
#   addr4 - *varies

struct s_texture
  4 width
  4 height
  # data [any amount]

struct s_data_chunk
  16777216 data

struct s_crc
  1024 data

mem m_crc s_crc 1

mem m_png_palette s_data_chunk 1
mem m_data_chunk s_data_chunk 1
mem m_png_control s_MINITABLE 65536


PNG__INIT:
  bind addr4 m_png_control
  lwcall MINITABLE__INIT.addr4
  lwcall MINITABLE__PUT.addr4 PNG__IHDR 'IHDR
  lwcall MINITABLE__PUT.addr4 PNG__PLTE 'PLTE
  lwcall MINITABLE__PUT.addr4 PNG__tRNS 'tRNS
  lwcall MINITABLE__PUT.addr4 PNG__IDAT 'IDAT
  lwcall MINITABLE__PUT.addr4 PNG__IEND 'IEND
  
  # build the static huffman decoder table (for DEFLATE)
  assign rD 0
  stash sAl rD
  lwcall DEFLATE__INIT
  
  # build a parallel of the Huffman decoder table with a variant literal-value handler (to capture the distance field in back-references)
  lwreturn

PNG__READ:
  stash sBl rA
  bind addr1 m_data_chunk
  load qword rA addr2 0
  if rA != h.0a1a0a0d474e5089
    assign xA 'ThatsNOTaPNG:
    tcall print-text-xa
    tcall print-space
    tcall print-int-a
    tcall print-newline
    exit
    
  assign rE 8
  assign rF addr2.element_bound
  PNG__READ.scan:
  if rE < rF
    load dword rD addr2 rE
    reverse-bytes dword rD
    add rE 4
    load dword rB addr2 rE
    add rE 4
    
    block-stash 6 sK rA
    bind addr4 m_png_control    
    lwcall MINITABLE__GET.addr4
    stash rD sLh
    stash rE sMl
    
    # if the handler for the PNG chunk is defined, invoke it
    if rC == 1
      goto rA
    
    # if the handler for the PNG chunk is undefined, fuss about it on the System Console.
    if rC == 0
      assign xA 'Unimplemented
      if rB & h.20
        assign xB 'Ancillary-chunk:
      if rB ~& h.20
        assign xB 'Critical--chunk:
      tcall print-text-xa
      tcall print-space
      tcall print-text-xb
      tcall print-space
      tcall print-text-b
      tcall print-space
      tcall print-int-d
      tcall print-newline
    
    PNG__READ.next:
    block-stash 6 rA sK
    
    add rE rD
    
    # CRC ... dont care - If you want validation, load your PNGs in an image editor and have at it.
    #load dword rD addr2 rE
    #reverse-bytes dword rD
    
    add rE 4
    
    goto PNG__READ.scan
  assign xA 'ERR.missing.IEND
  tcall print-text-xa
  tcall print-newline
  assign rA 0
  lwreturn

PNG__GET:
  bind addr2 m_data_chunk
  stash sMh rA sKh rA
  stash rD sHl rE sHh
  # add rD 8
  mul rE rD
  shift-left rE 2
  add rE rA
  stash rA sIl rB sIh
  stash sMl rE
  assign rF rC
  stash rD sLl
  stash sAl rD sBl rD sCl rD
  if rB == 4
    tcall dump-ctx
    assign rC 1
    if rA == 16
      assign rA PNG__EXTRACT.16bit.alphagrayscale
    if rA == 32
      assign rA PNG__EXTRACT.32bit.alphagrayscale
    stash sNl rE
    stash rE sIl
    goto rA
  if rA == 1
    shift-left rD 3
    assign rC 8
    assign rE h.ffffff
    stash sNl rE
    assign rA PNG__EXTRACT.1bit
    goto PNG__GET.pickmode
  if rA == 2
    shift-left rD 2
    assign rC 4
    assign rA PNG__EXTRACT.2bit
    assign rE h.555555
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 4
    shift-left rD 1
    assign rC 2
    assign rA PNG__EXTRACT.4bit
    assign rE h.111111
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 8
    assign rC 1
    assign rA PNG__EXTRACT.8bit
    assign rE h.010101
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 16
    assign rC 1
    assign rA PNG__EXTRACT.16bit
    assign rE h.010101
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 24
    assign rC 1
    assign rA PNG__EXTRACT.24bit
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 32
    assign rC 1
    assign rA PNG__EXTRACT.32bit
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 48
    assign rC 1
    assign rA PNG__EXTRACT.48bit
    stash sNl rE
    goto PNG__GET.pickmode
  if rA == 64
    assign rC 1
    assign rA PNG__EXTRACT.64bit
    stash sNl rE
    goto PNG__GET.pickmode

  assign xA 'todo:bitrate
  tcall print-text-xa
  tcall print-space
  tcall print-int-a
  tcall print-newline
  exit
  
  PNG__GET.pickmode:
  if rB == 0
    assign rB PNG__CONVERT.grayscale
    goto rA
  if rB == 2
    assign rB PNG__CONVERT.truecolor
    goto rA
  if rB == 6
    assign rB PNG__CONVERT.truecolor
    goto rA
  if rB == 3
    bind addr3 m_png_palette
    assign rB PNG__CONVERT.indexed
    goto rA
  
  assign xA 'todo:colormode
  tcall print-text-xa
  tcall print-space
  tcall print-int-b
  tcall print-newline
  
  exit

PNG__GET.epilogue:
  stash rA sKh rB sMh rC sHl rD sHh
  
  # calculate where the end index is supposed to be [instead of trusting the pixel emitter to leave a correct index behind]
  assign rB rC
  mul rB rD
  mul rB 4
  add rB rA
  lwreturn

PNG__EXTRACT.1bit:
  assign rE rC
  if rE == rD
    add rC 8
    assign rE rC
    stash rF sLl
    shift-left rF 3
    add rD rF
  shift-right rE 3
  load byte rF addr2 rE
  assign rE rC
  and rE h.07
  negate rE
  add rE 7
  shift-right rF rE
  and rF 1
  inc rC
  goto rB

PNG__EXTRACT.2bit:
  assign rE rC
  if rE == rD
    add rC 4
    assign rE rC
    stash rF sLl
    shift-left rF 2
    add rD rF
  shift-right rE 2
  load byte rF addr2 rE
  assign rE rC
  and rE h.03
  negate rE
  add rE 3
  shift-left rE 1
  shift-right rF rE
  and rF 3
  inc rC
  goto rB

PNG__EXTRACT.4bit:
  assign rE rC
  if rE == rD
    add rC 2
    assign rE rC
    stash rF sLl
    shift-left rF 1
    add rD rF
  shift-right rE 1
  load byte rF addr2 rE
  assign rE rC
  and rE h.01
  xor rE 1
  shift-left rE 2
  shift-right rF rE
  and rF 15
  inc rC
  goto rB

PNG__EXTRACT.8bit:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  load byte rF addr2 rE
  inc rC
  goto rB

PNG__EXTRACT.16bit:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  load byte rF addr2 rE
  add rC 2
  goto rB

PNG__EXTRACT.24bit:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  load dword rF addr2 rE
  and rF h.00ffffff
  add rC 3
  goto rB

PNG__EXTRACT.32bit:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  load dword rF addr2 rE
  add rC 4
  goto rB

PNG__EXTRACT.48bit:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  # extract from big-endian positions
  #   (if the least significant bits are ever needed, use the arrange-bytes function and change this)
  load dword rF addr2 rE
  and rF h.00ff00ff
  add rE 4
  load byte rE addr2 rE
  shift-left rE 24
  or rF rE
  assign rE rF
  and rE 255
  shift-right rF 8
  or rF rE
  add rC 6
  goto rB

PNG__EXTRACT.64bit:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  # extract from big-endian positions
  #   (if the least significant bits are ever needed, use the arrange-bytes function and change this)
  load qword rF addr2 rE
  assign rE rF
  and rF h.000000ff000000ff
  and rE h.00ff000000ff0000
  shift-right rE 8
  or rF rE
  assign rE rF
  and rF h.000000000000ffff
  and rE h.0000ffff00000000
  shift-right rE 16
  or rF rE
  add rC 8
  goto rB

PNG__EXTRACT.16bit.alphagrayscale:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  add rC 2
  load word rF addr2 rE
  assign rE rF
  and rF h.00ff
  and rE h.ff00
  mul rF h.010101
  shift-left rE 16
  or rF rE
  goto PNG__GET.write

PNG__EXTRACT.32bit.alphagrayscale:
  assign rE rC
  if rE == rD
    inc rC
    assign rE rC
    stash rF sLl
    add rD rF
  add rC 4
  load dword rF addr2 rE
  assign rE rF
  and rF h.000000ff
  and rE h.00ff0000
  mul rF h.010101
  shift-left rE 8
  or rF rE
  goto PNG__GET.write

PNG__CONVERT.grayscale:
  stash rE sNl
  mul rF rE
  goto PNG__GET.write
PNG__CONVERT.indexed:
  shift-left rF 2
  load dword rF addr3 rF
  goto PNG__GET.write

PNG__CONVERT.truecolor:
PNG__GET.write:
  stash rE sMh
  store dword addr1 rE rF
  add rE 4
  stash sMh rE rF sMl
  if rE >= rF PNG__GET.epilogue
  goto rA
  
  if rD == 8
    PNG__GET.indexed.lp.byte:
    if rF < rE
      load byte rA addr2 rF
      mul rA 3
      #load dword rA addr3 rA
      #or rA h.ff000000
      store dword addr1 rC rA
      inc rF
      add rC 4
      goto PNG__GET.indexed.lp.byte
  goto PNG__GET.epilogue


PNG__IHDR:
  assign rF rE
  
  load dword rA addr2 rF
  reverse-bytes dword rA
  add rF 4
  load dword rB addr2 rF
  reverse-bytes dword rB
  add rF 4
  block-stash 2 sH rA
  
  # bit-depth, color-type, compression, filter, and interlace fields
  load byte rA addr2 rF
  inc rF
  load byte rB addr2 rF
  inc rF
  load byte rC addr2 rF
  inc rF
  load byte rD addr2 rF
  inc rF
  load byte rE addr2 rF
  block-stash 5 sI rA
  goto PNG__READ.next

PNG__PLTE:
  bind addr4 m_png_palette
  assign rF rE
  add rE rD
  assign rD 0
  PNG__PLTE.scan:
  if rF >= rE PNG__READ.next
    load byte rA addr2 rF
    inc rF
    load byte rB addr2 rF
    inc rF
    load byte rC addr2 rF
    inc rF
    store byte addr4 rD rA
    inc rD
    store byte addr4 rD rB
    inc rD
    store byte addr4 rD rC
    inc rD
    store byte addr4 rD 255
    inc rD
  goto PNG__PLTE.scan

PNG__IEND:
  tcall dump-ctx
  stash rA sIl rB sIh rC sHl rE sHh
  # sIl - bit-depth
  # sIh - color type
  # sJl - compression
  # sJh - filter
  # sKl - interlace

  # rA - bit-depth
  # rB - color type
  # rC - width
  # rE - height
  
  # Perform preparatory transforms to stage the data for export to an externally provided buffer
  # compute scanline length (in bytes), adjust binary formatting as needed (reverse anything that's big-endian), and apply the inverse filters.
  #
  #   sLl:  bytes per scanline
  #   rE:   image size (in bytes) (must match/reproduce the byte count after decompression)
  #
  # In principle, de-interlacing should also be done at this stage (presumably by rewriting the entire image into a higher portion of the buffer)
  #   BUT:  I dont endorse image interlacing, it doesn't meaningfully contribute to the main use-case for TACTYK (but it is inefficient and artificially increase the amount of code needed),
  #         and it can be easilly handled ahead of distribution by re-encoding - so this feature is to be at a low priority and if/when implemented, to be deferred to a separate module.
  
  # greyscale
  if rB == 0
    if rA == 16
      shift-left rC 1
      inc rC
      stash sLl rC
      mul rE rC
      
      # lwcall PNG__PROCESS.dump
      # lwcall PNG__PROCESS.arrangebytes.word
      stash rA sIl
    
    if rA <= 8
      assign rD 8
      div rD rA
      # mul rC 8
      div rC rD
      inc rC
      stash sLl rC
      mul rE rC
    lwcall PNG__PROCESS.filter
    goto PNG__IEND.epilogue
  
  # grayscale with alpha
  if rB == 4
    if rA == 16
      shift-left rC 2
      shift-left rA 1
    if rA == 8
      shift-left rC 1
      shift-left rA 1
    inc rC
    stash sLl rC
    mul rE rC
    
    # lwcall PNG__PROCESS.dump
    # lwcall PNG__PROCESS.arrangebytes.word
    stash sIl rA
    lwcall PNG__PROCESS.filter
    goto PNG__IEND.epilogue
  
  # truecolor
  if rB == 2
    mul rA 3
    stash sIl rA
    mul rC rA
    shift-right rC 3
    inc rC
    stash sLl rC
    mul rE rC
    lwcall PNG__PROCESS.filter
    goto PNG__IEND.epilogue
  
  # indexed color  
  if rB == 3
    assign rD 8
    div rD rA
    # mul rC 8
    div rC rD
    inc rC
    stash sLl rC
    mul rE rC
    # lwcall PNG__PROCESS.dump
    # lwcall PNG__PROCESS.arrangebytes
    lwcall PNG__PROCESS.filter
    goto PNG__IEND.epilogue
  
  # truecolor with alpha
  if rB == 6
    if rA == 16
      shift-left rC 3
      shift-left rA 2
    if rA == 8
      tcall print-newline
      tcall print-newline
      tcall print-newline
      tcall print-newline
      shift-left rC 2
      shift-left rA 2
    inc rC
    stash sLl rC
    mul rE rC
    tcall dump-ctx
    
    # lwcall PNG__PROCESS.dump
    # lwcall PNG__PROCESS.arrangebytes.word
    stash sIl rA
    lwcall PNG__PROCESS.filter
    goto PNG__IEND.epilogue
    
  
  assign xA 'todo:ColorType
  tcall print-text-xa
  tcall print-space
  tcall print-int-b
  tcall print-newline
  tcall dump-ctx
  exit

  # compute bytes/words per row
  PNG__IEND.epilogue:
  assign rA 1
  lwreturn

PNG__PROCESS.dump:
  assign rF 0
  assign xA '0
  PNG__PROCESS.dump.lp:
  if rF < rE
    load byte rA addr1 rF
    if rA < 10
      tcall print-text-xa
    if rA < 100
      tcall print-text-xa
    tcall print-int-a
    tcall print-space
    inc rF
    goto PNG__PROCESS.dump.lp
  lwreturn


# convert table entriesfrom big-endian to little endian.
#   ALSO:  Some research may be needed to determine if this is the correct thing to do (particularly with indexed color images),
#          as this is reacting to an observed byte order issue which the specification seemed a bit unclear about.
PNG__PROCESS.arrangebytes:
  assign rF 0
  PNG__PROCESS.arrangebytes.row:
  if rF < rE
    assign rD 1
    assign rA rD
    add rA rF
    PNG__PROCESS.arrangebytes.fragment:
    if rD < rC
      load dword rB addr1 rA
      reverse-bytes dword rB
      store dword addr1 rA rB
      add rA 4
      add rD 4
      goto PNG__PROCESS.arrangebytes.fragment
    add rF rC
    goto PNG__PROCESS.arrangebytes.row
  lwreturn

PNG__PROCESS.arrangebytes.word:
  assign rF 0
  PNG__PROCESS.arrangebytes.word.row:
  if rF < rE
    assign rD 1
    assign rA rD
    add rA rF
    PNG__PROCESS.arrangebytes.word.fragment:
    if rD < rC
      load word rB addr1 rA
      reverse-bytes word rB
      store word addr1 rA rB
      add rA 2
      add rD 2
      goto PNG__PROCESS.arrangebytes.word.fragment
    add rF rC
    goto PNG__PROCESS.arrangebytes.word.row
  lwreturn

PNG__PROCESS.filter:
  assign rF 0
  assign rA 0
  assign rB 0
  
  stash rD sIl
  shift-right rD 3
  if rD <= 0
    assign rD 1
  stash sDh rD
  stash sBh rB
  
  # logically split the image into byte slices (one for each pixel byte)
  PNG__PROCESS.filter.slice:
  stash rB sBh rD sDh
  if rB < rD
    assign rF rB
    assign rA rB
    inc rB
    stash sBh rB
    
    # iterate each row within the slice
    PNG__PROCESS.filter.row:
    stash rC sLl rD sDh rB sBh
    add rA rC
    
    if rF < rE
      # recover the offset to the first byte in the row and obtain the filter identifier
      negate rB
      inc rB
      add rB rF
      load byte rB addr1 rB
      inc rF
      
      # null filter - raw values are taken as-decompressed, so skip to the next row.
      if rB == 0
        stash rC sLl
        PNG__PROCESS.filter.degenerate_up:
        add rF rC
        dec rF
        goto PNG__PROCESS.filter.row
      
      if rB == 1
        PNG__PROCESS.filter.degenerate_paeth:
        load byte rB addr1 rF
        assign rC 0
        PNG__PROCESS.filter.sub:
        if rF < rA
          add rB rC
          assign rC rB
          store byte addr1 rF rB
          add rF rD
          load byte rB addr1 rF
          goto PNG__PROCESS.filter.sub
        goto PNG__PROCESS.filter.row
      
      if rB == 2
        load byte rB addr1 rF
        assign rC 0
        
        # Do any PNG images have up filter set on the first row?
        # if on the first row, switch to the "none" filter
        stash rC sLl
        if rC >= rF PNG__PROCESS.filter.degenerate_up
        
        PNG__PROCESS.filter.up:
        if rF < rA
          
          stash rC sLl
          negate rC
          add rC rF
          load byte rC addr1 rC
          add rB rC
          store byte addr1 rF rB
          add rF rD
          load byte rB addr1 rF
          goto PNG__PROCESS.filter.up
        goto PNG__PROCESS.filter.row
      
      if rB == 3
        stash rC sLl
        if rC >= rF PNG__PROCESS.filter.degenerate_average
        assign rC 0
        load byte rB addr1 rF
        PNG__PROCESS.filter.average:
        if rF < rA
          stash rD sLl
          negate rD
          add rD rF
          load byte rD addr1 rD
          
          add rC rD
          shift-right rC 1
          add rB rC
          and rB 255
          assign rC rB
          store byte addr1 rF rB
          stash rD sDh
          add rF rD
          load byte rB addr1 rF
          goto PNG__PROCESS.filter.average
        goto PNG__PROCESS.filter.row
        
        PNG__PROCESS.filter.degenerate_average:
          load byte rB addr1 rF
          assign rC 0
          PNG__PROCESS.filter.degenerate_average.lp:
          if rF < rA
            add rB rC
            assign rC rB
            shift-right rC 1
            store byte addr1 rF rB
            add rF rD
            load byte rB addr1 rF
            goto PNG__PROCESS.filter.degenerate_average.lp
          goto PNG__PROCESS.filter.row
      
      if rB == 4
        stash sE rE
        
        assign rC 0
        assign rE 0
        
        # Do any PNG images have paeth filter set on the first row?
        # if on the first row, switch to the "sub" filter (which should be the same as paeth with two parameters locked to zero)
        stash rD sLl
        if rD >= rF PNG__PROCESS.filter.degenerate_paeth
        
        PNG__PROCESS.filter.paeth:
        
        stash rD sLl
        negate rD
        add rD rF
        load byte rD addr1 rD
        
        if rF < rA
          
          stash sAh rA sFh rF
          
          # Paeth predictor
          #   The inputs are staged on the preceding iteration
          #   The result will be placed on register rC
          assign rB rC
          add rB rD
          sub rB rE
          
          assign rA rB
          sub rA rC
          abs rA

          assign rF rB
          sub rF rD
          abs rF
          
          if rF < rA
            assign rA rF
            assign rC rD
          
          assign rF rB
          sub rF rE
          abs rF
          
          if rF < rA
            assign rC rE
          
          stash rA sAh rF sFh
          
          load byte rB addr1 rF
          add rB rC
          and rB 255
          store byte addr1 rF rB
          assign rC rB
          assign rE rD
          stash rD sDh
          add rF rD
          goto PNG__PROCESS.filter.paeth
        stash rE sE
        load byte rB addr1 rF
        goto PNG__PROCESS.filter.row
      
      # only the average filter remains [implemented, but thus far untested]
      assign xA 'todo:filter
      tcall print-text-xa
      tcall print-space
      tcall print-int-b
      tcall print-newline
      tcall dump-ctx
      exit
    
    goto PNG__PROCESS.filter.slice
  lwreturn

PNG__tRNS:
  bind addr4 m_png_palette
  assign rF rE
  add rE rD
  assign rD 3
  PNG__tRNS.scan:
  if rF >= rE PNG__READ.next    
    load byte rA addr2 rF
    inc rF
    store byte addr4 rD 255
    add rD 4
  goto PNG__PLTE.scan

PNG__IDAT:
  load byte rA addr2 rE
  inc rE
  
  # check compression method
  if rA ~& h.08
    assign xa 'unkCompMethod
    tcall print-text-xa
    tcall print-space
    tcall print-int-a
    tcall print-newline
    assign rA 0
    lwreturn
  
  # check window size
  shift-right rA 4
  add rA 8
  assign rB 1
  shift-left rB rA  
  if rB > 32768
    assign xa 'WindowTooBig
    tcall print-text-xa
    tcall print-space
    tcall print-int-b
    tcall print-newline
    assign rA 0
    lwreturn
  
  # dict flag
  load byte rA addr2 rE
  inc rE
  if rA & h.20
    assign xa 'dict-flag-set
    tcall print-text-xa
    tcall print-space
    tcall print-int-a
    tcall print-newline
    assign rA 0
    lwreturn
  
  stash swap rF sBl
  lwcall DEFLATE__UNCOMPRESS_RAW
  
  PNG__IDAT.epilogue:
  
  bind addr4 m_png_control
  assign rA rF
  goto PNG__READ.next


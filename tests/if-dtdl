# TEST:  if
#
# compare data-register to data-register
#
# Virtual-ISA: tactyk_core
#
# Templates:  
#   if data-comparator-data-branch  (DTDL)

PROGRAM
  
  struct cmptest
    8 vA
    8 vB
  
  data dat cmptest 1024
    h.8000000000000000 -1
    -4294967296 -1
    -65536 -1
    -256 -1
    -8 -1
    -2 -1
    -1 -1
    0 -1
    1 -1
    2 -1
    3 -1
    8 -1
    256 -1
    65536 -1
    4294967296 -1
    h.7fffffffffffffff -1
    
    h.8000000000000000 0
    -4294967296 0
    -65536 0
    -256 0
    -8 0
    -2 0
    -1 0
    0 0
    1 0
    2 0
    3 0
    8 0
    256 0
    65536 0
    4294967296 0
    h.7fffffffffffffff 0

    h.8000000000000000 1
    -4294967296 1
    -65536 1
    -256 1
    -8 1
    -2 1
    -1 1
    0 1
    1 1
    2 1
    3 1
    8 1
    256 1
    65536 1
    4294967296 1
    h.7fffffffffffffff 1
    
    h.8000000000000000 2
    -4294967296 2
    -65536 2
    -256 2
    -8 2
    -2 2
    -1 2
    0 2
    1 2
    2 2
    3 2
    8 2
    256 2
    65536 2
    4294967296 2
    h.7fffffffffffffff 2
  
  INIT:
    bind addr1 dat
    exit
  
  LT_TESTS:
    assign d 0
    LT_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    load qword b addr1 cmptest.vB
    if a < b LT_TRUE
    LT_FALSE:
    shift-left f 1
    goto LT_PROCEED
    LT_TRUE:
    shift-left f 1
    add f 1
    LT_PROCEED:
    inc d
    if d >= 64 DONE
    goto LT_TEST
  
  LE_TESTS:
    assign d 0
    LE_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    load qword b addr1 cmptest.vB
    if a <= b LE_TRUE
    LE_FALSE:
    shift-left f 1
    goto LE_PROCEED
    LE_TRUE:
    shift-left f 1
    add f 1
    LE_PROCEED:
    inc d
    if d >= 64 DONE
    goto LE_TEST
  
  EQ_TESTS:
    assign d 0
    EQ_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    load qword b addr1 cmptest.vB
    if a == b EQ_TRUE
    EQ_FALSE:
    shift-left f 1
    goto EQ_PROCEED
    EQ_TRUE:
    shift-left f 1
    add f 1
    EQ_PROCEED:
    inc d
    if d >= 64 DONE
    goto EQ_TEST

  NEQ_TESTS:
    assign d 0
    NEQ_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    load qword b addr1 cmptest.vB
    if a != b NEQ_TRUE
    NEQ_FALSE:
    shift-left f 1
    goto NEQ_PROCEED
    NEQ_TRUE:
    shift-left f 1
    add f 1
    NEQ_PROCEED:
    inc d
    if d >= 64 DONE
    goto NEQ_TEST
  
  GE_TESTS:
    assign d 0
    GE_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    load qword b addr1 cmptest.vB
    if a >= b GE_TRUE
    GE_FALSE:
    shift-left f 1
    goto GE_PROCEED
    GE_TRUE:
    shift-left f 1
    add f 1
    GE_PROCEED:
    inc d
    if d >= 64 DONE
    goto GE_TEST
  
  GT_TESTS:
    assign d 0
    GT_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    load qword b addr1 cmptest.vB
    if a > b GT_TRUE
    GT_FALSE:
    shift-left f 1
    goto GT_PROCEED
    GT_TRUE:
    shift-left f 1
    add f 1
    GT_PROCEED:
    inc d
    if d >= 64 DONE
    goto GT_TEST
  
  # clean up all registers but the one containing the test result
  DONE:
    assign a 0
    assign b 0
    assign c 0
    assign d 0
    assign e 0
    assign addr1.offset 0
    exit


EXEC INIT
TEST
  addr1 dat 0

EXEC LT_TESTS
TEST
  rF b.1111110000000000_1111111000000000_1111111100000000_1111111110000000

EXEC LE_TESTS
TEST
  rF b.1111111000000000_1111111100000000_1111111110000000_1111111111000000

EXEC EQ_TESTS
TEST
  rF b.0000001000000000_0000000100000000_0000000010000000_0000000001000000

EXEC NEQ_TESTS
TEST
  rF b.1111110111111111_1111111011111111_1111111101111111_1111111110111111

EXEC GE_TESTS
TEST
  rF b.0000001111111111_0000000111111111_0000000011111111_0000000001111111

EXEC GT_TESTS
TEST
  rF b.0000000111111111_0000000011111111_0000000001111111_0000000000111111









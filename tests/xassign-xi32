# TEST:  xassign
#
# assign to int32 slot in xmm register
#
# Virtual-ISA: tactyk_core
# Templates:
#   xassign xmmx-I32-data (XI32D)
#   xassign xmmx-I32-const (XI32C)
#   xassign xmmx-I32-integer (XI32I)
#   xassign xmmx-I32-float (XI32F)
#   xassign xmmx-I32-fconst (XI32Cf)
#   xassign xmmx-I32-xmmx (XI32X)
#   xassign xmmx-I32-xmmx-F32 (XI32XF32)
#   xassign xmmx-I32-xmmx-F64 (XI32XF32)
#   xassign xmmx-I32-xmmx-I8 (XI32XI8)
#   xassign xmmx-I32-xmmx-I16 (XI32XI16)
#   xassign xmmx-I32-xmmx-I32 (XI32XI32)
#   xassign xmmx-I32-xmmx-I64 (XI32XI64)

PROGRAM
  
  const CN3300 -3300
  const CN330  -330
  const CN33   -33
  const C33     33
  const C330    330
  const C3300   3300
  const CfN5555.0  -5555.0
  const CfN555.5   -555.5
  const CfN55.55   -55.55
  const Cf55.55     55.55
  const Cf555.5     555.5
  const Cf5555.0    5555.0
  
  # general reset function
  #   This uses int64 value 1.0 as default to verify that xmm register content is cleared by instructions which implicitly should reset it.
  #    (mainly when using an untyped write)
  RESET:
    spread rA 0 0 0 0 0 0
    xassign xA int32 0 1
    xassign xA int32 1 2
    xassign xA int32 2 3
    xassign xA int32 3 4
    xassign xB xA
    xassign xC xA
    xassign xD xA
    xassign xE xA
    xassign xF xA
    xassign xG xA
    xassign xH xA
    xassign xI xA
    xassign xJ xA
    xassign xK xA
    xassign xL xA
    xassign xM xA
    xassign xN xA
    lwreturn
  
  XASSIGN_prepare_basic:
    lwcall RESET
    exit
  
  XASSIGN_data:
    spread rA -1100 -110 -11 11 110 1100
    xassign xA int32 0 rA
    xassign xB int32 1 rB
    xassign xC int32 2 rC
    xassign xD int32 3 rD
    xassign xE int32 4 rE
    xassign xF int32 5 rF
    exit
  
  XASSIGN_int:
    xassign xG int32 0 -2200
    xassign xH int32 1 -220
    xassign xI int32 2 -22
    xassign xJ int32 3  22
    xassign xK int32 4  220
    xassign xL int32 5  2200
    exit
  
  XASSIGN_const:
    xassign xM int32 0 CN3300
    xassign xN int32 5 CN330
    xassign xA int32 10 CN33
    xassign xB int32 15 C33
    xassign xC int32 20 C330
    xassign xD int32 25 C3300
    exit
  
  XASSIGN_float:
    xassign xE int32 0 -4444.0
    xassign xF int32 3 -444.4
    xassign xG int32 6 -44.44
    xassign xH int32 9  44.44
    xassign xI int32 12  444.4
    xassign xJ int32 15  4444.0
    exit

  XASSIGN_fconst:
    xassign xK int32 0 CfN5555.0
    xassign xL int32 1 CfN555.5
    xassign xM int32 2 CfN55.55
    xassign xN int32 3 Cf55.55
    xassign xA int32 4 Cf555.5
    xassign xB int32 5 Cf5555.0
    exit

  XASSIGN_prepare_xmmx:
    lwcall RESET
    assign xA 4444.5555
    assign xB 5555.6666
    assign xC 6666.7777
    assign xD 7777.8888
    exit

  XASSIGN_xmmx:
    # write to upper bytes just to verify that untyped transfer captures it (and is not simply zeroing the upper bytes).
    xassign xE int32 0 xA
    xassign xE int32 1 xB
    xassign xE int32 2 xC
    xassign xE int32 3 xD
    xassign xE int32 4 xD
    xassign xE int32 5 xC
    xassign xE int32 6 xB
    xassign xE int32 7 xA
    exit
  
  XASSIGN_prepare_xf32:
    lwcall RESET
    xassign xA float32 0 121.515
    xassign xA float32 1 232.515
    xassign xA float32 2 343.515
    xassign xA float32 3 454.515
    exit
  
  XASSIGN_xf32:
    xassign xB int32 3 xA float32 0
    xassign xB int32 2 xA float32 1
    xassign xB int32 1 xA float32 2
    xassign xB int32 0 xA float32 3
    xassign xB int32 4 xA float32 0
    xassign xB int32 5 xA float32 1
    xassign xB int32 6 xA float32 2
    xassign xB int32 7 xA float32 3
    xassign xB int32 8 xN float32 4
    xassign xB int32 9 xN float32 6
    xassign xB int32 10 xN float32 5
    xassign xB int32 11 xN float32 7
    xassign xE int32 0 xN float32 4
    xassign xE int32 1 xN float32 5
    xassign xE int32 2 xN float32 6
    xassign xE int32 3 xN float32 7
    exit

  XASSIGN_prepare_xf64:
    lwcall RESET
    xassign xA float64 0 565.51515
    xassign xA float64 1 676.51515
    exit

  XASSIGN_xf64:
    xassign xB int32 0 xA float64 0
    xassign xC int32 0 xA float64 1
    xassign xD int32 0 xN float64 2
    xassign xE int32 1 xN float64 3
    xassign xF int32 1 xM float64 4
    xassign xG int32 1 xM float64 5
    xassign xH int32 2 xL float64 6
    xassign xI int32 2 xL float64 7
    xassign xJ int32 2 xK float64 8
    xassign xK int32 3 xK float64 9
    xassign xL int32 3 xJ float64 10
    xassign xM int32 3 xJ float64 11
    xassign xN int32 0 xI float64 12
    exit

  XASSIGN_prepare_i8:
    lwcall RESET
    xassign xA int8 0 11
    xassign xA int8 1 22
    xassign xA int8 2 33
    xassign xA int8 3 44
    xassign xA int8 4 55
    xassign xA int8 5 66
    xassign xA int8 6 77
    xassign xA int8 7 88
    xassign xA int8 8 99
    xassign xA int8 9 110
    xassign xA int8 10 121
    xassign xA int8 11 132
    xassign xA int8 12 143
    xassign xA int8 13 154
    xassign xA int8 14 165
    xassign xA int8 15 176
    exit
  
  XASSIGN_i8:
    xassign xB int32 0 xA int8 0
    xassign xC int32 0 xA int8 1
    xassign xD int32 0 xA int8 2
    xassign xE int32 1 xA int8 3
    xassign xF int32 1 xN int8 20
    xassign xG int32 1 xM int8 37
    xassign xH int32 2 xK int8 70
    xassign xI int32 2 xG int8 135
    xassign xJ int32 2 xC int8 200
    xassign xK int32 3 xA int8 9
    xassign xL int32 3 xA int8 10
    xassign xM int32 3 xA int8 11
    xassign xN int32 0 xA int8 12
    exit
  
  XASSIGN_prepare_i16:
    lwcall RESET
    xassign xA int16 0 1111
    xassign xA int16 1 2222
    xassign xA int16 2 3333
    xassign xA int16 3 4444
    xassign xA int16 4 5555
    xassign xA int16 5 6666
    xassign xA int16 6 7777
    xassign xA int16 7 8888
    exit

  XASSIGN_i16:
    xassign xB int32 0 xA int16 0
    xassign xC int32 0 xA int16 1
    xassign xD int32 0 xA int16 2
    xassign xE int32 1 xA int16 3
    xassign xF int32 1 xN int16 12
    xassign xG int32 1 xN int16 13
    xassign xH int32 2 xN int16 14
    xassign xI int32 2 xN int16 15
    xassign xJ int32 2 xM int16 16
    xassign xK int32 3 xM int16 17
    xassign xL int32 3 xM int16 18
    xassign xM int32 3 xM int16 19
    xassign xN int32 0 xA int16 4
    exit

  XASSIGN_prepare_i32:
    lwcall RESET
    xassign xA int32 0 11111111
    xassign xA int32 1 22222222
    xassign xA int32 2 33333333
    xassign xA int32 3 44444444
    exit

  XASSIGN_i32:
    xassign xB int32 0 xA int32 0
    xassign xC int32 0 xA int32 1
    xassign xD int32 0 xA int32 2
    xassign xE int32 1 xA int32 3
    xassign xF int32 1 xN int32 4
    xassign xG int32 1 xN int32 5
    xassign xH int32 2 xN int32 6
    xassign xI int32 2 xN int32 7
    xassign xJ int32 2 xM int32 8
    xassign xK int32 3 xM int32 9
    xassign xL int32 3 xM int32 10
    xassign xM int32 3 xM int32 11
    xassign xN int32 0 xL int32 12
    exit

  XASSIGN_prepare_i64:
    lwcall RESET
    xassign xA int64 0 1111111111111111
    xassign xA int64 1 2222222222222222
    exit

  XASSIGN_i64:
    xassign xB int32 0 xA int64 0
    xassign xC int32 0 xA int64 1
    xassign xD int32 0 xN int64 2
    xassign xE int32 1 xN int64 3
    xassign xF int32 1 xM int64 4
    xassign xG int32 1 xM int64 5
    xassign xH int32 2 xL int64 6
    xassign xI int32 2 xL int64 7
    xassign xJ int32 2 xK int64 8
    xassign xK int32 3 xK int64 9
    xassign xL int32 3 xJ int64 10
    xassign xM int32 3 xJ int64 11
    xassign xN int32 0 xI int64 12
    exit

XMM-DISPLAYMODE int32
EXEC XASSIGN_prepare_basic
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xA int32 1 2 3 4
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 20

EXEC XASSIGN_data
TEST
  rA -1100
  rB -110
  rC -11
  rD 11
  rE 110
  rF 1100
  xA int32 -1100 2 3 4
  xB int32 1 -110 3 4
  xC int32 1 2 -11 4
  xD int32 1 2 3 11
  xF int32 110 2 3 4
  xG int32 1 1100 3 4

EXEC XASSIGN_prepare_basic
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xA int32 1 2 3 4
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 20

EXEC XASSIGN_int
TEST
  xG int32 -2200 2 3 4
  xH int32 1 -220 3 4
  xI int32 1 2 -22 4
  xJ int32 1 2 3 22
  xL int32 220 2 3 4
  xM int32 1 2200 3 4

EXEC XASSIGN_prepare_basic
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xA int32 1 2 3 4
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 20

EXEC XASSIGN_const
TEST
  xM int32 -3300 2 3 4
  xA int32 1 -330 3 4
  xC int32 1 2 -33 4
  xE int32 1 2 3 33
  xH int32 330 2 3 4
  xJ int32 1 3300 3 4

EXEC XASSIGN_float
TEST
  xE int32 -4444 2 3 33
  xF int32 1 2 3 -444
  xH int32 330 2 -44 4
  xJ int32 1 44 3 4
  xL int32 444 2 3 4
  xM int32 -3300 2 3 4444

EXEC XASSIGN_prepare_basic
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xA int32 1 2 3 4
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 20

EXEC XASSIGN_fconst
TEST
  xK int32 -5555 2 3 4
  xL int32 1 -555 3 4
  xM int32 1 2 -55 4
  xN int32 1 2 3 55
  xB int32 555 2 3 4
  xC int32 1 5555 3 4

EXEC XASSIGN_prepare_xmmx
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xA 4444.5555
  xB 5555.6666
  xC 6666.7777
  xD 7777.8888
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 58

EXEC XASSIGN_xmmx
TEST
  xE int32 4444 5555 6666 7777
  xF int32 7777 6666 5555 4444

EXEC XASSIGN_prepare_xf32
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 73
  xA float32 121.515 232.515 343.515 454.515

EXEC XASSIGN_xf32
TEST
  xB int32 454 343 232 121
  xC int32 121 232 343 454
  xD int32 121 343 232 454
  xE int32 121 232 343 454

EXEC XASSIGN_prepare_xf64
TEST
  rA 0
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 96
  xA float64 565.51515 676.51515

EXEC XASSIGN_xf64
TEST
  xB int32 565 2 3 4
  xC int32 676 2 3 4
  xD int32 565 2 3 4
  xE int32 1 676 3 4
  xF int32 1 565 3 4
  xG int32 1 676 3 4
  xH int32 1 2 565 4
  xI int32 1 2 676 4
  xJ int32 1 2 565 4
  xK int32 1 2 3 676
  xL int32 1 2 3 565
  xM int32 1 2 3 676
  xN int32 565 2 3 4

EXEC XASSIGN_prepare_i8
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 114
  xA int64 h.584d42372c21160b h.b0a59a8f84796e63

EXEC XASSIGN_i8
TEST
  xB int32 11 2 3 4
  xC int32 22 2 3 4
  xD int32 33 2 3 4
  xE int32 1 44 3 4
  xF int32 1 55 3 4
  xG int32 1 66 3 4
  xH int32 1 2 77 4
  xI int32 1 2 88 4
  xJ int32 1 2 99 4
  xK int32 1 2 3 110
  xL int32 1 2 3 121
  xM int32 1 2 3 132
  xN int32 143 2 3 4

EXEC XASSIGN_prepare_i16
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 146
  xA int64 h.115C0D0508AE0457 h.22B81E611A0A15B3

EXEC XASSIGN_i16
TEST
  xB int32 1111 2 3 4
  xC int32 2222 2 3 4
  xD int32 3333 2 3 4
  xE int32 1 4444 3 4
  xF int32 1 5555 3 4
  xG int32 1 6666 3 4
  xH int32 1 2 7777 4
  xI int32 1 2 8888 4
  xJ int32 1 2 1111 4
  xK int32 1 2 3 2222
  xL int32 1 2 3 3333
  xM int32 1 2 3 4444
  xN int32 5555 2 3 4
  
EXEC XASSIGN_prepare_i32
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 170
  xA int32 11111111 22222222 33333333 44444444

EXEC XASSIGN_i32
TEST
  xB int32 11111111 2 3 4
  xC int32 22222222 2 3 4
  xD int32 33333333 2 3 4
  xE int32 1 44444444 3 4
  xF int32 1 11111111 3 4
  xG int32 1 22222222 3 4
  xH int32 1 2 33333333 4
  xI int32 1 2 44444444 4
  xJ int32 1 2 11111111 4
  xK int32 1 2 3 22222222
  xL int32 1 2 3 33333333
  xM int32 1 2 3 44444444
  xN int32 11111111 2 3 4

EXEC XASSIGN_prepare_i64
TEST
  rA 0
  rB 0
  rC 0
  rD 0
  rE 0
  rF 0
  xB int32 1 2 3 4
  xC int32 1 2 3 4
  xD int32 1 2 3 4
  xE int32 1 2 3 4
  xF int32 1 2 3 4
  xG int32 1 2 3 4
  xH int32 1 2 3 4
  xI int32 1 2 3 4
  xJ int32 1 2 3 4
  xK int32 1 2 3 4
  xL int32 1 2 3 4
  xM int32 1 2 3 4
  xN int32 1 2 3 4
  lwcstack 0 190
  xA int64 1111111111111111 2222222222222222

EXEC XASSIGN_i64
TEST
  xB int32 h.b71571c7 2 3 4
  xC int32 h.6e2ae38e 2 3 4
  xD int32 h.b71571c7 2 3 4
  xE int32 1 h.6e2ae38e 3 4
  xF int32 1 h.b71571c7 3 4
  xG int32 1 h.6e2ae38e 3 4
  xH int32 1 2 h.b71571c7 4
  xI int32 1 2 h.6e2ae38e 4
  xJ int32 1 2 h.b71571c7 4
  xK int32 1 2 3 h.6e2ae38e
  xL int32 1 2 3 h.b71571c7
  xM int32 1 2 3 h.6e2ae38e
  xN int32 h.b71571c7 2 3 4

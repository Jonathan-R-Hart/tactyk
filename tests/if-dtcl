# TEST:  if
#
# compare data-register to constant
#
# Virtual-ISA: tactyk_core
#
# Templates:  
#   if data-comparator-const-branch  (DTCL)

PROGRAM
  
  struct cmptest
    8 vA
    8 vB
  
  data dat cmptest 1024
    h.8000000000000000 -1
    -4294967296 -1
    -65536 -1
    -256 -1
    -8 -1
    -2 -1
    -1 -1
    0 -1
    1 -1
    2 -1
    3 -1
    8 -1
    256 -1
    65536 -1
    4294967296 -1
    h.7fffffffffffffff -1
    
    h.8000000000000000 0
    -4294967296 0
    -65536 0
    -256 0
    -8 0
    -2 0
    -1 0
    0 0
    1 0
    2 0
    3 0
    8 0
    256 0
    65536 0
    4294967296 0
    h.7fffffffffffffff 0

    h.8000000000000000 1
    -4294967296 1
    -65536 1
    -256 1
    -8 1
    -2 1
    -1 1
    0 1
    1 1
    2 1
    3 1
    8 1
    256 1
    65536 1
    4294967296 1
    h.7fffffffffffffff 1
    
    h.8000000000000000 2
    -4294967296 2
    -65536 2
    -256 2
    -8 2
    -2 2
    -1 2
    0 2
    1 2
    2 2
    3 2
    8 2
    256 2
    65536 2
    4294967296 2
    h.7fffffffffffffff 2
  
  const CN1 -1
  const C0 0
  const C1 1
  const C2 2
  
  INIT:
    bind addr1 dat
    exit
  
  LT_TESTS:
    assign d 0
    LT_N1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a < CN1 LT_N1_TRUE
    LT_N1_FALSE:
    shift-left f 1
    goto LT_N1_PROCEED
    LT_N1_TRUE:
    shift-left f 1
    add f 1
    LT_N1_PROCEED:
    inc d
    if d >= 16 LT_0_TEST
    goto LT_N1_TEST
    LT_0_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a < C0 LT_0_TRUE
    LT_0_FALSE:
    shift-left f 1
    goto LT_0_PROCEED
    LT_0_TRUE:
    shift-left f 1
    add f 1
    LT_0_PROCEED:
    inc d
    if d >= 32 LT_1_TEST
    goto LT_0_TEST
    LT_1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a < C1 LT_1_TRUE
    LT_1_FALSE:
    shift-left f 1
    goto LT_1_PROCEED
    LT_1_TRUE:
    shift-left f 1
    add f 1
    LT_1_PROCEED:
    inc d
    if d >= 48 LT_2_TEST
    goto LT_1_TEST
    LT_2_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a < C2 LT_2_TRUE
    LT_2_FALSE:
    shift-left f 1
    goto LT_2_PROCEED
    LT_2_TRUE:
    shift-left f 1
    add f 1
    LT_2_PROCEED:
    inc d
    if d >= 64 DONE
    goto LT_2_TEST

  LE_TESTS:
    assign d 0
    LE_N1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a <= CN1 LE_N1_TRUE
    LE_N1_FALSE:
    shift-left f 1
    goto LE_N1_PROCEED
    LE_N1_TRUE:
    shift-left f 1
    add f 1
    LE_N1_PROCEED:
    inc d
    if d >= 16 LE_0_TEST
    goto LE_N1_TEST
    LE_0_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a <= C0 LE_0_TRUE
    LE_0_FALSE:
    shift-left f 1
    goto LE_0_PROCEED
    LE_0_TRUE:
    shift-left f 1
    add f 1
    LE_0_PROCEED:
    inc d
    if d >= 32 LE_1_TEST
    goto LE_0_TEST
    LE_1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a <= C1 LE_1_TRUE
    LE_1_FALSE:
    shift-left f 1
    goto LE_1_PROCEED
    LE_1_TRUE:
    shift-left f 1
    add f 1
    LE_1_PROCEED:
    inc d
    if d >= 48 LE_2_TEST
    goto LE_1_TEST
    LE_2_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a <= C2 LE_2_TRUE
    LE_2_FALSE:
    shift-left f 1
    goto LE_2_PROCEED
    LE_2_TRUE:
    shift-left f 1
    add f 1
    LE_2_PROCEED:
    inc d
    if d >= 64 DONE
    goto LE_2_TEST

  EQ_TESTS:
    assign d 0
    EQ_N1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a == CN1 EQ_N1_TRUE
    EQ_N1_FALSE:
    shift-left f 1
    goto EQ_N1_PROCEED
    EQ_N1_TRUE:
    shift-left f 1
    add f 1
    EQ_N1_PROCEED:
    inc d
    if d >= 16 EQ_0_TEST
    goto EQ_N1_TEST
    EQ_0_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a == C0 EQ_0_TRUE
    EQ_0_FALSE:
    shift-left f 1
    goto EQ_0_PROCEED
    EQ_0_TRUE:
    shift-left f 1
    add f 1
    EQ_0_PROCEED:
    inc d
    if d >= 32 EQ_1_TEST
    goto EQ_0_TEST
    EQ_1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a == C1 EQ_1_TRUE
    EQ_1_FALSE:
    shift-left f 1
    goto EQ_1_PROCEED
    EQ_1_TRUE:
    shift-left f 1
    add f 1
    EQ_1_PROCEED:
    inc d
    if d >= 48 EQ_2_TEST
    goto EQ_1_TEST
    EQ_2_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a == C2 EQ_2_TRUE
    EQ_2_FALSE:
    shift-left f 1
    goto EQ_2_PROCEED
    EQ_2_TRUE:
    shift-left f 1
    add f 1
    EQ_2_PROCEED:
    inc d
    if d >= 64 DONE
    goto EQ_2_TEST

  NEQ_TESTS:
    assign d 0
    NEQ_N1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a != CN1 NEQ_N1_TRUE
    NEQ_N1_FALSE:
    shift-left f 1
    goto NEQ_N1_PROCEED
    NEQ_N1_TRUE:
    shift-left f 1
    add f 1
    NEQ_N1_PROCEED:
    inc d
    if d >= 16 NEQ_0_TEST
    goto NEQ_N1_TEST
    NEQ_0_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a != C0 NEQ_0_TRUE
    NEQ_0_FALSE:
    shift-left f 1
    goto NEQ_0_PROCEED
    NEQ_0_TRUE:
    shift-left f 1
    add f 1
    NEQ_0_PROCEED:
    inc d
    if d >= 32 NEQ_1_TEST
    goto NEQ_0_TEST
    NEQ_1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a != C1 NEQ_1_TRUE
    NEQ_1_FALSE:
    shift-left f 1
    goto NEQ_1_PROCEED
    NEQ_1_TRUE:
    shift-left f 1
    add f 1
    NEQ_1_PROCEED:
    inc d
    if d >= 48 NEQ_2_TEST
    goto NEQ_1_TEST
    NEQ_2_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a != C2 NEQ_2_TRUE
    NEQ_2_FALSE:
    shift-left f 1
    goto NEQ_2_PROCEED
    NEQ_2_TRUE:
    shift-left f 1
    add f 1
    NEQ_2_PROCEED:
    inc d
    if d >= 64 DONE
    goto NEQ_2_TEST

  GE_TESTS:
    assign d 0
    GE_N1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a >= CN1 GE_N1_TRUE
    GE_N1_FALSE:
    shift-left f 1
    goto GE_N1_PROCEED
    GE_N1_TRUE:
    shift-left f 1
    add f 1
    GE_N1_PROCEED:
    inc d
    if d >= 16 GE_0_TEST
    goto GE_N1_TEST
    GE_0_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a >= C0 GE_0_TRUE
    GE_0_FALSE:
    shift-left f 1
    goto GE_0_PROCEED
    GE_0_TRUE:
    shift-left f 1
    add f 1
    GE_0_PROCEED:
    inc d
    if d >= 32 GE_1_TEST
    goto GE_0_TEST
    GE_1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a >= C1 GE_1_TRUE
    GE_1_FALSE:
    shift-left f 1
    goto GE_1_PROCEED
    GE_1_TRUE:
    shift-left f 1
    add f 1
    GE_1_PROCEED:
    inc d
    if d >= 48 GE_2_TEST
    goto GE_1_TEST
    GE_2_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a >= C2 GE_2_TRUE
    GE_2_FALSE:
    shift-left f 1
    goto GE_2_PROCEED
    GE_2_TRUE:
    shift-left f 1
    add f 1
    GE_2_PROCEED:
    inc d
    if d >= 64 DONE
    goto GE_2_TEST

  GT_TESTS:
    assign d 0
    GT_N1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a > CN1 GT_N1_TRUE
    GT_N1_FALSE:
    shift-left f 1
    goto GT_N1_PROCEED
    GT_N1_TRUE:
    shift-left f 1
    add f 1
    GT_N1_PROCEED:
    inc d
    if d >= 16 GT_0_TEST
    goto GT_N1_TEST
    GT_0_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a > C0 GT_0_TRUE
    GT_0_FALSE:
    shift-left f 1
    goto GT_0_PROCEED
    GT_0_TRUE:
    shift-left f 1
    add f 1
    GT_0_PROCEED:
    inc d
    if d >= 32 GT_1_TEST
    goto GT_0_TEST
    GT_1_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a > C1 GT_1_TRUE
    GT_1_FALSE:
    shift-left f 1
    goto GT_1_PROCEED
    GT_1_TRUE:
    shift-left f 1
    add f 1
    GT_1_PROCEED:
    inc d
    if d >= 48 GT_2_TEST
    goto GT_1_TEST
    GT_2_TEST:
    assign c d
    mul c cmptest_size
    assign addr1.offset c
    load qword a addr1 cmptest.vA
    if a > C2 GT_2_TRUE
    GT_2_FALSE:
    shift-left f 1
    goto GT_2_PROCEED
    GT_2_TRUE:
    shift-left f 1
    add f 1
    GT_2_PROCEED:
    inc d
    if d >= 64 DONE
    goto GT_2_TEST
  
  # clean up all registers but the one containing the test result
  DONE:
    assign a 0
    assign b 0
    assign c 0
    assign d 0
    assign e 0
    assign addr1.offset 0
    exit


EXEC INIT
TEST
  addr1 dat 0

EXEC LT_TESTS
TEST
  rF b.1111110000000000_1111111000000000_1111111100000000_1111111110000000

EXEC LE_TESTS
TEST
  rF b.1111111000000000_1111111100000000_1111111110000000_1111111111000000

EXEC EQ_TESTS
TEST
  rF b.0000001000000000_0000000100000000_0000000010000000_0000000001000000

EXEC NEQ_TESTS
TEST
  rF b.1111110111111111_1111111011111111_1111111101111111_1111111110111111

EXEC GE_TESTS
TEST
  rF b.0000001111111111_0000000111111111_0000000011111111_0000000001111111

EXEC GT_TESTS
TEST
  rF b.0000000111111111_0000000011111111_0000000001111111_0000000000111111









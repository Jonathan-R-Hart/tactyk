
instruction float-to-int--cast-mode
  operand
    select-operand
      case trunc truncate
        $CONV_FLAGS 0x00006000
      case round round-near
        $CONV_FLAGS 0x00000000
      case up round-up
        $CONV_FLAGS 0x00004000
      case down round-down
        $CONV_FLAGS 0x00002000
  code
    stmxcsr fs:[context.registers + rbtactyk.mxcsr + random_const_FS ]
    mov rTEMPA_32, fs:[context.registers + rbtactyk.mxcsr + random_const_FS ]
    and rTEMPA_32, 0xffff9fff
    or rTEMPA_32, $CONV_FLAGS
    mov fs:[context.registers + rbtactyk.mxcsr + random_const_FS ], rTEMPA_32
    ldmxcsr fs:[context.registers + rbtactyk.mxcsr + random_const_FS]
    jmp $NEXT_INSTRUCTION

instruction xassign
  $SSE_WORD X
  $DSW X
  $SSW X
  $DAUG 0
  $DIDX 0
  $SAUG 0
  $SIDX 0
  operand
    type xmmx data
    $DEST $VALUE
  opt-operand
    type simd-format-discriminator
    sub simd-format-pick
  opt-operand
    type sse-map
    $DAUG $SSE_REG
    $DIDX $SSE_INDEX
    $DSW $SSE_WORD
    $DRXT $SSE_REG_EXT
    $SSE_WORD X
  operand
    type xmmx data const fconst integer float
    $SRC $VALUE
    scramble rTEMPA $LD_A_IMMEDIATE
  opt-operand
    type simd-format-discriminator
    sub simd-format-pick
  opt-operand
    type sse-map
    $SAUG $SSE_REG
    $SIDX $SSE_INDEX
    $SSW $SSE_WORD
    $SRXT $SSE_REG_EXT
  select-template
    case XF32X
      sub sse-insps-arg--Szero
      code
        cvtsd2ss xTEMPA, $SRC
        insertps $DEST~$DAUG, xTEMPA, $INSPS_arg
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF32XF32
      sub sse-insps-arg--direct
      code
        insertps $DEST~$DAUG, $SRC~$SAUG, $INSPS_arg
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF32XF64
      sub sse-insps-arg--Szero
      code
        pextrq rTEMPA, $SRC~$SAUG, $SIDX
        movq xTEMPA, rTEMPA
        cvtsd2ss xTEMPA, xTEMPA
        insertps $DEST~$DAUG, xTEMPA, $INSPS_arg
        xor rTEMPA, rTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF32XI64 XF32XI32 XF32XI16 XF32XI8
      sub sse-insps-arg--Szero
      code
        pextr$SSW rTEMPA$SRXT,  $SRC~$SAUG, $SIDX
        cvtsi2ss xTEMPA, rTEMPA$SRXT
        insertps $DEST~$DAUG, xTEMPA, $INSPS_arg
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF32D
      sub sse-insps-arg--Szero
      code
        cvtsi2ss xTEMPA, $SRC
        insertps $DEST~$DAUG, xTEMPA, $INSPS_arg
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF32I XF32C
      sub sse-insps-arg--Szero
      code
        $LD_A_IMMEDIATE
        cvtsi2ss xTEMPA, rTEMPA_32
        insertps $DEST~$DAUG, xTEMPA, $INSPS_arg
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XF32F XF32Cf
      sub sse-insps-arg--Szero
      code
        $LD_A_IMMEDIATE
        movq xTEMPA, rTEMPA
        cvtsd2ss xTEMPA, xTEMPA
        insertps $DEST~$DAUG, xTEMPA, $INSPS_arg
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XF64X
      code
        movq rTEMPA, $SRC
        pinsrq $DEST~$DAUG, rTEMPA, $DIDX
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XF64XF32
      sub sse-insps-arg--Dzero
      sub sse-qword-put
      code
        insertps xTEMPA, $SRC~$SAUG, $INSPS_arg
        cvtss2sd xTEMPA, xTEMPA
        $QPUTOP $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF64XF64
      select $DIDX~$SIDX
        case 0~0
          code
            movsd $DEST~$DAUG, $SRC~$SAUG
            jmp $NEXT_INSTRUCTION
        case 1~0
          code
            movlhps $DEST~$DAUG, $SRC~$SAUG
            jmp $NEXT_INSTRUCTION
        case 0~1
          code
            movhlps $DEST~$DAUG, $SRC~$SAUG
            jmp $NEXT_INSTRUCTION
        case 1~1
          code
            movhlps xTEMPA, $SRC~$SAUG
            movlhps $DEST~$DAUG, xTEMPA
            pxor xTEMPA, xTEMPA
            jmp $NEXT_INSTRUCTION
    case XF64D
      sub sse-qword-put
      code
        cvtsi2sd xTEMPA, $SRC
        $QPUTOP $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XF64I XF64C
      sub sse-qword-put
      code
        $LD_A_IMMEDIATE
        cvtsi2sd xTEMPA, rTEMPA
        $QPUTOP $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XF64XI64 XF64XI32 XF64XI16 XF64XI8
      sub sse-qword-put
      code
        pextr$SSW rTEMPA$SRXT, $SRC~$SAUG, $SIDX
        cvtsi2sd xTEMPA, rTEMPA
        $QPUTOP $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XF64F XF64Cf
      sub sse-qword-put
      code
        $LD_A_IMMEDIATE
        movq xTEMPA, rTEMPA
        $QPUTOP $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    
    case XXF32
      sub sse-insps-arg--Dzero
      code
        insertps xTEMPA, $SRC~$SAUG, $INSPS_arg
        pxor $DEST~$DAUG, $DEST~$DAUG
        cvtss2sd $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XXF64
      sub sse-qword-get
      code
        $QGETOP xTEMPA, $SRC~$SAUG
        movq $DEST~$DAUG, xTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XXI64 XXI32 XXI16 XXI8
      sub sse-qword-put
      code
        pextr$SSW rTEMPA$SRXT, $SRC~$SAUG, $SIDX
        pxor $DEST, $DEST
        cvtsi2sd $DEST, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XX
      code
        movdqa $DEST, $SRC
        jmp $NEXT_INSTRUCTION
    case XD
      code
        pxor $DEST, $DEST
        cvtsi2sd $DEST, $SRC
        jmp $NEXT_INSTRUCTION
    case XI XC
      code
        $LD_A_IMMEDIATE
        pxor $DEST, $DEST
        cvtsi2sd $DEST, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XF XCf
      sub sse-qword-put
      code
        $LD_A_IMMEDIATE
        movq $DEST~$DAUG, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    
    case XI8X XI16X XI32X XI64X
      code
        cvtsd2si rTEMPA, $SRC~$SAUG
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XI8XI8 XI16XI8 XI32XI8 XI64XI8  XI8XI16 XI16XI16 XI32XI16 XI64XI16  XI8XI32 XI16XI32 XI32XI32 XI64XI32  XI8XI64 XI16XI64 XI32XI64 XI64XI64
      code
        pextr$SSW %[rTEMPA]$SRXT, $SRC~$SAUG, $SIDX
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XI8XF32 XI16XF32 XI32XF32 XI64XF32
      sub sse-insps-arg--Dzero
      code
        insertps xTEMPA, $SRC~$SAUG, $INSPS_arg
        cvtss2si rTEMPA, xTEMPA
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        xor rTEMPA, rTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XI8XF64 XI16XF64 XI32XF64 XI64XF64
      sub sse-qword-get
      code
        $QGETOP xTEMPA, $SRC~$SAUG
        cvtsd2si rTEMPA, xTEMPA
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        xor rTEMPA, rTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case XI8X XI16X XI32X XI64X
      code
        cvtsd2si rTEMPA, $SRC~$SAUG
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XI8D XI16D XI32D XI64D
      code
        pinsr$DSW $DEST~$DAUG, %[$SRC]$DRXT, $DIDX
        jmp $NEXT_INSTRUCTION
    case XI8C XI16C XI32C XI64C  XI8I XI16I XI32I XI64I
      code
        $LD_A_IMMEDIATE
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case XI8F XI16F XI32F XI64F XI8Cf XI16Cf XI32Cf XI64Cf
      sub sse-qword-put
      code
        $LD_A_IMMEDIATE
        movq xTEMPA, rTEMPA
        cvtsd2si rTEMPA, xTEMPA
        pinsr$DSW $DEST~$DAUG, rTEMPA$DRXT, $DIDX
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    
    case DXF32
      sub sse-insps-arg--Dzero
      code
        insertps xTEMPA, $SRC~$SAUG, $INSPS_arg
        cvtss2si $DEST, xTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case DXF64
      sub sse-qword-get
      code
        $QGETOP xTEMPA, $SRC~$SAUG
        cvtsd2si $DEST, xTEMPA
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case DXI8 DXI16 DXI32 DXI64
      code
        pextr$SSW %[$DEST]$SRXT, $SRC~$SAUG, $SIDX
        jmp $NEXT_INSTRUCTION
    case DD
      code 
        mov $DEST, $SRC
        jmp $NEXT_INSTRUCTION
    case DI DC DS
      code 
        $LD_A_IMMEDIATE
        mov $DEST, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case DX
      code
        cvtsd2si $DEST, $SRC
        jmp $NEXT_INSTRUCTION
    case DF DCf
      sub sse-qword-put
      code
        $LD_A_IMMEDIATE
        movq xTEMPA, rTEMPA
        cvtsd2si $DEST, xTEMPA
        pxor xTEMPA, xTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION

instruction pack
  operand
    type simd-format-discriminator
    sub simd-format-sse-params
    sub simd-format-pick
  operand
    type xmmx
    $DEST $VALUE
  operand
    type xmmx
    $SRC $VALUE
  select-template
    case F32XX
      code
        pxor $DEST, $DEST
      vcode $SIMD_ARG
        1 cvtsd2ss $DEST, $SRC~0
        2 cvtsd2ss xTEMPA, $SRC~1
        2 insertps $DEST, xTEMPA, 16
        3 cvtsd2ss xTEMPA, $SRC~2
        3 insertps $DEST, xTEMPA, 32
        4 cvtsd2ss xTEMPA, $SRC~3
        4 insertps $DEST, xTEMPA, 48
      code
        pxor xTEMPA, xTEMPA
        jmp $NEXT_INSTRUCTION
    case I32XX
      vcode $SIMD_ARG
        1 insertps xTEMPB, $SRC~0, 0
        2 insertps xTEMPB, $SRC~1, 16
        3 insertps xTEMPB, $SRC~2, 32
        4 insertps xTEMPB, $SRC~3, 48
      code
        movdqa $DEST, xTEMPB
        pxor xTEMPB, xTEMPB
        jmp $NEXT_INSTRUCTION

instruction unpack
  operand
    type simd-format-discriminator
    sub simd-format-sse-params
    sub simd-format-pick
  operand
    type xmmx
    $DEST $VALUE
  operand
    type xmmx
    $SRC $VALUE
  select-template
    case F32XX
      vcode $SIMD_ARG
        1 insertps xTEMPA, $SRC, 14
        1 pxor $DEST~0, $DEST~0
        1 cvtss2sd $DEST~0, xTEMPA
        2 insertps xTEMPA, $SRC, 78
        2 pxor $DEST~1, $DEST~1
        2 cvtss2sd $DEST~1, xTEMPA
        3 insertps xTEMPA, $SRC, 142
        3 pxor $DEST~2, $DEST~2
        3 cvtss2sd $DEST~2, xTEMPA
        4 insertps xTEMPA, $SRC, 206
        4 pxor $DEST~3, $DEST~3
        4 cvtss2sd $DEST~3, xTEMPA
      code
        pxor xTEMPA, xTEMPA
        pxor xTEMPB, xTEMPB
        jmp $NEXT_INSTRUCTION
    case I32XX
      vcode $SIMD_ARG
        1 insertps $DEST~0, $SRC, 14
        2 insertps $DEST~1, $SRC, 78
        3 insertps $DEST~2, $SRC, 142
        4 insertps $DEST~3, $SRC, 206
      code
        pxor xTEMPB, xTEMPB
        jmp $NEXT_INSTRUCTION

instruction transpose
  operand
    type xmmx
    $M $VALUE
  operand
    type simd-format-discriminator
    sub simd-format-pick
  operand
    select-operand
      case 4 4x4
        pick M4x4
  select-template
    case XF32M4x4 XI32M4x4
      code
        movdqa xTEMPA, $M~1
        movdqa xTEMPB, $M~3
        insertps $M~1, $M~0,    0b01000000
        insertps $M~0, xTEMPA,  0b00010000
        insertps $M~1, $M~2,    0b01100000
        insertps $M~2, xTEMPA,  0b10010000
        insertps $M~3, $M~0,    0b11000000
        insertps $M~0, xTEMPB,  0b00110000
        insertps $M~3, $M~2,    0b11100000
        insertps $M~2, xTEMPB,  0b10110000
        
        movdqa xTEMPA, $M~0
        insertps $M~0, $M~2,    0b00100000
        insertps $M~2, xTEMPA,  0b10000000
        insertps $M~3, $M~1,    0b11010000
        insertps $M~1, xTEMPB,  0b01110000
        pxor xTEMPA, xTEMPA
        pxor xTEMPB, xTEMPB
        jmp $NEXT_INSTRUCTION








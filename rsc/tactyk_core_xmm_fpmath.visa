
instruction square-root
  operand
    type xmmx
    $A $VALUE
  opt-operand
    type xmmx
    $B $VALUE
  select-template
    case X
      code
        sqrtsd $A, $A
    case XX
      code
        sqrtsd $A, $B

subroutine load-xmm-D
  sub tmp ra
  code
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp $OFFSET, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp $OFFSET, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    $MOV_LD $DEST__DATA_REG, [$ADDRESS_REGISTER+$OFFSET]
    $RESET_TEMP

subroutine load-xmm-S
  sub tmp a
  sub tmp c
  code
    $LD_OFFSET_IMMEDIATE
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp rTEMPC, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp rTEMPC, 0
    errorlt STATUS_ROGUE_POINTER
    lfence
    $MOV_LD $DEST__DATA_REG, [$ADDRESS_REGISTER+rTEMPC]
    $RESET_TEMP

subroutine load-xmm-D-conv
  sub tmp ra
  sub tmp xa
  code
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp $OFFSET, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp $OFFSET, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    $MOV xTEMPA, [$ADDRESS_REGISTER+$OFFSET]
    $CONVERT $DEST__DATA_REG, xTEMPA
    $RESET_TEMP

subroutine load-xmm-S-conv
  sub tmp a
  sub tmp c
  sub tmp xa
  code
    $LD_OFFSET_IMMEDIATE
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp rTEMPC, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp rTEMPC, 0
    errorlt STATUS_ROGUE_POINTER
    lfence
    $MOV xTEMPA, [$ADDRESS_REGISTER+rTEMPC]
    $CONVERT $DEST__DATA_REG, xTEMPA
    $RESET_TEMP

extend instruction load select-template
  case B128XAD  F64XAD F32XAD
    sub load-xmm-D
  case B128XAI B128XAC  F64XAI F64XAC  F32XAI F32XAC
    sub load-xmm-S
  case F64DAD
    $CONVERT cvttsd2si
    sub load-xmm-D-conv
  case F64DAI F64DAC
    $CONVERT cvttsd2si
    sub load-xmm-S-conv
  case F32DAD
    $CONVERT cvttss2si
    sub load-xmm-D-conv
  case F32DAI F32DAC
    $CONVERT cvttss2si
    sub load-xmm-S-conv

subroutine store-xmm-S
  sub tmp ra
  sub tmp rc
  code
    $LD_OFFSET_IMMEDIATE
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp rTEMPC, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp rTEMPC, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    $MOV [$ADDRESS_REGISTER+rTEMPC], $SRC
    $RESET_TEMP

subroutine store-xmm-S-const
  sub tmp ra
  sub tmp rc
  code
    $LD_OFFSET_IMMEDIATE
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp rTEMPC, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp rTEMPC, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    $LD_SRC_IMMEDIATE_INDIRECT
    $MOV [$ADDRESS_REGISTER+rTEMPC], rTEMPA
    $RESET_TEMP

subroutine store-xmm-D
  sub tmp ra
  code
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp $OFFSET, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp $OFFSET, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    $MOV [$ADDRESS_REGISTER+$OFFSET], $SRC
    $RESET_TEMP

subroutine store-xmm-D-const
  sub tmp ra
  code
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp $OFFSET, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp $OFFSET, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    $LD_SRC_IMMEDIATE_INDIRECT
    $MOV [$ADDRESS_REGISTER+rTEMPC], rTEMPA
    $RESET_TEMP

subroutine store-xmm-S-32
  sub tmp ra
  sub tmp rc
  sub tmp xb
  code
    $LD_OFFSET_IMMEDIATE
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp rTEMPC, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp rTEMPC, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    cvtsd2ss xTEMPB, $SRC
    $MOV [$ADDRESS_REGISTER+rTEMPC], xTEMPB
    $RESET_TEMP

subroutine store-xmm-D-32
  sub tmp ra
  sub tmp xb
  code
    mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
    sub rTEMPA_32, $BYTEBOUND
    cmp $OFFSET, rTEMPA
    errorge STATUS_ROGUE_POINTER
    cmp $OFFSET, 0
    errorlt STATUS_ROGUE_POINTER
    cmp $ADDRESS_REGISTER, 0
    erroreq STATUS_UNBOUND_MEMORY
    lfence
    cvtsd2ss xTEMPB, $SRC
    $MOV [$ADDRESS_REGISTER+$OFFSET], xTEMPB
    $RESET_TEMP

extend instruction store select-template
  case B128ADX F64ADX
    sub store-xmm-D
  case B128AIX B128ACX  F64AIX F64ACX
    sub store-xmm-S
  case F64ADF
    sub store-xmm-D-const
  case F32ADX
    sub store-xmm-D-32
  case F32AIX F32ACX
    sub store-xmm-S-32

extend instruction assign select-template
  case DX
    code
      cvttsd2si $A, $B
  case DF DCf
    sub tmp ra
    sub tmp xa
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPA, rTEMPA
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case XX
    code
      movq $A, $B
  case XD
    code
      cvtsi2sd $A, $B
  case XI XC
    sub tmp ra
    code
      $LD_B_IMMEDIATE_INDIRECT
      cvtsi2sd $A, rTEMPA
      $RESET_TEMP
  case XS
    sub tmp ra
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      $LD_B_HIGHBITS_IMMEDIATE_INDIRECT
      movq $A, rTEMPA
      pinsrq $A, rTEMPC, 3
      $RESET_TEMP
  case XF XCf
    sub tmp ra
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq $A, rTEMPA
      $RESET_TEMP

extend subroutine binary_instruction select-template
  case DX
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $A
      %[$INSTRUCTION]sd xTEMPA, $B
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case DF DCf
    sub tmp rc
    sub tmp xa
    sub tmp xb
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPB, rTEMPC
      cvtsi2sd xTEMPA, $A
      %[$INSTRUCTION]sd xTEMPA, xTEMPB
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case XX
    code
      %[$INSTRUCTION]sd $A, $B
  case XD
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $B
      %[$INSTRUCTION]sd $A, xTEMPA
      $RESET_TEMP
  case XI XC
    sub tmp rc
    sub tmp xa
    code
      $LD_B_IMMEDIATE_INDIRECT
      cvtsi2sd xTEMPA, rTEMPC
      %[$INSTRUCTION]sd $A, xTEMPA
      $RESET_TEMP
  case XCf XF
    sub tmp rc
    sub tmp xa
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPA, rTEMPC
      %[$INSTRUCTION]sd $A, xTEMPA
      $RESET_TEMP

extend instruction swap select-template
  case XD
    sub tmp xb
    code
      cvtsi2sd xTEMPB, $B
      cvttsd2si $B, $A
      movq $A, xTEMPB
      $RESET_TEMP
  case DX
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $A
      cvttsd2si $A, $B
      movq $B, xTEMPA
      $RESET_TEMP
  case XX
    sub tmp xa
    code
      movq xTEMPA, $A
      movq $A, $B
      movq $B, xTEMPA
      $RESET_TEMP

extend instruction mul select-template
  case DX
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $A
      mulsd xTEMPA, $B
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case DF DCf
    sub tmp xa
    sub tmp xb
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPB, rTEMPC
      cvtsi2sd xTEMPA, $A
      mulsd xTEMPA, xTEMPB
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case XX
    code
      mulsd $A, $B
  case XD
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $B
      mulsd $A, xTEMPA
      $RESET_TEMP
  case XI XC
    sub tmp xa
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      cvtsi2sd xTEMPA, rTEMPC
      mulsd $A, xTEMPA
      $RESET_TEMP
  case XCf XF
    sub tmp xa
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPA, rTEMPC
      mulsd $A, xTEMPA
      $RESET_TEMP

extend instruction div select-template
  case DXN
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $A
      divsd xTEMPA, $B
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case DFN DCfN
    sub tmp xa
    sub tmp xb
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPB, rTEMPC
      cvtsi2sd xTEMPA, $A
      divsd xTEMPA, xTEMPB
      cvttsd2si $A, xTEMPA
      $RESET_TEMP
  case XXN
    code
      divsd $A, $B
  case XDN
    sub tmp xa
    code
      cvtsi2sd xTEMPA, $B
      divsd $A, xTEMPA
      $RESET_TEMP
  case XIN XCN
    sub tmp xa
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      cvtsi2sd xTEMPA, rTEMPC
      divsd $A, xTEMPA
      $RESET_TEMP
  case XCfN XFN
    sub tmp xa
    sub tmp rc
    code
      $LD_B_IMMEDIATE_INDIRECT
      movq xTEMPA, rTEMPC
      divsd $A, xTEMPA
      $RESET_TEMP

# comparison with floats on xmmx registers
#  For packed floats, these all pass if any comparisons pass
#  These should work as expected for comparisons involving Individual floats
#   (for more fine-grained controls, you'll probably have to unpack and compare them individualls
#    It might be worthwhile to add a function which simply compares xmmx values and only extracts the
#    result)
# Comparisons of xmmx register with data register assumes that the xmmx register is a float and the data register
# is an integer
# Floating point comparisons wherein neither operand is stored on an xmmx register are unspported

extend subroutine test select-template
  case XTX
    sub tmp xa
    sub tmp ra
    code
      movsd xTEMPA, $A
      cmpsd xTEMPA, $B, $VPRED
      movq rTEMPA, xTEMPA
      cmp rTEMPA, 0
      jne .pass
  case DTX
    sub tmp xa
    sub tmp ra
    code
      cvtsi2sd xTEMPA, $A
      cmpsd xTEMPA, $B, $VPRED
      movq rTEMPA, xTEMPA
      cmp rTEMPA, 0
      jne .pass
  case FTX CfTX
    sub tmp xa
    sub tmp ra
    code
      $LD_IMMEDIATE_A_INDIRECT
      movq xTEMPA, rTEMPA
      cmpsd xTEMPA, $B, $VPRED
      movq rTEMPA, xTEMPA
      cmp rTEMPA, 0
      jne .pass
  case ITX CTX
    sub tmp xa
    sub tmp ra
    code
      $LD_IMMEDIATE_A_INDIRECT
      cvtsi2sd xTEMPA, rTEMPA
      cmpsd xTEMPA, $B, $VPRED
      movq rTEMPA, xTEMPA
      cmp rTEMPA, 0
      jne .pass
  case XTD
    sub tmp xa
    sub tmp ra
    code
      cvtsi2sd xTEMPA, $B
      cmpsd xTEMPA, $A, $VPREDCOMPLEMENT
      movq rTEMPA, xTEMPA
      cmp rTEMPA, 0
      jne .pass
  case XTF XTCf
    sub tmp xa
    sub tmp rc
    code
      $LD_IMMEDIATE_B
      movq xTEMPA, rTEMPC
      cmpsd xTEMPA, $A, $VPREDCOMPLEMENT
      movq rTEMPC, xTEMPA
      cmp rTEMPC, 0
      jne .pass
  case XTI XTC
    sub tmp xa
    sub tmp rc
    code
      $LD_IMMEDIATE_B_INDIRECT
      cvtsi2sd xTEMPA, rTEMPC
      cmpsd xTEMPA, $A, $VPREDCOMPLEMENT
      movq rTEMPC, xTEMPA
      cmp rTEMPC, 0
      jne .pass
  case DTF DTCf
    sub tmp xa
    sub tmp xb
    sub tmp rc
    code
      $LD_IMMEDIATE_B_INDIRECT
      cvtsi2sd xTEMPA, $A
      movq xTEMPB, rTEMPC
      movq rTEMPC, xTEMPA
      cmp rTEMPC, 0
      jne .pass
  case FTD CfTD
    sub tmp xa
    sub tmp xb
    sub tmp ra
    code
      $LD_IMMEDIATE_A_INDIRECT
      movq xTEMPA, rTEMPA
      movsd xTEMPB, $B
      movq rTEMPA, xTEMPA
      cmp rTEMPA, 0
      jne .pass

instruction transpose
  opt-operand
    select-operand
      case 32 i32 int32 f32 float32
        pick Fmt32
  operand
    type xmmx
    $M $VALUE
  sub tmp xa
  sub tmp xb
  select-template
    case Fmt32X X
      code
        movdqa xTEMPA, $M~1
        movdqa xTEMPB, $M~3
        insertps $M~1, $M~0,    0b01000000
        insertps $M~0, xTEMPA,  0b00010000
        insertps $M~1, $M~2,    0b01100000
        insertps $M~2, xTEMPA,  0b10010000
        insertps $M~3, $M~0,    0b11000000
        insertps $M~0, xTEMPB,  0b00110000
        insertps $M~3, $M~2,    0b11100000
        insertps $M~2, xTEMPB,  0b10110000
        
        movdqa xTEMPA, $M~0
        insertps $M~0, $M~2,    0b00100000
        insertps $M~2, xTEMPA,  0b10000000
        insertps $M~3, $M~1,    0b11010000
        insertps $M~1, xTEMPB,  0b01110000
        $RESET_TEMP

instruction dot
  opt-operand
    select-operand
      case f32 f32.4
        pick F32.4
  operand
    type xmmx
    $DEST $VALUE
  opt-operand
    select-operand
      case 0
       $INS_ARG 0b00000000
      case 1
        $INS_ARG 0b00010000
      case 2
        $INS_ARG 0b00100000
      case 3
        $INS_ARG 0b00110000
    pick I
  operand
    type xmmx
    $A $VALUE
  operand
    type xmmx
    $B $VALUE
  sub tmp xa
  select-template
    case F32.4XXX XXX
      code
        movdqa xTEMPA, $A
        dpps xTEMPA, $B, 0xf1
        cvtss2sd $DEST, xTEMPA
        $RESET_TEMP
    case F32.4XIXX XIXX
      code
        movdqa xTEMPA, $A
        dpps xTEMPA, $B, 0xf1
        insertps $DEST, xTEMPA, $INS_ARG
        $RESET_TEMP

instruction cross
  opt-operand
    select-operand
      case f32 f32.3
        pick F32
  operand
    type xmmx
    $DEST $VALUE
  operand
    type xmmx
    $A $VALUE
  operand
    type xmmx
    $B $VALUE
  sub tmp xa
  sub tmp xb
  select-template
    case XXX F32XXX
      code
        pshufd xTEMPA, $A, 0b11010010
        pshufd xTEMPB, $B, 0b11001001
        mulps  xTEMPB, xTEMPA
        pshufd xTEMPA, $B, 0b11010010
        pshufd $DEST,  $A, 0b11001001
        mulps $DEST, xTEMPA
        subps $DEST, xTEMPB
        $RESET_TEMP

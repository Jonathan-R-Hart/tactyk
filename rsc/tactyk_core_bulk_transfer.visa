typespec block-quantity
  select-operand
    case 1
      $QTY 1
      $ELEMENT_BOUND_MODIFIER_64 7
      $ELEMENT_BOUND_MODIFIER_128 15
      pick Bqs
    case 2
      $QTY 2
      $ELEMENT_BOUND_MODIFIER_64 15
      $ELEMENT_BOUND_MODIFIER_128 31
      pick Bqs
    case 3
      $QTY 3
      $ELEMENT_BOUND_MODIFIER_64 23
      $ELEMENT_BOUND_MODIFIER_128 47
      pick Bqs
    case 4
      $QTY 4
      $ELEMENT_BOUND_MODIFIER_64 31
      $ELEMENT_BOUND_MODIFIER_128 63
      pick Bqs
    case 5
      $QTY 5
      $ELEMENT_BOUND_MODIFIER_64 39
      $ELEMENT_BOUND_MODIFIER_128 79
      pick Bqs
    case 6
      $QTY 6
      $ELEMENT_BOUND_MODIFIER_64 47
      $ELEMENT_BOUND_MODIFIER_128 95
      pick Bqs
    case 7
      $QTY 7
      $ELEMENT_BOUND_MODIFIER_64 55
      $ELEMENT_BOUND_MODIFIER_128 111
      pick Bql
    case 8
      $QTY 8
      $ELEMENT_BOUND_MODIFIER_64 63
      $ELEMENT_BOUND_MODIFIER_128 127
      pick Bql
    case 9
      $QTY 9
      $ELEMENT_BOUND_MODIFIER_64 71
      $ELEMENT_BOUND_MODIFIER_128 143
      pick Bql
    case 10
      $QTY 10
      $ELEMENT_BOUND_MODIFIER_64 79
      $ELEMENT_BOUND_MODIFIER_128 159
      pick Bql
    case 11
      $QTY 11
      $ELEMENT_BOUND_MODIFIER_64 87
      $ELEMENT_BOUND_MODIFIER_128 175
      pick Bql
    case 12
      $QTY 12
      $ELEMENT_BOUND_MODIFIER_64 95
      $ELEMENT_BOUND_MODIFIER_128 191
      pick Bql
    case 13
      $QTY 13
      $ELEMENT_BOUND_MODIFIER_64 103
      $ELEMENT_BOUND_MODIFIER_128 207
      pick Bql
    case 14
      $QTY 14
      $ELEMENT_BOUND_MODIFIER_64 111
      $ELEMENT_BOUND_MODIFIER_128 223
      pick Bql

instruction block-store
  operand
    type block-quantity
  operand
    type address
    $ADDRESS_REGISTER $VALUE
  operand
    type data const integer
    $OFFSET $VALUE
    scramble rTEMPC $LD_OFFSET_IMMEDIATE
  operand
    type data xmmx xmmx-full
    $SRC $VALUE
  select-template
    case BqsADD
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov [$ADDRESS_REGISTER+$OFFSET+40], $SRC~5
        5 mov [$ADDRESS_REGISTER+$OFFSET+32], $SRC~4
        4 mov [$ADDRESS_REGISTER+$OFFSET+24], $SRC~3
        3 mov [$ADDRESS_REGISTER+$OFFSET+16], $SRC~2
        2 mov [$ADDRESS_REGISTER+$OFFSET+8], $SRC~1
        1 mov [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
      code
        xor rTEMPA, rTEMPA
    case BqsAID BqsACD
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov [$ADDRESS_REGISTER+rTEMPC+40], $SRC~5
        5 mov [$ADDRESS_REGISTER+rTEMPC+32], $SRC~4
        4 mov [$ADDRESS_REGISTER+rTEMPC+24], $SRC~3
        3 mov [$ADDRESS_REGISTER+rTEMPC+16], $SRC~2
        2 mov [$ADDRESS_REGISTER+rTEMPC+8], $SRC~1
        1 mov [$ADDRESS_REGISTER+rTEMPC+0], $SRC~0
      code
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
    
    case BqsADX BqlADX
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq [$ADDRESS_REGISTER+$OFFSET+104], $SRC~13
        13 movq [$ADDRESS_REGISTER+$OFFSET+96], $SRC~12
        12 movq [$ADDRESS_REGISTER+$OFFSET+88], $SRC~11
        11 movq [$ADDRESS_REGISTER+$OFFSET+80], $SRC~10
        10 movq [$ADDRESS_REGISTER+$OFFSET+72], $SRC~9
        9 movq [$ADDRESS_REGISTER+$OFFSET+64], $SRC~8
        8 movq [$ADDRESS_REGISTER+$OFFSET+56], $SRC~7
        7 movq [$ADDRESS_REGISTER+$OFFSET+48], $SRC~6
        6 movq [$ADDRESS_REGISTER+$OFFSET+40], $SRC~5
        5 movq [$ADDRESS_REGISTER+$OFFSET+32], $SRC~4
        4 movq [$ADDRESS_REGISTER+$OFFSET+24], $SRC~3
        3 movq [$ADDRESS_REGISTER+$OFFSET+16], $SRC~2
        2 movq [$ADDRESS_REGISTER+$OFFSET+8], $SRC~1
        1 movq [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
      code
        xor rTEMPA, rTEMPA
    case BqsAIX BqsACX BqlAIX BqlACX
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq [$ADDRESS_REGISTER+rTEMPC+104], $SRC~13
        13 movq [$ADDRESS_REGISTER+rTEMPC+96], $SRC~12
        12 movq [$ADDRESS_REGISTER+rTEMPC+88], $SRC~11
        11 movq [$ADDRESS_REGISTER+rTEMPC+80], $SRC~10
        10 movq [$ADDRESS_REGISTER+rTEMPC+72], $SRC~9
        9 movq [$ADDRESS_REGISTER+rTEMPC+64], $SRC~8
        8 movq [$ADDRESS_REGISTER+rTEMPC+56], $SRC~7
        7 movq [$ADDRESS_REGISTER+rTEMPC+48], $SRC~6
        6 movq [$ADDRESS_REGISTER+rTEMPC+40], $SRC~5
        5 movq [$ADDRESS_REGISTER+rTEMPC+32], $SRC~4
        4 movq [$ADDRESS_REGISTER+rTEMPC+24], $SRC~3
        3 movq [$ADDRESS_REGISTER+rTEMPC+16], $SRC~2
        2 movq [$ADDRESS_REGISTER+rTEMPC+8], $SRC~1
        1 movq [$ADDRESS_REGISTER+rTEMPC+0], $SRC~0
      code
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
    
    case BqsADXx BqlADXx
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu [$ADDRESS_REGISTER+$OFFSET+208], $SRC~13
        13 movdqu [$ADDRESS_REGISTER+$OFFSET+192], $SRC~12
        12 movdqu [$ADDRESS_REGISTER+$OFFSET+176], $SRC~11
        11 movdqu [$ADDRESS_REGISTER+$OFFSET+160], $SRC~10
        10 movdqu [$ADDRESS_REGISTER+$OFFSET+144], $SRC~9
        9 movdqu [$ADDRESS_REGISTER+$OFFSET+128], $SRC~8
        8 movdqu [$ADDRESS_REGISTER+$OFFSET+112], $SRC~7
        7 movdqu [$ADDRESS_REGISTER+$OFFSET+96], $SRC~6
        6 movdqu [$ADDRESS_REGISTER+$OFFSET+80], $SRC~5
        5 movdqu [$ADDRESS_REGISTER+$OFFSET+64], $SRC~4
        4 movdqu [$ADDRESS_REGISTER+$OFFSET+48], $SRC~3
        3 movdqu [$ADDRESS_REGISTER+$OFFSET+32], $SRC~2
        2 movdqu [$ADDRESS_REGISTER+$OFFSET+16], $SRC~1
        1 movdqu [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
      code
        xor rTEMPA, rTEMPA
    case BqsAIXx BqsACXx BqlAIXx BqlACXx
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu [$ADDRESS_REGISTER+$OFFSET+208], $SRC~13
        13 movdqu [$ADDRESS_REGISTER+$OFFSET+192], $SRC~12
        12 movdqu [$ADDRESS_REGISTER+$OFFSET+176], $SRC~11
        11 movdqu [$ADDRESS_REGISTER+$OFFSET+160], $SRC~10
        10 movdqu [$ADDRESS_REGISTER+$OFFSET+144], $SRC~9
        9 movdqu [$ADDRESS_REGISTER+$OFFSET+128], $SRC~8
        8 movdqu [$ADDRESS_REGISTER+$OFFSET+112], $SRC~7
        7 movdqu [$ADDRESS_REGISTER+$OFFSET+96], $SRC~6
        6 movdqu [$ADDRESS_REGISTER+$OFFSET+80], $SRC~5
        5 movdqu [$ADDRESS_REGISTER+$OFFSET+64], $SRC~4
        4 movdqu [$ADDRESS_REGISTER+$OFFSET+48], $SRC~3
        3 movdqu [$ADDRESS_REGISTER+$OFFSET+32], $SRC~2
        2 movdqu [$ADDRESS_REGISTER+$OFFSET+16], $SRC~1
        1 movdqu [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
      code
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC

instruction block-load
  operand
    type block-quantity
  operand
    type data xmmx xmmx-full
    $DEST__DATA_REG $VALUE
  operand
    type address
    $ADDRESS_REGISTER $VALUE
  operand
    type data const integer
    $OFFSET $VALUE
    scramble rTEMPC $LD_OFFSET_IMMEDIATE
  select-template
    case BqsDAD
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+40]
        5 mov $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+32]
        4 mov $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+24]
        3 mov $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+16]
        2 mov $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+8]
        1 mov $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
      code
        xor rTEMPA, rTEMPA
    case BqsDAI BqsDAC
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov $DEST__DATA_REG~5, [$ADDRESS_REGISTER+rTEMPC+40]
        5 mov $DEST__DATA_REG~4, [$ADDRESS_REGISTER+rTEMPC+32]
        4 mov $DEST__DATA_REG~3, [$ADDRESS_REGISTER+rTEMPC+24]
        3 mov $DEST__DATA_REG~2, [$ADDRESS_REGISTER+rTEMPC+16]
        2 mov $DEST__DATA_REG~1, [$ADDRESS_REGISTER+rTEMPC+8]
        1 mov $DEST__DATA_REG~0, [$ADDRESS_REGISTER+rTEMPC+0]
      code
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
    
    case BqsXAD BqlXAD
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq $DEST__DATA_REG~13, [$ADDRESS_REGISTER+$OFFSET+104]
        13 movq $DEST__DATA_REG~12, [$ADDRESS_REGISTER+$OFFSET+96]
        12 movq $DEST__DATA_REG~11, [$ADDRESS_REGISTER+$OFFSET+88]
        11 movq $DEST__DATA_REG~10, [$ADDRESS_REGISTER+$OFFSET+80]
        10 movq $DEST__DATA_REG~9, [$ADDRESS_REGISTER+$OFFSET+72]
        9 movq $DEST__DATA_REG~8, [$ADDRESS_REGISTER+$OFFSET+64]
        8 movq $DEST__DATA_REG~7, [$ADDRESS_REGISTER+$OFFSET+56]
        7 movq $DEST__DATA_REG~6, [$ADDRESS_REGISTER+$OFFSET+48]
        6 movq $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+40]
        5 movq $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+32]
        4 movq $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+24]
        3 movq $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+16]
        2 movq $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+8]
        1 movq $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
      code
        xor rTEMPA, rTEMPA
    case BqsXAI BqlXAI BqsXAC BqlXAC
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq $DEST__DATA_REG~13, [$ADDRESS_REGISTER+rTEMPC+104]
        13 movq $DEST__DATA_REG~12, [$ADDRESS_REGISTER+rTEMPC+96]
        12 movq $DEST__DATA_REG~11, [$ADDRESS_REGISTER+rTEMPC+88]
        11 movq $DEST__DATA_REG~10, [$ADDRESS_REGISTER+rTEMPC+80]
        10 movq $DEST__DATA_REG~9, [$ADDRESS_REGISTER+rTEMPC+72]
        9 movq $DEST__DATA_REG~8, [$ADDRESS_REGISTER+rTEMPC+64]
        8 movq $DEST__DATA_REG~7, [$ADDRESS_REGISTER+rTEMPC+56]
        7 movq $DEST__DATA_REG~6, [$ADDRESS_REGISTER+rTEMPC+48]
        6 movq $DEST__DATA_REG~5, [$ADDRESS_REGISTER+rTEMPC+40]
        5 movq $DEST__DATA_REG~4, [$ADDRESS_REGISTER+rTEMPC+32]
        4 movq $DEST__DATA_REG~3, [$ADDRESS_REGISTER+rTEMPC+24]
        3 movq $DEST__DATA_REG~2, [$ADDRESS_REGISTER+rTEMPC+16]
        2 movq $DEST__DATA_REG~1, [$ADDRESS_REGISTER+rTEMPC+8]
        1 movq $DEST__DATA_REG~0, [$ADDRESS_REGISTER+rTEMPC+0]
      code
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
    
    case BqsXxAD BqlXxAD
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu $DEST__DATA_REG~13, [$ADDRESS_REGISTER+$OFFSET+208]
        13 movdqu $DEST__DATA_REG~12, [$ADDRESS_REGISTER+$OFFSET+192]
        12 movdqu $DEST__DATA_REG~11, [$ADDRESS_REGISTER+$OFFSET+176]
        11 movdqu $DEST__DATA_REG~10, [$ADDRESS_REGISTER+$OFFSET+160]
        10 movdqu $DEST__DATA_REG~9, [$ADDRESS_REGISTER+$OFFSET+144]
        9 movdqu $DEST__DATA_REG~8, [$ADDRESS_REGISTER+$OFFSET+128]
        8 movdqu $DEST__DATA_REG~7, [$ADDRESS_REGISTER+$OFFSET+112]
        7 movdqu $DEST__DATA_REG~6, [$ADDRESS_REGISTER+$OFFSET+96]
        6 movdqu $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+80]
        5 movdqu $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+64]
        4 movdqu $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+48]
        3 movdqu $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+32]
        2 movdqu $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+16]
        1 movdqu $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
      code
        xor rTEMPA, rTEMPA
    case BqsXxAI BqlXxAI BqsXxAC BqlXxAC
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu $DEST__DATA_REG~13, [$ADDRESS_REGISTER+$OFFSET+208]
        13 movdqu $DEST__DATA_REG~12, [$ADDRESS_REGISTER+$OFFSET+192]
        12 movdqu $DEST__DATA_REG~11, [$ADDRESS_REGISTER+$OFFSET+176]
        11 movdqu $DEST__DATA_REG~10, [$ADDRESS_REGISTER+$OFFSET+160]
        10 movdqu $DEST__DATA_REG~9, [$ADDRESS_REGISTER+$OFFSET+144]
        9 movdqu $DEST__DATA_REG~8, [$ADDRESS_REGISTER+$OFFSET+128]
        8 movdqu $DEST__DATA_REG~7, [$ADDRESS_REGISTER+$OFFSET+112]
        7 movdqu $DEST__DATA_REG~6, [$ADDRESS_REGISTER+$OFFSET+96]
        6 movdqu $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+80]
        5 movdqu $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+64]
        4 movdqu $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+48]
        3 movdqu $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+32]
        2 movdqu $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+16]
        1 movdqu $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
      code
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC

instruction spread
  operand
    type data xmmx
    $TARGET $VALUE
  operand
    type integer float
    scramble rTEMPA $LD_IMMEDIATE_0
  opt-operand
    type integer float
    scramble rTEMPA $LD_IMMEDIATE_1
  opt-operand
    type integer float
    scramble rTEMPA $LD_IMMEDIATE_2
  opt-operand
    type integer float
    scramble rTEMPA $LD_IMMEDIATE_3
  opt-operand
    type integer float
    scramble rTEMPA $LD_IMMEDIATE_4
  opt-operand
    type integer float
    scramble rTEMPA $LD_IMMEDIATE_5
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_6
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_7
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_8
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_9
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_10
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_11
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_12
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_13
  opt-operand
    type float
    scramble rTEMPA $LD_IMMEDIATE_14
  select-template
    case DI
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, rTEMPA
    case DII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        mov $TARGET~1, rTEMPA
    case DIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        mov $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        mov $TARGET~2, rTEMPA
    case DIIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        mov $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        mov $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        mov $TARGET~3, rTEMPA
    case DIIIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        mov $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        mov $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        mov $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        mov $TARGET~4, rTEMPA
    case DIIIIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        mov $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        mov $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        mov $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        mov $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        mov $TARGET~5, rTEMPA
    case XF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
    case XFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
    case XFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
    case XFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
    case XFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
    case XFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
    case XFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
    case XFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
    case XFFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8
        movq $TARGET~8, rTEMPA
    case XFFFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9
        movq $TARGET~9, rTEMPA
    case XFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10
        movq $TARGET~10, rTEMPA
    case XFFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10
        movq $TARGET~10, rTEMPA
        $LD_IMMEDIATE_11
        movq $TARGET~11, rTEMPA
    case XFFFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10
        movq $TARGET~10, rTEMPA
        $LD_IMMEDIATE_11
        movq $TARGET~11, rTEMPA
        $LD_IMMEDIATE_12
        movq $TARGET~12, rTEMPA
    case XFFFFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10
        movq $TARGET~10, rTEMPA
        $LD_IMMEDIATE_11
        movq $TARGET~11, rTEMPA
        $LD_IMMEDIATE_12
        movq $TARGET~12, rTEMPA
        $LD_IMMEDIATE_13
        movq $TARGET~13, rTEMPA
  code
    xor rTEMPA, rTEMPA

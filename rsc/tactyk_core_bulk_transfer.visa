typespec block-quantity
  select-operand
    case 1
      $QTY 1
      $ELEMENT_BOUND_MODIFIER_64 7
      $ELEMENT_BOUND_MODIFIER_128 15
      pick Bqs
    case 2
      $QTY 2
      $ELEMENT_BOUND_MODIFIER_64 15
      $ELEMENT_BOUND_MODIFIER_128 31
      pick Bqs
    case 3
      $QTY 3
      $ELEMENT_BOUND_MODIFIER_64 23
      $ELEMENT_BOUND_MODIFIER_128 47
      pick Bqs
    case 4
      $QTY 4
      $ELEMENT_BOUND_MODIFIER_64 31
      $ELEMENT_BOUND_MODIFIER_128 63
      pick Bqs
    case 5
      $QTY 5
      $ELEMENT_BOUND_MODIFIER_64 39
      $ELEMENT_BOUND_MODIFIER_128 79
      pick Bqs
    case 6
      $QTY 6
      $ELEMENT_BOUND_MODIFIER_64 47
      $ELEMENT_BOUND_MODIFIER_128 95
      pick Bqs
    case 7
      $QTY 7
      $ELEMENT_BOUND_MODIFIER_64 55
      $ELEMENT_BOUND_MODIFIER_128 111
      pick Bql
    case 8
      $QTY 8
      $ELEMENT_BOUND_MODIFIER_64 63
      $ELEMENT_BOUND_MODIFIER_128 127
      pick Bql
    case 9
      $QTY 9
      $ELEMENT_BOUND_MODIFIER_64 71
      $ELEMENT_BOUND_MODIFIER_128 143
      pick Bql
    case 10
      $QTY 10
      $ELEMENT_BOUND_MODIFIER_64 79
      $ELEMENT_BOUND_MODIFIER_128 159
      pick Bql
    case 11
      $QTY 11
      $ELEMENT_BOUND_MODIFIER_64 87
      $ELEMENT_BOUND_MODIFIER_128 175
      pick Bql
    case 12
      $QTY 12
      $ELEMENT_BOUND_MODIFIER_64 95
      $ELEMENT_BOUND_MODIFIER_128 191
      pick Bql
    case 13
      $QTY 13
      $ELEMENT_BOUND_MODIFIER_64 103
      $ELEMENT_BOUND_MODIFIER_128 207
      pick Bql
    case 14
      $QTY 14
      $ELEMENT_BOUND_MODIFIER_64 111
      $ELEMENT_BOUND_MODIFIER_128 223
      pick Bql

instruction block-store
  operand
    type block-quantity
  operand
    type address
    $ADDRESS_REGISTER $VALUE
  operand
    type data const integer
    $OFFSET $VALUE
    scramble rTEMPC
    $LD_OFFSET_IMMEDIATE $SC_LD_INDIRECT
  operand
    type data xmmx xmmx-full
    $SRC $VALUE
  select-template
    case BqsADD
      sub tmp a
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov [$ADDRESS_REGISTER+$OFFSET+40], $SRC~5
        5 mov [$ADDRESS_REGISTER+$OFFSET+32], $SRC~4
        4 mov [$ADDRESS_REGISTER+$OFFSET+24], $SRC~3
        3 mov [$ADDRESS_REGISTER+$OFFSET+16], $SRC~2
        2 mov [$ADDRESS_REGISTER+$OFFSET+8], $SRC~1
        1 mov [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
        1 $RESET_TEMP
    case BqsAID BqsACD
      sub tmp a
      sub tmp c
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov [$ADDRESS_REGISTER+rTEMPC+40], $SRC~5
        5 mov [$ADDRESS_REGISTER+rTEMPC+32], $SRC~4
        4 mov [$ADDRESS_REGISTER+rTEMPC+24], $SRC~3
        3 mov [$ADDRESS_REGISTER+rTEMPC+16], $SRC~2
        2 mov [$ADDRESS_REGISTER+rTEMPC+8], $SRC~1
        1 mov [$ADDRESS_REGISTER+rTEMPC+0], $SRC~0
        1 $RESET_TEMP
    
    case BqsADX BqlADX
      sub tmp a
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq [$ADDRESS_REGISTER+$OFFSET+104], $SRC~13
        13 movq [$ADDRESS_REGISTER+$OFFSET+96], $SRC~12
        12 movq [$ADDRESS_REGISTER+$OFFSET+88], $SRC~11
        11 movq [$ADDRESS_REGISTER+$OFFSET+80], $SRC~10
        10 movq [$ADDRESS_REGISTER+$OFFSET+72], $SRC~9
        9 movq [$ADDRESS_REGISTER+$OFFSET+64], $SRC~8
        8 movq [$ADDRESS_REGISTER+$OFFSET+56], $SRC~7
        7 movq [$ADDRESS_REGISTER+$OFFSET+48], $SRC~6
        6 movq [$ADDRESS_REGISTER+$OFFSET+40], $SRC~5
        5 movq [$ADDRESS_REGISTER+$OFFSET+32], $SRC~4
        4 movq [$ADDRESS_REGISTER+$OFFSET+24], $SRC~3
        3 movq [$ADDRESS_REGISTER+$OFFSET+16], $SRC~2
        2 movq [$ADDRESS_REGISTER+$OFFSET+8], $SRC~1
        1 movq [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
        1 $RESET_TEMP
    case BqsAIX BqsACX BqlAIX BqlACX
      sub tmp a
      sub tmp c
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq [$ADDRESS_REGISTER+rTEMPC+104], $SRC~13
        13 movq [$ADDRESS_REGISTER+rTEMPC+96], $SRC~12
        12 movq [$ADDRESS_REGISTER+rTEMPC+88], $SRC~11
        11 movq [$ADDRESS_REGISTER+rTEMPC+80], $SRC~10
        10 movq [$ADDRESS_REGISTER+rTEMPC+72], $SRC~9
        9 movq [$ADDRESS_REGISTER+rTEMPC+64], $SRC~8
        8 movq [$ADDRESS_REGISTER+rTEMPC+56], $SRC~7
        7 movq [$ADDRESS_REGISTER+rTEMPC+48], $SRC~6
        6 movq [$ADDRESS_REGISTER+rTEMPC+40], $SRC~5
        5 movq [$ADDRESS_REGISTER+rTEMPC+32], $SRC~4
        4 movq [$ADDRESS_REGISTER+rTEMPC+24], $SRC~3
        3 movq [$ADDRESS_REGISTER+rTEMPC+16], $SRC~2
        2 movq [$ADDRESS_REGISTER+rTEMPC+8], $SRC~1
        1 movq [$ADDRESS_REGISTER+rTEMPC+0], $SRC~0
        1 $RESET_TEMP
    
    case BqsADXx BqlADXx
      sub tmp a
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu [$ADDRESS_REGISTER+$OFFSET+208], $SRC~13
        13 movdqu [$ADDRESS_REGISTER+$OFFSET+192], $SRC~12
        12 movdqu [$ADDRESS_REGISTER+$OFFSET+176], $SRC~11
        11 movdqu [$ADDRESS_REGISTER+$OFFSET+160], $SRC~10
        10 movdqu [$ADDRESS_REGISTER+$OFFSET+144], $SRC~9
        9 movdqu [$ADDRESS_REGISTER+$OFFSET+128], $SRC~8
        8 movdqu [$ADDRESS_REGISTER+$OFFSET+112], $SRC~7
        7 movdqu [$ADDRESS_REGISTER+$OFFSET+96], $SRC~6
        6 movdqu [$ADDRESS_REGISTER+$OFFSET+80], $SRC~5
        5 movdqu [$ADDRESS_REGISTER+$OFFSET+64], $SRC~4
        4 movdqu [$ADDRESS_REGISTER+$OFFSET+48], $SRC~3
        3 movdqu [$ADDRESS_REGISTER+$OFFSET+32], $SRC~2
        2 movdqu [$ADDRESS_REGISTER+$OFFSET+16], $SRC~1
        1 movdqu [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
        1 $RESET_TEMP
    case BqsAIXx BqsACXx BqlAIXx BqlACXx
      sub tmp a
      sub tmp c
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu [$ADDRESS_REGISTER+$OFFSET+208], $SRC~13
        13 movdqu [$ADDRESS_REGISTER+$OFFSET+192], $SRC~12
        12 movdqu [$ADDRESS_REGISTER+$OFFSET+176], $SRC~11
        11 movdqu [$ADDRESS_REGISTER+$OFFSET+160], $SRC~10
        10 movdqu [$ADDRESS_REGISTER+$OFFSET+144], $SRC~9
        9 movdqu [$ADDRESS_REGISTER+$OFFSET+128], $SRC~8
        8 movdqu [$ADDRESS_REGISTER+$OFFSET+112], $SRC~7
        7 movdqu [$ADDRESS_REGISTER+$OFFSET+96], $SRC~6
        6 movdqu [$ADDRESS_REGISTER+$OFFSET+80], $SRC~5
        5 movdqu [$ADDRESS_REGISTER+$OFFSET+64], $SRC~4
        4 movdqu [$ADDRESS_REGISTER+$OFFSET+48], $SRC~3
        3 movdqu [$ADDRESS_REGISTER+$OFFSET+32], $SRC~2
        2 movdqu [$ADDRESS_REGISTER+$OFFSET+16], $SRC~1
        1 movdqu [$ADDRESS_REGISTER+$OFFSET+0], $SRC~0
        1 $RESET_TEMP

instruction block-load
  operand
    type block-quantity
  operand
    type data xmmx xmmx-full
    $DEST__DATA_REG $VALUE
  operand
    type address
    $ADDRESS_REGISTER $VALUE
  operand
    type data const integer
    $OFFSET $VALUE
    scramble rTEMPC
    $LD_OFFSET_IMMEDIATE $SC_LD_INDIRECT
  select-template
    case BqsDAD
      sub tmp a
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+40]
        5 mov $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+32]
        4 mov $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+24]
        3 mov $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+16]
        2 mov $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+8]
        1 mov $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
        1 $RESET_TEMP
    case BqsDAI BqsDAC
      sub tmp a
      sub tmp c
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        6 mov $DEST__DATA_REG~5, [$ADDRESS_REGISTER+rTEMPC+40]
        5 mov $DEST__DATA_REG~4, [$ADDRESS_REGISTER+rTEMPC+32]
        4 mov $DEST__DATA_REG~3, [$ADDRESS_REGISTER+rTEMPC+24]
        3 mov $DEST__DATA_REG~2, [$ADDRESS_REGISTER+rTEMPC+16]
        2 mov $DEST__DATA_REG~1, [$ADDRESS_REGISTER+rTEMPC+8]
        1 mov $DEST__DATA_REG~0, [$ADDRESS_REGISTER+rTEMPC+0]
        1 $RESET_TEMP
    
    case BqsXAD BqlXAD
      sub tmp a
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq $DEST__DATA_REG~13, [$ADDRESS_REGISTER+$OFFSET+104]
        13 movq $DEST__DATA_REG~12, [$ADDRESS_REGISTER+$OFFSET+96]
        12 movq $DEST__DATA_REG~11, [$ADDRESS_REGISTER+$OFFSET+88]
        11 movq $DEST__DATA_REG~10, [$ADDRESS_REGISTER+$OFFSET+80]
        10 movq $DEST__DATA_REG~9, [$ADDRESS_REGISTER+$OFFSET+72]
        9 movq $DEST__DATA_REG~8, [$ADDRESS_REGISTER+$OFFSET+64]
        8 movq $DEST__DATA_REG~7, [$ADDRESS_REGISTER+$OFFSET+56]
        7 movq $DEST__DATA_REG~6, [$ADDRESS_REGISTER+$OFFSET+48]
        6 movq $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+40]
        5 movq $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+32]
        4 movq $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+24]
        3 movq $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+16]
        2 movq $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+8]
        1 movq $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
        1 $RESET_TEMP
    case BqsXAI BqlXAI BqsXAC BqlXAC
      sub tmp a
      sub tmp c
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_64
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movq $DEST__DATA_REG~13, [$ADDRESS_REGISTER+rTEMPC+104]
        13 movq $DEST__DATA_REG~12, [$ADDRESS_REGISTER+rTEMPC+96]
        12 movq $DEST__DATA_REG~11, [$ADDRESS_REGISTER+rTEMPC+88]
        11 movq $DEST__DATA_REG~10, [$ADDRESS_REGISTER+rTEMPC+80]
        10 movq $DEST__DATA_REG~9, [$ADDRESS_REGISTER+rTEMPC+72]
        9 movq $DEST__DATA_REG~8, [$ADDRESS_REGISTER+rTEMPC+64]
        8 movq $DEST__DATA_REG~7, [$ADDRESS_REGISTER+rTEMPC+56]
        7 movq $DEST__DATA_REG~6, [$ADDRESS_REGISTER+rTEMPC+48]
        6 movq $DEST__DATA_REG~5, [$ADDRESS_REGISTER+rTEMPC+40]
        5 movq $DEST__DATA_REG~4, [$ADDRESS_REGISTER+rTEMPC+32]
        4 movq $DEST__DATA_REG~3, [$ADDRESS_REGISTER+rTEMPC+24]
        3 movq $DEST__DATA_REG~2, [$ADDRESS_REGISTER+rTEMPC+16]
        2 movq $DEST__DATA_REG~1, [$ADDRESS_REGISTER+rTEMPC+8]
        1 movq $DEST__DATA_REG~0, [$ADDRESS_REGISTER+rTEMPC+0]
        1 $RESET_TEMP
    
    case BqsXxAD BqlXxAD
      sub tmp a
      code
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp $OFFSET, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp $OFFSET, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu $DEST__DATA_REG~13, [$ADDRESS_REGISTER+$OFFSET+208]
        13 movdqu $DEST__DATA_REG~12, [$ADDRESS_REGISTER+$OFFSET+192]
        12 movdqu $DEST__DATA_REG~11, [$ADDRESS_REGISTER+$OFFSET+176]
        11 movdqu $DEST__DATA_REG~10, [$ADDRESS_REGISTER+$OFFSET+160]
        10 movdqu $DEST__DATA_REG~9, [$ADDRESS_REGISTER+$OFFSET+144]
        9 movdqu $DEST__DATA_REG~8, [$ADDRESS_REGISTER+$OFFSET+128]
        8 movdqu $DEST__DATA_REG~7, [$ADDRESS_REGISTER+$OFFSET+112]
        7 movdqu $DEST__DATA_REG~6, [$ADDRESS_REGISTER+$OFFSET+96]
        6 movdqu $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+80]
        5 movdqu $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+64]
        4 movdqu $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+48]
        3 movdqu $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+32]
        2 movdqu $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+16]
        1 movdqu $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
        1 $RESET_TEMP
    case BqsXxAI BqlXxAI BqsXxAC BqlXxAC
      sub tmp a
      sub tmp c
      code
        $LD_OFFSET_IMMEDIATE
        mov rTEMPA_32, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
        sub rTEMPA, $ELEMENT_BOUND_MODIFIER_128
        cmp rTEMPC, rTEMPA
        errorge STATUS_ROGUE_POINTER
        cmp rTEMPC, 0
        errorlt STATUS_ROGUE_POINTER
        cmp $ADDRESS_REGISTER, 0
        erroreq STATUS_UNBOUND_MEMORY
        lfence
      vcode $QTY
        14 movdqu $DEST__DATA_REG~13, [$ADDRESS_REGISTER+$OFFSET+208]
        13 movdqu $DEST__DATA_REG~12, [$ADDRESS_REGISTER+$OFFSET+192]
        12 movdqu $DEST__DATA_REG~11, [$ADDRESS_REGISTER+$OFFSET+176]
        11 movdqu $DEST__DATA_REG~10, [$ADDRESS_REGISTER+$OFFSET+160]
        10 movdqu $DEST__DATA_REG~9, [$ADDRESS_REGISTER+$OFFSET+144]
        9 movdqu $DEST__DATA_REG~8, [$ADDRESS_REGISTER+$OFFSET+128]
        8 movdqu $DEST__DATA_REG~7, [$ADDRESS_REGISTER+$OFFSET+112]
        7 movdqu $DEST__DATA_REG~6, [$ADDRESS_REGISTER+$OFFSET+96]
        6 movdqu $DEST__DATA_REG~5, [$ADDRESS_REGISTER+$OFFSET+80]
        5 movdqu $DEST__DATA_REG~4, [$ADDRESS_REGISTER+$OFFSET+64]
        4 movdqu $DEST__DATA_REG~3, [$ADDRESS_REGISTER+$OFFSET+48]
        3 movdqu $DEST__DATA_REG~2, [$ADDRESS_REGISTER+$OFFSET+32]
        2 movdqu $DEST__DATA_REG~1, [$ADDRESS_REGISTER+$OFFSET+16]
        1 movdqu $DEST__DATA_REG~0, [$ADDRESS_REGISTER+$OFFSET+0]
        1 $RESET_TEMP

instruction block-assign
  operand
    type block-quantity
  operand
    type data xmmx
    $DEST $VALUE
  operand
    type xmmx data const fconst integer float string
    $A $VALUE
    scramble rTEMPA
    $LD_A_IMMEDIATE $SC_LD
    $LD_A_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_A $SC_TARGET
    scramble rTEMPC $VALUE_UPPER
    $LD_A_HIGHBITS_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type xmmx data const fconst integer float
    $B $VALUE
    scramble rTEMPA
    $LD_B_IMMEDIATE $SC_LD
    $LD_B_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_B $SC_TARGET
  opt-operand
    type xmmx data const fconst integer float
    $C $VALUE
    scramble rTEMPA
    $LD_C_IMMEDIATE $SC_LD
    $LD_C_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_D $SC_TARGET
  opt-operand
    type xmmx data const fconst integer float
    $D $VALUE
    scramble rTEMPA
    $LD_D_IMMEDIATE $SC_LD
    $LD_D_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_D $SC_TARGET
  select-template
    case BqsDD
      vcode $QTY
        1 mov $DEST~0, $A
        2 mov $DEST~1, $A
        3 mov $DEST~2, $A
        4 mov $DEST~3, $A
        5 mov $DEST~4, $A
        6 mov $DEST~5, $A
    case BqsDX
      vcode $QTY
        1 cvttsd2si $DEST~0, $A
        2 mov $DEST~1, $DEST~0
        3 mov $DEST~2, $DEST~0
        4 mov $DEST~3, $DEST~0
        5 mov $DEST~4, $DEST~0
        6 mov $DEST~5, $DEST~0
    case BqsDI BqsDC BqsDS
      sub tmp ra
      vcode $QTY
        1 $LD_A_IMMEDIATE
        1 mov $DEST~0, $TGT_A
        2 mov $DEST~1, $DEST~0
        3 mov $DEST~2, $DEST~0
        4 mov $DEST~3, $DEST~0
        5 mov $DEST~4, $DEST~0
        6 mov $DEST~5, $DEST~0
        1 $RESET_TEMP
    case BqsDF BqsDCf
      sub tmp ra
      sub tmp xa
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 movq xTEMPA, rTEMPA
        1 cvttsd2si $DEST~0, xTEMPA
        2 mov $DEST~1, $DEST~0
        3 mov $DEST~2, $DEST~0
        4 mov $DEST~3, $DEST~0
        5 mov $DEST~4, $DEST~0
        6 mov $DEST~5, $DEST~0
        1 $RESET_TEMP
    case BqsXD BqlXD
      vcode $QTY
        1 cvtsi2sd $DEST~0, $A
        2 movq $DEST~1, $DEST~0
        3 movq $DEST~2, $DEST~0
        4 movq $DEST~3, $DEST~0
        5 movq $DEST~4, $DEST~0
        6 movq $DEST~5, $DEST~0
        7 movq $DEST~6, $DEST~0
        8 movq $DEST~7, $DEST~0
        9 movq $DEST~8, $DEST~0
        10 movq $DEST~9, $DEST~0
        11 movq $DEST~10, $DEST~0
        12 movq $DEST~11, $DEST~0
        13 movq $DEST~12, $DEST~0
        14 movq $DEST~13, $DEST~0
    case BqsXX BqlXX
      vcode $QTY
        1 movq $DEST~0, $A
        2 movq $DEST~1, $A
        3 movq $DEST~2, $A
        4 movq $DEST~3, $A
        5 movq $DEST~4, $A
        6 movq $DEST~5, $A
        7 movq $DEST~6, $A
        8 movq $DEST~7, $A
        9 movq $DEST~8, $A
        10 movq $DEST~9, $A
        11 movq $DEST~10, $A
        12 movq $DEST~11, $A
        13 movq $DEST~12, $A
        14 movq $DEST~13, $A
    case BqsXI BqlXI BqsXC BqlXC
      sub tmp ra
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 cvtsi2sd $DEST~0, rTEMPA
        2 movq $DEST~1, $DEST~0
        3 movq $DEST~2, $DEST~0
        4 movq $DEST~3, $DEST~0
        5 movq $DEST~4, $DEST~0
        6 movq $DEST~5, $DEST~0
        7 movq $DEST~6, $DEST~0
        8 movq $DEST~7, $DEST~0
        9 movq $DEST~8, $DEST~0
        10 movq $DEST~9, $DEST~0
        11 movq $DEST~10, $DEST~0
        12 movq $DEST~11, $DEST~0
        13 movq $DEST~12, $DEST~0
        14 movq $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXF BqlXF BqsXCf BqlXCf
      sub tmp ra
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 movq $DEST~0, rTEMPA
        2 movq $DEST~1, $DEST~0
        3 movq $DEST~2, $DEST~0
        4 movq $DEST~3, $DEST~0
        5 movq $DEST~4, $DEST~0
        6 movq $DEST~5, $DEST~0
        7 movq $DEST~6, $DEST~0
        8 movq $DEST~7, $DEST~0
        9 movq $DEST~8, $DEST~0
        10 movq $DEST~9, $DEST~0
        11 movq $DEST~10, $DEST~0
        12 movq $DEST~11, $DEST~0
        13 movq $DEST~12, $DEST~0
        14 movq $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXS BqlXS
      sub tmp ra
      sub tmp rc
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 $LD_A_HIGHBITS_IMMEDIATE_INDIRECT
        1 movq $DEST~0, rTEMPA
        1 pinsrq $DEST~0, rTEMPC, 3
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXXX BqlXXX
      vcode $QTY
        1 movq $DEST~0, $A
        1 movlhps $DEST~0, $A
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
    case BqsXXXXX BqlXXXXX
      sub tmp xa
      vcode $QTY
        1 cvt2d2ss xTEMPA, $A
        1 cvtsd2ss xTEMPA, $B
        1 insertps $DEST, xTEMPA, 0b00010000
        1 cvtsd2ss xTEMPA, $C
        1 insertps $DEST, xTEMPA, 0b00100000
        1 cvtsd2ss xTEMPA, $D
        1 insertps $DEST, xTEMPA, 0b00110000
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXDD BqlXDD
      sub tmp xa
      vcode $QTY
        1 cvtsi2sd $DEST~0, $A
        1 cvtsi2sd xTEMPA, $B
        1 movlhps $DEST~0, xTEMPA
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXDDDD BqlXDDDD
      sub tmp xa
      vcode $QTY
        1 cvtsi2ss $DEST~0, $A
        1 cvtsi2ss xTEMPA, $B
        1 insertps $DEST~0, xTEMPA, 0b00010000
        1 cvtsi2ss xTEMPA, $C
        1 insertps $DEST~0, xTEMPA, 0b00100000
        1 cvtsi2ss xTEMPA, $D
        1 insertps $DEST~0, xTEMPA, 0b00110000
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXII BqlXII BqsXCC BqlXCC BqsXCI BqlXCI BqsXIC BqlXIC
      sub tmp ra
      sub tmp xa
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 cvtsi2sd $DEST~0, rTEMPA
        1 $LD_B_IMMEDIATE_INDIRECT
        1 cvtsi2sd xTEMPA, rTEMPA
        1 movlhps $DEST~0, xTEMPA
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXIIII BqlXIIII BqsXCCCC BqlXCCCC
      sub tmp ra
      sub tmp xa
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 cvtsi2ss $DEST~0, rTEMPA
        1 $LD_B_IMMEDIATE_INDIRECT
        1 cvtsi2ss xTEMPA, rTEMPA
        1 insertps $DEST~0, xTEMPA, 0b00010000
        1 $LD_C_IMMEDIATE_INDIRECT
        1 cvtsi2ss xTEMPA, rTEMPA
        1 insertps $DEST~0, xTEMPA, 0b00100000
        1 $LD_D_IMMEDIATE_INDIRECT
        1 cvtsi2ss xTEMPA, rTEMPA
        1 insertps $DEST~0, xTEMPA, 0b00110000
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXFF BqlXFF BqsXCfF BqlXCfF BqsXFCf BqlXFCf BqsXCfCf BqlXCfCf
      sub tmp xa
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 movq $DEST~0, rTEMPA
        1 $LD_B_IMMEDIATE_INDIRECT
        1 pinsrq $DEST~0, rTEMPA, 3
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP
    case BqsXFFFF BqlXFFFF BqsXCfCfCfCf BqlXCfCfCfCf
      sub tmp ra
      sub tmp xa
      vcode $QTY
        1 $LD_A_IMMEDIATE_INDIRECT
        1 movq  $DEST~0, rTEMPA
        1 $LD_B_IMMEDIATE_INDIRECT
        1 movq  xTEMPA, rTEMPA
        1 cvtsd2ss $DEST~0, $DEST~0
        1 cvtsd2ss xTEMPA, xTEMPA
        1 insertps $DEST~0, xTEMPA, 0b00010000
        1 $LD_C_IMMEDIATE_INDIRECT
        1 movq  xTEMPA, rTEMPA
        1 cvtsd2ss xTEMPA, xTEMPA
        1 insertps $DEST~0, xTEMPA, 0b00100000
        1 $LD_D_IMMEDIATE_INDIRECT
        1 movq  xTEMPA, rTEMPA
        1 cvtsd2ss xTEMPA, xTEMPA
        1 insertps $DEST~0, xTEMPA, 0b00110000
        2 movdqa $DEST~1, $DEST~0
        3 movdqa $DEST~2, $DEST~0
        4 movdqa $DEST~3, $DEST~0
        5 movdqa $DEST~4, $DEST~0
        6 movdqa $DEST~5, $DEST~0
        7 movdqa $DEST~6, $DEST~0
        8 movdqa $DEST~7, $DEST~0
        9 movdqa $DEST~8, $DEST~0
        10 movdqa $DEST~9, $DEST~0
        11 movdqa $DEST~10, $DEST~0
        12 movdqa $DEST~11, $DEST~0
        13 movdqa $DEST~12, $DEST~0
        14 movdqa $DEST~13, $DEST~0
        1 $RESET_TEMP

instruction spread
  operand
    type data xmmx
    $TARGET $VALUE
  operand
    type integer float
    scramble rTEMPA
    $TGT_0 $SC_TARGET
    $LD_IMMEDIATE_0 $SC_LD
    $LD_IMMEDIATE_0_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer float
    scramble rTEMPA
    $TGT_1 $SC_TARGET
    $LD_IMMEDIATE_1 $SC_LD
    $LD_IMMEDIATE_1_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer float
    scramble rTEMPA
    $TGT_2 $SC_TARGET
    $LD_IMMEDIATE_2 $SC_LD
    $LD_IMMEDIATE_2_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer float
    scramble rTEMPA
    $TGT_3 $SC_TARGET
    $LD_IMMEDIATE_3 $SC_LD
    $LD_IMMEDIATE_3_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer float
    scramble rTEMPA
    $TGT_4 $SC_TARGET
    $LD_IMMEDIATE_4 $SC_LD
    $LD_IMMEDIATE_4_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer float
    scramble rTEMPA
    $TGT_5 $SC_TARGET
    $LD_IMMEDIATE_5 $SC_LD
    $LD_IMMEDIATE_5_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_6 $SC_TARGET
    $LD_IMMEDIATE_6 $SC_LD
    $LD_IMMEDIATE_6_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_7 $SC_TARGET
    $LD_IMMEDIATE_7 $SC_LD
    $LD_IMMEDIATE_7_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_8 $SC_TARGET
    $LD_IMMEDIATE_8 $SC_LD
    $LD_IMMEDIATE_8_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_9 $SC_TARGET
    $LD_IMMEDIATE_9 $SC_LD
    $LD_IMMEDIATE_9_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_10 $SC_TARGET
    $LD_IMMEDIATE_10 $SC_LD
    $LD_IMMEDIATE_10_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_11 $SC_TARGET
    $LD_IMMEDIATE_11 $SC_LD
    $LD_IMMEDIATE_11_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_12 $SC_TARGET
    $LD_IMMEDIATE_12 $SC_LD
    $LD_IMMEDIATE_12_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_13 $SC_TARGET
    $LD_IMMEDIATE_13 $SC_LD
    $LD_IMMEDIATE_13_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type float
    scramble rTEMPA
    $TGT_14 $SC_TARGET
    $LD_IMMEDIATE_14 $SC_LD
    $LD_IMMEDIATE_14_INDIRECT $SC_LD_INDIRECT
    sub tmp $TGT_0
  select-template
    case DI
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, $TGT_0
    case DII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, $TGT_0
        $LD_IMMEDIATE_1
        mov $TARGET~1, $TGT_1
    case DIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, $TGT_0
        $LD_IMMEDIATE_1
        mov $TARGET~1, $TGT_1
        $LD_IMMEDIATE_2
        mov $TARGET~2, $TGT_2
    case DIIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, $TGT_0
        $LD_IMMEDIATE_1
        mov $TARGET~1, $TGT_1
        $LD_IMMEDIATE_2
        mov $TARGET~2, $TGT_2
        $LD_IMMEDIATE_3
        mov $TARGET~3, $TGT_3
    case DIIIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, $TGT_0
        $LD_IMMEDIATE_1
        mov $TARGET~1, $TGT_1
        $LD_IMMEDIATE_2
        mov $TARGET~2, $TGT_2
        $LD_IMMEDIATE_3
        mov $TARGET~3, $TGT_3
        $LD_IMMEDIATE_4
        mov $TARGET~4, $TGT_4
    case DIIIIII
      code
        $LD_IMMEDIATE_0
        mov $TARGET~0, $TGT_0
        $LD_IMMEDIATE_1
        mov $TARGET~1, $TGT_1
        $LD_IMMEDIATE_2
        mov $TARGET~2, $TGT_2
        $LD_IMMEDIATE_3
        mov $TARGET~3, $TGT_3
        $LD_IMMEDIATE_4
        mov $TARGET~4, $TGT_4
        $LD_IMMEDIATE_5
        mov $TARGET~5, $TGT_5
    case XF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
    case XFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
    case XFFF
      code
        $LD_IMMEDIATE_0
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2
        movq $TARGET~2, rTEMPA
    case XFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
    case XFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
    case XFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
    case XFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
    case XFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
    case XFFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8_INDIRECT
        movq $TARGET~8, rTEMPA
    case XFFFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8_INDIRECT
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9_INDIRECT
        movq $TARGET~9, rTEMPA
    case XFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8_INDIRECT
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9_INDIRECT
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10_INDIRECT
        movq $TARGET~10, rTEMPA
    case XFFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8_INDIRECT
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9_INDIRECT
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10_INDIRECT
        movq $TARGET~10, rTEMPA
        $LD_IMMEDIATE_11_INDIRECT
        movq $TARGET~11, rTEMPA
    case XFFFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8_INDIRECT
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9_INDIRECT
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10_INDIRECT
        movq $TARGET~10, rTEMPA
        $LD_IMMEDIATE_11_INDIRECT
        movq $TARGET~11, rTEMPA
        $LD_IMMEDIATE_12_INDIRECT
        movq $TARGET~12, rTEMPA
    case XFFFFFFFFFFFFFF
      code
        $LD_IMMEDIATE_0_INDIRECT
        movq $TARGET~0, rTEMPA
        $LD_IMMEDIATE_1_INDIRECT
        movq $TARGET~1, rTEMPA
        $LD_IMMEDIATE_2_INDIRECT
        movq $TARGET~2, rTEMPA
        $LD_IMMEDIATE_3_INDIRECT
        movq $TARGET~3, rTEMPA
        $LD_IMMEDIATE_4_INDIRECT
        movq $TARGET~4, rTEMPA
        $LD_IMMEDIATE_5_INDIRECT
        movq $TARGET~5, rTEMPA
        $LD_IMMEDIATE_6_INDIRECT
        movq $TARGET~6, rTEMPA
        $LD_IMMEDIATE_7_INDIRECT
        movq $TARGET~7, rTEMPA
        $LD_IMMEDIATE_8_INDIRECT
        movq $TARGET~8, rTEMPA
        $LD_IMMEDIATE_9_INDIRECT
        movq $TARGET~9, rTEMPA
        $LD_IMMEDIATE_10_INDIRECT
        movq $TARGET~10, rTEMPA
        $LD_IMMEDIATE_11_INDIRECT
        movq $TARGET~11, rTEMPA
        $LD_IMMEDIATE_12_INDIRECT
        movq $TARGET~12, rTEMPA
        $LD_IMMEDIATE_13_INDIRECT
        movq $TARGET~13, rTEMPA
  code
    $RESET_TEMP

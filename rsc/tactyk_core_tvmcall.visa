# TACTYK Virtual Machine calls

instruction tvmpush
  operand
    type data const integer
    $PROG_HANDLE $VALUE
    scramble rMAPPER $LD_IMMEDIATE_PROG_HANDLE
  operand
    type data const integer
    $FUNC_HANDLE $VALUE
    scramble rTEMPA $LD_IMMEDIATE_FUNC_HANDLE
  select-template
    case DD
      code
        mov rTEMPC, fs:[context.stack + random_const_FS]
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_lock]
        cmp rTEMPA, 0
        errorneq STATUS_INVALID_TVMJUMP_STATE
        mov qword [rTEMPC + tactyk_stack.stack_lock], 1
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_position]
        inc rTEMPA
        cmp rTEMPA, stacksize
        errorge STATUS_STACK_OVERFLOW
        mov [rTEMPC + tactyk_stack.stack_position], rTEMPA

        ; rTEMPC -> stack entry pointer
        imul rTEMPA, tvmstackentry_size
        add rTEMPC, tactyk_stack.stack
        add rTEMPC, rTEMPA
        
        mov rTEMPA, fs:[context.floor + random_const_FS]
        mov rMAPPER, fs:[context.program_map + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_program], rMAPPER
        mov [rTEMPC + tvmstackentry.source_stack_floor], rTEMPA
        mov rTEMPD_32, fs:[context.instruction_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_max_iptr], rTEMPD_32
        mov rTEMPD, fs:[context.memblocks + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks], rTEMPD
        mov rTEMPD, fs:[context.memblocks_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks_count], rTEMPD
        
        mov rMAPPER, $PROG_HANDLE
        mov rTEMPA, $FUNC_HANDLE
        
        ; validate $PROG_HANDLE
        cmp rMAPPER, 0
        errorlt STATUS_INVALID_TVMJUMP
        mov rTEMPD, fs:[context.vm + random_const_FS]
        cmp rMAPPER, [rTEMPD + tactyk_vm.program_count]
        errorge STATUS_INVALID_TVMJUMP
        
        ; rTEMPD -> program declaration
        mov rTEMPD, [rTEMPD + tactyk_vm.program_list]
        imul rMAPPER, program_dec_size
        add rTEMPD, rMAPPER
        
        ; validate $FUNC_HANDLE
        cmp rTEMPA, 0
        errorlt STATUS_INVALID_TVMJUMP
        cmp rTEMPA, [rTEMPD + program_dec.function_count]
        errorge STATUS_INVALID_TVMJUMP
        mov [rTEMPC + tvmstackentry.target_jump_index], rTEMPA_32
        
        ; obtain target jump tables.
        mov rTEMPA, [rTEMPD + program_dec.instruction_jumptable]
        mov rMAPPER, [rTEMPD + program_dec.function_jumptable]
        mov [rTEMPC + tvmstackentry.target_program], rTEMPA
        mov [rTEMPC + tvmstackentry.target_function_jumptable], rMAPPER
        mov rTEMPA, [rTEMPD + program_dec.instruction_count]
        mov [rTEMPC + tvmstackentry.dest_max_iptr], rTEMPA_32
        mov rTEMPA, [rTEMPD + program_dec.memblocks]
        mov [rTEMPC + tvmstackentry.target_memblocks], rTEMPA
        mov rTEMPA, [rTEMPD + program_dec.memblocks_count]
        mov [rTEMPC + tvmstackentry.target_memblocks_count], rTEMPA
        
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        xor rTEMPD, rTEMPD
        xor rMAPPER, rMAPPER
        
        ; the only thing missing here is the return index (not avaialble until the actual jump).
        jmp $NEXT_INSTRUCTION
    
    case II IC CI CC
      code
        mov rTEMPC, fs:[context.stack + random_const_FS]
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_lock]
        cmp rTEMPA, 0
        errorneq STATUS_INVALID_TVMJUMP_STATE
        mov qword [rTEMPC + tactyk_stack.stack_lock], 1
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_position]
        inc rTEMPA
        cmp rTEMPA, stacksize
        errorge STATUS_STACK_OVERFLOW
        mov [rTEMPC + tactyk_stack.stack_position], rTEMPA

        ; rTEMPC -> stack entry pointer
        imul rTEMPA, tvmstackentry_size
        add rTEMPC, tactyk_stack.stack
        add rTEMPC, rTEMPA
        
        mov rTEMPA, fs:[context.floor + random_const_FS]
        mov rMAPPER, fs:[context.program_map + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_program], rMAPPER
        mov [rTEMPC + tvmstackentry.source_stack_floor], rTEMPA
        mov rTEMPD_32, fs:[context.instruction_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_max_iptr], rTEMPD_32
        mov rTEMPD, fs:[context.memblocks + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks], rTEMPD
        mov rTEMPD, fs:[context.memblocks_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks_count], rTEMPD
        
        $LD_IMMEDIATE_PROG_HANDLE
        $LD_IMMEDIATE_FUNC_HANDLE
        
        ; validate $PROG_HANDLE
        cmp rMAPPER, 0
        errorlt STATUS_INVALID_TVMJUMP
        mov rTEMPD, fs:[context.vm + random_const_FS]
        cmp rMAPPER, [rTEMPD + tactyk_vm.program_count]
        errorge STATUS_INVALID_TVMJUMP
        
        ; rTEMPD -> program declaration
        mov rTEMPD, [rTEMPD + tactyk_vm.program_list]
        imul rMAPPER, program_dec_size
        add rTEMPD, rMAPPER
        
        ; validate $FUNC_HANDLE
        cmp rTEMPA, 0
        errorlt STATUS_INVALID_TVMJUMP
        cmp rTEMPA, [rTEMPD + program_dec.function_count]
        errorge STATUS_INVALID_TVMJUMP
        mov [rTEMPC + tvmstackentry.target_jump_index], rTEMPA_32
        
        ; obtain target jump tables.
        mov rTEMPA, [rTEMPD + program_dec.instruction_jumptable]
        mov rMAPPER, [rTEMPD + program_dec.function_jumptable]
        mov [rTEMPC + tvmstackentry.target_program], rTEMPA
        mov [rTEMPC + tvmstackentry.target_function_jumptable], rMAPPER
        mov rTEMPA, [rTEMPD + program_dec.instruction_count]
        mov [rTEMPC + tvmstackentry.dest_max_iptr], rTEMPA_32
        mov rTEMPA, [rTEMPD + program_dec.memblocks]
        mov [rTEMPC + tvmstackentry.target_memblocks], rTEMPA
        mov rTEMPA, [rTEMPD + program_dec.memblocks_count]
        mov [rTEMPC + tvmstackentry.target_memblocks_count], rTEMPA
        
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        xor rTEMPD, rTEMPD
        xor rMAPPER, rMAPPER
        
        ; the only thing missing here is the return index (not avaialble until the actual jump).
        jmp $NEXT_INSTRUCTION
    
    case DI DC
      code
        mov rTEMPC, fs:[context.stack + random_const_FS]
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_lock]
        cmp rTEMPA, 0
        errorneq STATUS_INVALID_TVMJUMP_STATE
        mov qword [rTEMPC + tactyk_stack.stack_lock], 1
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_position]
        inc rTEMPA
        cmp rTEMPA, stacksize
        errorge STATUS_STACK_OVERFLOW
        mov [rTEMPC + tactyk_stack.stack_position], rTEMPA

        ; rTEMPC -> stack entry pointer
        imul rTEMPA, tvmstackentry_size
        add rTEMPC, tactyk_stack.stack
        add rTEMPC, rTEMPA
        
        mov rTEMPA, fs:[context.floor + random_const_FS]
        mov rMAPPER, fs:[context.program_map + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_program], rMAPPER
        mov [rTEMPC + tvmstackentry.source_stack_floor], rTEMPA
        mov rTEMPD_32, fs:[context.instruction_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_max_iptr], rTEMPD_32
        mov rTEMPD, fs:[context.memblocks + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks], rTEMPD
        mov rTEMPD, fs:[context.memblocks_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks_count], rTEMPD
        
        $LD_IMMEDIATE_FUNC_HANDLE
        mov rMAPPER, $PROG_HANDLE
        
        ; validate $PROG_HANDLE
        cmp rMAPPER, 0
        errorlt STATUS_INVALID_TVMJUMP
        mov rTEMPD, fs:[context.vm + random_const_FS]
        cmp rMAPPER, [rTEMPD + tactyk_vm.program_count]
        errorge STATUS_INVALID_TVMJUMP
        
        ; rTEMPD -> program declaration
        mov rTEMPD, [rTEMPD + tactyk_vm.program_list]
        imul rMAPPER, program_dec_size
        add rTEMPD, rMAPPER
        
        ; validate $FUNC_HANDLE
        cmp rTEMPA, 0
        errorlt STATUS_INVALID_TVMJUMP
        cmp rTEMPA, [rTEMPD + program_dec.function_count]
        errorge STATUS_INVALID_TVMJUMP
        mov [rTEMPC + tvmstackentry.target_jump_index], rTEMPA_32
        
        ; obtain target jump tables.
        mov rTEMPA, [rTEMPD + program_dec.instruction_jumptable]
        mov rMAPPER, [rTEMPD + program_dec.function_jumptable]
        mov [rTEMPC + tvmstackentry.target_program], rTEMPA
        mov [rTEMPC + tvmstackentry.target_function_jumptable], rMAPPER
        mov rTEMPA, [rTEMPD + program_dec.instruction_count]
        mov [rTEMPC + tvmstackentry.dest_max_iptr], rTEMPA_32
        mov rTEMPA, [rTEMPD + program_dec.memblocks]
        mov [rTEMPC + tvmstackentry.target_memblocks], rTEMPA
        mov rTEMPA, [rTEMPD + program_dec.memblocks_count]
        mov [rTEMPC + tvmstackentry.target_memblocks_count], rTEMPA
        
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        xor rTEMPD, rTEMPD
        xor rMAPPER, rMAPPER
        
        ; the only thing missing here is the return index (not avaialble until the actual jump).
        jmp $NEXT_INSTRUCTION
    
    case ID CD
      code
        mov rTEMPC, fs:[context.stack + random_const_FS]
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_lock]
        cmp rTEMPA, 0
        errorneq STATUS_INVALID_TVMJUMP_STATE
        mov qword [rTEMPC + tactyk_stack.stack_lock], 1
        mov rTEMPA, [rTEMPC + tactyk_stack.stack_position]
        inc rTEMPA
        cmp rTEMPA, stacksize
        errorge STATUS_STACK_OVERFLOW
        mov [rTEMPC + tactyk_stack.stack_position], rTEMPA

        ; rTEMPC -> stack entry pointer
        imul rTEMPA, tvmstackentry_size
        add rTEMPC, tactyk_stack.stack
        add rTEMPC, rTEMPA
        
        mov rTEMPA, fs:[context.floor + random_const_FS]
        mov rMAPPER, fs:[context.program_map + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_program], rMAPPER
        mov [rTEMPC + tvmstackentry.source_stack_floor], rTEMPA
        mov rTEMPD_32, fs:[context.instruction_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_max_iptr], rTEMPD_32
        mov rTEMPD, fs:[context.memblocks + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks], rTEMPD
        mov rTEMPD, fs:[context.memblocks_count + random_const_FS]
        mov [rTEMPC + tvmstackentry.source_memblocks_count], rTEMPD
        
        $LD_IMMEDIATE_PROG_HANDLE
        mov rTEMPA, $FUNC_HANDLE
        
        ; validate $PROG_HANDLE
        cmp rMAPPER, 0
        errorlt STATUS_INVALID_TVMJUMP
        mov rTEMPD, fs:[context.vm + random_const_FS]
        cmp rMAPPER, [rTEMPD + tactyk_vm.program_count]
        errorge STATUS_INVALID_TVMJUMP
        
        ; rTEMPD -> program declaration
        mov rTEMPD, [rTEMPD + tactyk_vm.program_list]
        imul rMAPPER, program_dec_size
        add rTEMPD, rMAPPER
        
        ; validate $FUNC_HANDLE
        cmp rTEMPA, 0
        errorlt STATUS_INVALID_TVMJUMP
        cmp rTEMPA, [rTEMPD + program_dec.function_count]
        errorge STATUS_INVALID_TVMJUMP
        mov [rTEMPC + tvmstackentry.target_jump_index], rTEMPA_32
        
        ; obtain target jump tables.
        mov rTEMPA, [rTEMPD + program_dec.instruction_jumptable]
        mov rMAPPER, [rTEMPD + program_dec.function_jumptable]
        mov [rTEMPC + tvmstackentry.target_program], rTEMPA
        mov [rTEMPC + tvmstackentry.target_function_jumptable], rMAPPER
        mov rTEMPA, [rTEMPD + program_dec.instruction_count]
        mov [rTEMPC + tvmstackentry.dest_max_iptr], rTEMPA_32
        mov rTEMPA, [rTEMPD + program_dec.memblocks]
        mov [rTEMPC + tvmstackentry.target_memblocks], rTEMPA
        mov rTEMPA, [rTEMPD + program_dec.memblocks_count]
        mov [rTEMPC + tvmstackentry.target_memblocks_count], rTEMPA
        
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        xor rTEMPD, rTEMPD
        xor rMAPPER, rMAPPER
        
        ; the only thing missing here is the return index (not avaialble until the actual jump).
        jmp $NEXT_INSTRUCTION
instruction tvmjump
  $KW dword
  scramble rTEMPA $LD_CMDNEXT_IMMEDIATE $COMMAND_INDEX_NEXT
  code
    mov dword fs:[context.lwcall_floor + random_const_FS], rLWCSI_32
    mov dword fs:[context.microcontext_floor + random_const_FS], rMCSI_32
    
    mov rTEMPC, fs:[context.stack + random_const_FS]
    mov rTEMPA, [rTEMPC + tactyk_stack.stack_lock]
    cmp rTEMPA, 1
    errorneq STATUS_INVALID_TVMJUMP_STATE
    
    mov qword [rTEMPC + tactyk_stack.stack_lock], 0
    mov rTEMPA, [rTEMPC + tactyk_stack.stack_position]
    
    ; rTEMPC -> stack entry pointer
    imul rTEMPA, tvmstackentry_size
    add rTEMPC, tactyk_stack.stack
    add rTEMPC, rTEMPA
    
    $LD_CMDNEXT_IMMEDIATE
    mov [rTEMPC + tvmstackentry.source_return_index], rTEMPA_32
    mov [rTEMPC + tvmstackentry.source_lwcallstack_position], rLWCSI_32
    mov [rTEMPC + tvmstackentry.source_mctxstack_position], rMCSI_32

    ; load the target context
    mov rTEMPA, [rTEMPC + tvmstackentry.target_program]
    mov fs:[context.program_map + random_const_FS], rTEMPA
    mov rTEMPA_32, [rTEMPC + tvmstackentry.dest_max_iptr]
    mov fs:[context.instruction_count + random_const_FS], rTEMPA
    mov rTEMPA, [rTEMPC + tvmstackentry.target_memblocks]
    mov fs:[context.memblocks + random_const_FS], rTEMPA
    mov rTEMPA, [rTEMPC + tvmstackentry.target_memblocks_count]
    mov fs:[context.memblocks_count + random_const_FS], rTEMPA
    
    ; prepare the jump
    mov rMAPPER_32, [rTEMPC + tvmstackentry.target_jump_index]
    shl rMAPPER, 3
    add rMAPPER, [rTEMPC + tvmstackentry.target_function_jumptable]
    
    ; go!
    xor rTEMPA, rTEMPA
    xor rTEMPC, rTEMPC
    jmp [rMAPPER]

instruction tvmreturn
  code
    mov rTEMPC, fs:[context.stack + random_const_FS]
    mov rTEMPA, [rTEMPC + tactyk_stack.stack_lock]
    cmp rTEMPA, 0
    errorneq STATUS_INVALID_TVMJUMP_STATE
    mov rTEMPA, [rTEMPC + tactyk_stack.stack_position]
    cmp rTEMPA, 0
    errorlt STATUS_STACK_UNDERFLOW
    mov rTEMPD, rTEMPA
    dec rTEMPA
    mov [rTEMPC + tactyk_stack.stack_position], rTEMPA
    
    ; rTEMPC -> stack entry pointer
    imul rTEMPD, tvmstackentry_size
    add rTEMPC, tactyk_stack.stack
    add rTEMPC, rTEMPD
    
    ; restore the caller context
    mov rTEMPD, [rTEMPC + tvmstackentry.source_stack_floor]
    mov fs:[context.floor + random_const_FS], rTEMPD
    mov rLWCSI_32, [rTEMPC + tvmstackentry.source_lwcallstack_position]
    mov rMCSI_32, [rTEMPC + tvmstackentry.source_mctxstack_position]
    mov rMAPPER, [rTEMPC + tvmstackentry.source_program]
    mov fs:[context.program_map + random_const_FS], rMAPPER
    mov rTEMPA_32, [rTEMPC + tvmstackentry.source_max_iptr]
    mov fs:[context.instruction_count + random_const_FS], rTEMPA
    mov rTEMPA, [rTEMPC + tvmstackentry.source_memblocks]
    mov fs:[context.memblocks + random_const_FS], rTEMPA
    mov rTEMPA, [rTEMPC + tvmstackentry.source_memblocks_count]
    mov fs:[context.memblocks_count + random_const_FS], rTEMPA
    
    ; prepare a return jump
    mov rTEMPA_32, [rTEMPC + tvmstackentry.source_return_index]
    shl rTEMPA, 3
    add rMAPPER, rTEMPA

    ; MAYBE zero out the stack entry - this doesn't seem to be needed, as the most exploitable case that came up in testing
    ; does not differ from what can be accomplished through ordinary means.
    ; mov qword [rTEMPC + tvmstackentry.source_program], 0
    ; mov qword [rTEMPC + tvmstackentry.source_exec_position], 0
    ; mov qword [rTEMPC + tvmstackentry.source_stack_floor], 0
    ; mov qword [rTEMPC + tvmstackentry.target_program], 0
    ; mov qword [rTEMPC + tvmstackentry.target_function_jumptable], 0
    ; mov qword [rTEMPC + tvmstackentry.target_exec_position], 0
    
    xor rTEMPA, rTEMPA
    xor rTEMPC, rTEMPC
    xor rTEMPD, rTEMPD
    jmp [rMAPPER]

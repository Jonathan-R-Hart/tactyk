# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#   Copyright 2023, Jonathan Hart
#   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation,
#   either version 3 of the License, or (at your option) any later version.
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#   You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# TACTYK Core Virtual ISA
# This is both the default configuration for TACTYK, as well as an example of how to use configuration-based virtual ISA specification

# low-level type specifications
# Types are determined with by testing.  Parameters for the first matching pattern are applied.

# General handling
#
# This file is loaded into the visa interpreter and stored in data structures matching the indentation
# Each (except for assembly code) is treated as a whitespace-delimited list of tokens.
# Except for assembly code (the "code" keyword), alls are a command, followed by a list of parameters.
#
# Visa specification is a simple domain-specific language for configuring tactyk.  It has subroutines, conditional
# exits, and an unusually sophisticated switch statement (substantially moreso than is typical of high level languages), but
# lacks complex conditions and loops.  Its only operations are pre-defined operator:
#   set variable          -- assign the content of a local variable to another local variable.  (for convenience and tersity, this is also the default operation)
#                            (note:  local variables are shared across all handlers which are invoked directly or indirectly by an instruction handler)
#   parse data            -- convert text to int (eventually this should expand to cover other types)
#   resolve symbol        -- search specified symbol tables for a named entry.
#   rewrite asm code      -- use string subtitution to insert local variables into asm code.
#   conditional fail      -- operator that exits the subroutine if the preceding operation (parse or resolve) failed and invokes the next alternative
#   selectors             -- tests invoked by the "select" operator to determine what block to invoke
#   specialized transform -- code manipulators that are not easily implemented through declarative / macro-like logic alone (for now, just immediate scrambling -- it requires random numbers
#                            and has a major variant if an 8-byte immediate is used)
#   ignore                -- another specialized handler for disregarding comments.

header tactyk_asmvm_header.asm

# enables all of aggressive binary executable randomization
settings
  $ABXR_SCRAMBLE_IMMEDIATES
  $ABXR_RANDOMIZE_EXECUTABLE

# immediate scrambling config
# This sets up the scrambling system whereby the script-provided immediate values are scrabled in executable memory and
# unscrambled when accessed.
# 
subroutine scramble
  select-kw2
    case byte word
      code $SC
        mov $SC_DEST, $SC_RAND
        xor $SC_DEST, $SC_DIFF
    case dword
      code $SC
        mov $SC_DEST, $SC_RAND
        xor %[$SC_DEST]_32, $SC_DIFF
    case qword
      code $SC
        mov $SC_DEST, $SC_RAND
        mov rTEMPD, $SC_DIFF
        xor $SC_DEST, rTEMPD
        xor rTEMPD, rTEMPD
        # mov $SC_DEST, $SC_RAND_HIGH
        # xor %[$SC_DEST]_32, $SC_DIFF_HIGH
        # shl $SC_DEST, 32
        # xor %[$SC_DEST]_32, $SC_RAND_LOW
        # xor %[$SC_DEST]_32, $SC_DIFF_LOW

instruction exit
  $KW dword
  scramble rTEMPA $LD_IPTR_IMMEDIATE $COMMAND_INDEX
  code
    $LD_IPTR_IMMEDIATE
    mov fs:[context.instruction_index + random_const_FS], rTEMPA
    xor rTEMPA, rTEMPA
    mov fs:[context.status + random_const_FS], dword STATUS_HALT
    store_context
    rdfsbase rax
    add rax, random_const_FS
    load_runtimecontext rax
    mov r14, [rax + context.runtime_registers + 40]
    mov r15, [rax + context.runtime_registers + 48]
    mov rax, STATUS_HALT
    ret

instruction break
  $KW dword
  scramble rTEMPA $LD_IPTR_IMMEDIATE $COMMAND_INDEX_NEXT
  code
    $LD_IPTR_IMMEDIATE
    mov fs:[context.instruction_index + random_const_FS], rTEMPA
    xor rTEMPA, rTEMPA
    mov fs:[context.status + random_const_FS], dword STATUS_SUSPEND
    store_context
    rdfsbase rax
    add rax, random_const_FS
    load_runtimecontext rax
    mov r14, [rax + context.runtime_registers + 40]
    mov r15, [rax + context.runtime_registers + 48]
    mov rax, STATUS_SUSPEND
    ret

instruction swap
  operand 
    type address data xmmx
    $A $VALUE
    $ADDR_REG_A $VALUE
    $CTX_ADDR_A $CTX_ADDR
  operand
    type address data xmmx
    $B $VALUE
    $ADDR_REG_B $VALUE
    $CTX_ADDR_B $CTX_ADDR
  select-template
    case DD
      code
        xchg $A, $B
        jmp $NEXT_INSTRUCTION

subroutine simple_unary_instruction
  operand 
    type data
    $A $VALUE
  code
    $INSTRUCTION $A
    jmp $NEXT_INSTRUCTION

subroutine simple_binary_instruction
  operand 
    type data
    $A $VALUE
  operand
    type data const integer
    $B $VALUE
    scramble rTEMPA $LD_B_IMMEDIATE
  select-template
    case DD
      code 
        $INSTRUCTION $A, $B
        jmp $NEXT_INSTRUCTION
    case DI DC
      code 
        $LD_B_IMMEDIATE
        $INSTRUCTION $A, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION

subroutine binary_instruction
  operand
    type data xmmx
    $A $VALUE
  operand
    type data xmmx const fconst integer float
    $B $VALUE
    scramble rTEMPC $LD_B_IMMEDIATE
  select-template
    case DD
      code
        $INSTRUCTION $A, $B
        jmp $NEXT_INSTRUCTION
    case DI DC
      code
        $LD_B_IMMEDIATE
        $INSTRUCTION $A, rTEMPC
        xor rTEMPC, rTEMPC
        jmp $NEXT_INSTRUCTION

instruction add
  $INSTRUCTION add
  sub binary_instruction

instruction sub
  $INSTRUCTION sub
  sub binary_instruction

instruction and
  $INSTRUCTION and
  sub simple_binary_instruction

instruction or
  $INSTRUCTION or
  sub simple_binary_instruction

instruction xor
  $INSTRUCTION xor
  sub simple_binary_instruction

instruction assign
  operand 
    type data xmmx address-offset
    $A $VALUE
  operand
    type data xmmx stackreg const branch-index fconst address-offset context-property integer float string
    $B $VALUE
    scramble rTEMPA $LD_B_IMMEDIATE
    scramble rTEMPC $LD_B_HIGHBITS_IMMEDIATE $VALUE_UPPER
  select-template
    case DD
      code 
        mov $A, $B
        jmp $NEXT_INSTRUCTION
    case DSreg
      code
        mov %[$A]_16, %[$B]_16
        sub %[$A]_16, word fs:[$STACK_FLOOR + random_const_FS]
        jmp $NEXT_INSTRUCTION
    case DI DC DS DLi
      code 
        $LD_B_IMMEDIATE
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case DCtx
      select-kw
        case dword
          code
            mov %[$A]_32, fs:[$B + random_const_FS]
            jmp $NEXT_INSTRUCTION

instruction mul
  operand
    type data xmmx
    $A $VALUE
  operand
    type data xmmx const fconst integer float
    $B $VALUE
    scramble rTEMPC $LD_B_IMMEDIATE
  select-template
    case DD
      code
        mov rTEMPA, $A
        imul $B
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
    case DI DC
      code
        $LD_B_IMMEDIATE
        mov rTEMPA, $A
        imul rTEMPC
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        jmp $NEXT_INSTRUCTION

instruction div
  operand
    type data xmmx
    $A $VALUE
  operand
    type data xmmx const fconst integer float
    $B $VALUE
    scramble rTEMPC $LD_B_IMMEDIATE
  operand
    type branch none
    $DIVZ_TARGET $VALUE
  select-template
    case DDN
      code
        cmp $B, 0
        erroreq STATUS_DIVISION_BY_ZERO
        mov rTEMPA, $A
        cqo
        idiv $B
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        xor rTEMPD, rTEMPD
        jmp $NEXT_INSTRUCTION
    case DIN DCN
      code
        $LD_B_IMMEDIATE
        cmp rTEMPC, 0
        erroreq STATUS_DIVISION_BY_ZERO
        mov rTEMPA, $A
        cqo
        idiv rTEMPC
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        xor rTEMPD, rTEMPD
        jmp $NEXT_INSTRUCTION
    case DDL
      code
        cmp $B, 0
        je $DIVZ_TARGET
        mov rTEMPA, $A
        cqo
        idiv $B
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        xor rTEMPD, rTEMPD
        jmp $NEXT_INSTRUCTION
    case DIL DCL
      code
        $LD_B_IMMEDIATE
        cmp rTEMPC, 0
        je $DIVZ_TARGET
        mov rTEMPA, $A
        cqo
        idiv rTEMPC
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        xor rTEMPD, rTEMPD
        jmp $NEXT_INSTRUCTION

subroutine shift
  operand 
    type data
    $A $VALUE
  operand
    type data integer const
    $B $VALUE
    scramble rTEMPC $LD_B_IMMEDIATE
  select-template
    case DD
      code 
        mov rcx, $B
        $INSTRUCTION $A, cl
        xor rcx, rcx
        jmp $NEXT_INSTRUCTION
    case DI DC
      code 
        $LD_B_IMMEDIATE
        $INSTRUCTION $A, cl
        xor rTEMPC, rTEMPC
        jmp $NEXT_INSTRUCTION

instruction shift-left
  $INSTRUCTION shl
  sub shift

instruction shift-right
  $INSTRUCTION shr
  sub shift

instruction rotate-left
  $INSTRUCTION rol
  sub shift

instruction rotate-right
  $INSTRUCTION ror
  sub shift

instruction inc
  $INSTRUCTION inc
  sub simple_unary_instruction

instruction dec
  $INSTRUCTION dec
  sub simple_unary_instruction

instruction not
  $INSTRUCTION not
  sub simple_unary_instruction

instruction negate
  $INSTRUCTION neg
  sub simple_unary_instruction

instruction goto
  operand
    type branch data const integer
    $JTARGET $VALUE
    scramble rMAPPER $LD_IMMEDIATE_SOFTREF_BRANCH
  select-template
    case L
      code
        jmp $JTARGET
    case D
      code
        cmp $JTARGET, fs:[context.instruction_count + random_const_FS]
        errorge STATUS_ROGUE_BRANCH
        cmp $JTARGET, 0
        errorlt STATUS_ROGUE_BRANCH
        lfence
        mov rMAPPER, $JTARGET
        shl rMAPPER, 3
        add rMAPPER, fs:[context.program_map + random_const_FS]
        jmp [rMAPPER]
    case C I
      code
        $LD_IMMEDIATE_SOFTREF_BRANCH
        cmp rMAPPER, fs:[context.instruction_count + random_const_FS]
        errorge STATUS_ROGUE_BRANCH
        cmp rMAPPER, 0
        errorlt STATUS_ROGUE_BRANCH
        lfence
        shl rMAPPER, 3
        add rMAPPER, fs:[context.program_map + random_const_FS]
        jmp [rMAPPER]

subroutine test
  operand
    type xmmx data integer const fconst float
    $A $VALUE
    scramble rTEMPA $LD_IMMEDIATE_A
  operand
    type comparator
    $CJUMP $VALUE
  operand
    type xmmx data integer const fconst float
    $B $VALUE
    scramble rTEMPC $LD_IMMEDIATE_B

subroutine cjump
  operand
    type branch codeblock
    $JTARGET $VALUE
    select $IS_CODEBLOCK
      case true
        $NEXT_INSTRUCTION $CODEBLOCK_CHILD_CLOSE
        $JTARGET $CODEBLOCK_CHILD_FIRST
      case false
  select-template
    case DTDL DTDB
      code
        cmp $A, $B
        $CJUMP .pass
        jmp $NEXT_INSTRUCTION
        .pass:
        jmp $JTARGET
    case DTIL DTCL DTIB DTCB
      code
        $LD_IMMEDIATE_B
        cmp $A, rTEMPC
        $CJUMP .pass
        xor rTEMPC, rTEMPC
        jmp $NEXT_INSTRUCTION
        .pass:
        xor rTEMPC, rTEMPC
        jmp $JTARGET
    case ITDL CTDL ITDB CTDB
      code
        $LD_IMMEDIATE_A
        cmp rTEMPA, $B
        $CJUMP .pass
        xor rTEMPA, rTEMPA
        jmp $NEXT_INSTRUCTION
        .pass:
        xor rTEMPA, rTEMPA
        jmp $JTARGET

instruction if
  sub test
  sub cjump

instruction lwcall
  operand
    type branch
    $JTARGET $VALUE
    scramble rTEMPC $LD_RETURN_TARGET $COMMAND_INDEX_NEXT
  code
    $LD_RETURN_TARGET
    cmp rLWCSI, lwcall_stack_max
    errorge STATUS_STACK_OVERFLOW
    mov rTEMPA, rLWCSI
    shl rTEMPA, 2
    add rTEMPA, fs:[context.lwcall_stack_address + random_const_FS]
    mov dword [rTEMPA], rTEMPC_32
    inc rLWCSI
    xor rTEMPA, rTEMPA
    xor rTEMPC, rTEMPC
    jmp $JTARGET

instruction lwreturn
  code
    cmp rLWCSI_16, fs:[context.lwcall_floor + random_const_FS]
    errorle STATUS_STACK_UNDERFLOW
    dec rLWCSI
    mov rMAPPER, rLWCSI
    shl rMAPPER, 2
    add rMAPPER, fs:[context.lwcall_stack_address + random_const_FS]
    mov rMAPPER_32, [rMAPPER]
    ;cmp rMAPPER, fs:[context.instruction_count + random_const_FS]
    ;errorge STATUS_ROGUE_BRANCH
    shl rMAPPER, 3
    add rMAPPER, fs:[context.program_map + random_const_FS]
    jmp [rMAPPER]

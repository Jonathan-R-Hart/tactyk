# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#   Copyright 2023, Jonathan Hart
#   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation,
#   either version 3 of the License, or (at your option) any later version.
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#   You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# TACTYK Core Virtual ISA
# This is both the default configuration for TACTYK, as well as an example of how to use configuration-based virtual ISA specification

# low-level type specifications
# Types are determined with by testing.  Parameters for the first matching pattern are applied.

# General handling
#
# This file is loaded into the visa interpreter and stored in data structures matching the indentation
# Each (except for assembly code) is treated as a whitespace-delimited list of tokens.
# Except for assembly code (the "code" keyword), alls are a command, followed by a list of parameters.
#
# Visa specification is a simple domain-specific language for configuring tactyk.  It has subroutines, conditional
# exits, and an unusually sophisticated switch statement (substantially moreso than is typical of high level languages), but
# lacks complex conditions and loops.  Its only operations are pre-defined operator:
#   set variable          -- assign the content of a local variable to another local variable.  (for convenience and tersity, this is also the default operation)
#                            (note:  local variables are shared across all handlers which are invoked directly or indirectly by an instruction handler)
#   parse data            -- convert text to int (eventually this should expand to cover other types)
#   resolve symbol        -- search specified symbol tables for a named entry.
#   rewrite asm code      -- use string subtitution to insert local variables into asm code.
#   conditional fail      -- operator that exits the subroutine if the preceding operation (parse or resolve) failed and invokes the next alternative
#   selectors             -- tests invoked by the "select" operator to determine what block to invoke
#   specialized transform -- code manipulators that are not easily implemented through declarative / macro-like logic alone (for now, just immediate scrambling -- it requires random numbers
#                            and has a major variant if an 8-byte immediate is used)
#   ignore                -- another specialized handler for disregarding comments.

header tactyk_asmvm_header.asm

subroutine next-instruction
  code
    jmp $NEXT_INSTRUCTION

settings
  $RESET_TEMP ;
  $USE_AUTO_RESET_TEMP 1

subroutine scramble
  select $USE_SCRAMBLE
    case true
      $SC_TARGET $SC_DEST
      select-kw2
        case byte word
          code new $SC_LD
            mov $SC_DEST, $SC_RAND
            xor $SC_DEST, $SC_DIFF
        case dword
          code new $SC_LD
            mov $SC_DEST, $SC_RAND
            xor %[$SC_DEST]_32, $SC_DIFF
        case qword
          code new $SC_LD
            mov $SC_DEST, $SC_RAND
            mov rTEMPD, $SC_DIFF
            xor $SC_DEST, rTEMPD
            xor rTEMPD, rTEMPD
      $SC_LD_INDIRECT $SC_LD
    case false
      code new $SC_LD_INDIRECT
        mov $SC_DEST, $SC_VALUE
      select-kw2
        case byte word dword
          $SC_TARGET $SC_VALUE
          code new $SC_LD
            ;
        case qword
          $SC_TARGET $SC_DEST
          code new $SC_LD
            mov $SC_DEST, $SC_VALUE

instruction exit
  terminal
  $KW dword
  scramble rTEMPA $COMMAND_INDEX
  code
    $SC_LD
    mov qword fs:[context.instruction_index + random_const_FS], $SC_TARGET
    mov fs:[context.status + random_const_FS], dword STATUS_HALT
    store_context
    rdfsbase rax
    add rax, random_const_FS
    load_runtimecontext rax
    mov r14, [rax + context.runtime_registers + 40]
    mov r15, [rax + context.runtime_registers + 48]
    mov rax, STATUS_HALT
    ret

instruction break
  terminal
  $KW dword
  scramble rTEMPA $COMMAND_INDEX_NEXT
  code
    $SC_LD
    mov qword fs:[context.instruction_index + random_const_FS], $SC_TARGET
    mov fs:[context.status + random_const_FS], dword STATUS_SUSPEND
    store_context
    rdfsbase rax
    add rax, random_const_FS
    load_runtimecontext rax
    mov r14, [rax + context.runtime_registers + 40]
    mov r15, [rax + context.runtime_registers + 48]
    mov rax, STATUS_SUSPEND
    ret

instruction swap
  operand 
    type address data xmmx
    $A $VALUE
    $ADDR_REG_A $VALUE
    $CTX_ADDR_A $CTX_ADDR
  operand
    type address data xmmx
    $B $VALUE
    $ADDR_REG_B $VALUE
    $CTX_ADDR_B $CTX_ADDR
  select-template
    case DD
      code
        xchg $A, $B

subroutine simple_unary_instruction
  operand 
    type data
    $A $VALUE
  code
    $INSTRUCTION $A

subroutine binary_instruction
  operand
    type data xmmx
    $A $VALUE
  operand
    type data xmmx const fconst integer float string
    $B $VALUE
    scramble rTEMPC
    $LD_B_IMMEDIATE $SC_LD
    $LD_B_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_B $SC_TARGET
  select-template
    case DD
      code
        $INSTRUCTION $A, $B
    case DI DC DS
      sub tmp a
      sub tmp $TGT_B
      code
        $LD_B_IMMEDIATE
        $INSTRUCTION $A, $TGT_B
        $RESET_TEMP

instruction add
  $INSTRUCTION add
  sub binary_instruction

instruction sub
  $INSTRUCTION sub
  sub binary_instruction

instruction assign
  operand 
    type data xmmx address-offset
    $A $VALUE
  operand
    type data xmmx stackreg const branch-index fconst address-offset context-property integer float string
    $B $VALUE
    scramble rTEMPA
    $LD_B_IMMEDIATE $SC_LD
    $LD_B_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_B $SC_TARGET
    scramble rTEMPC $VALUE_UPPER
    $LD_B_HIGHBITS_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
  select-template
    case DD
      code 
        mov $A, $B
    case DSreg
      code
        mov %[$A]_16, %[$B]_16
        sub %[$A]_16, word fs:[$STACK_FLOOR + random_const_FS]
    case DI DC DS DLi
      sub tmp $TGT_B
      code 
        $LD_B_IMMEDIATE
        mov $A, $TGT_B
        $RESET_TEMP
    case DCtx
      select-kw
        case dword
          code
            mov %[$A]_32, fs:[$B + random_const_FS]

instruction mul
  operand
    type data xmmx
    $A $VALUE
  operand
    type data xmmx const fconst integer float string
    $B $VALUE
    scramble rTEMPC
    $LD_B_IMMEDIATE $SC_LD
    $LD_B_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_B $SC_TARGET
  select-template
    case DD
      sub tmp a
      code
        mov rTEMPA, $A
        imul $B
        mov $A, rTEMPA
        $RESET_TEMP
    case DI DC DS
      sub tmp a
      sub tmp c
      code
        $LD_B_IMMEDIATE_INDIRECT
        mov rTEMPA, $A
        imul rTEMPC
        mov $A, rTEMPA
        xor rTEMPA, rTEMPA
        xor rTEMPC, rTEMPC
        $RESET_TEMP

instruction div
  operand
    type data xmmx
    $A $VALUE
  operand
    type data xmmx const fconst integer float string
    $B $VALUE
    scramble rTEMPC
    $LD_B_IMMEDIATE $SC_LD
    $LD_B_IMMEDIATE_INDIRECT $SC_LD_INDIRECT
    $TGT_B $SC_TARGET
  operand
    type branch none
    $DIVZ_TARGET $VALUE
  select-template
    case DDN
      sub tmp a
      code
        cmp $B, 0
        erroreq STATUS_DIVISION_BY_ZERO
        mov rTEMPA, $A
        cqo
        idiv $B
        mov $A, rTEMPA
        $RESET_TEMP
    case DIN DCN DSN
      sub tmp a
      sub tmp c
      code
        $LD_B_IMMEDIATE_INDIRECT
        cmp rTEMPC, 0
        erroreq STATUS_DIVISION_BY_ZERO
        mov rTEMPA, $A
        cqo
        idiv rTEMPC
        mov $A, rTEMPA
        $RESET_TEMP
    case DDL
      sub tmp a
      code
        cmp $B, 0
        je $DIVZ_TARGET
        mov rTEMPA, $A
        cqo
        idiv $B
        mov $A, rTEMPA
        $RESET_TEMP
    case DIL DCL DSL
      sub tmp a
      sub tmp c
      code
        $LD_B_IMMEDIATE_INDIRECT
        cmp rTEMPC, 0
        je $DIVZ_TARGET
        mov rTEMPA, $A
        cqo
        idiv rTEMPC
        mov $A, rTEMPA
        $RESET_TEMP

instruction inc
  $INSTRUCTION inc
  sub simple_unary_instruction

instruction dec
  $INSTRUCTION dec
  sub simple_unary_instruction

instruction negate
  $INSTRUCTION neg
  sub simple_unary_instruction

instruction goto
  terminal
  operand
    type branch data const integer
    $JTARGET $VALUE
    scramble rMAPPER
    $LD_IMMEDIATE_SOFTREF_BRANCH $SC_LD_INDIRECT
  $SEL $TEMPLATE_SELECTOR
  reset-template-selector
  sub const-assign
  select $SEL
    case L
      code
        jmp $JTARGET
    case D
      code
        cmp $JTARGET, fs:[context.instruction_count + random_const_FS]
        errorge STATUS_ROGUE_BRANCH
        cmp $JTARGET, 0
        errorlt STATUS_ROGUE_BRANCH
        lfence
        mov rMAPPER, $JTARGET
        shl rMAPPER, 3
        add rMAPPER, fs:[context.program_map + random_const_FS]
        jmp [rMAPPER]
    case C I
      code
        $LD_IMMEDIATE_SOFTREF_BRANCH
        cmp rMAPPER, fs:[context.instruction_count + random_const_FS]
        errorge STATUS_ROGUE_BRANCH
        cmp rMAPPER, 0
        errorlt STATUS_ROGUE_BRANCH
        lfence
        shl rMAPPER, 3
        add rMAPPER, fs:[context.program_map + random_const_FS]
        jmp [rMAPPER]

subroutine test
  $CJUMP jnz
  operand
    type xmmx xmmf32 xmmf64 xmmf32-packed xmmf64-packed xmmi-packed  data integer const fconst float string
    $A $VALUE
    scramble rTEMPA
    $LD_IMMEDIATE_A $SC_LD
    $LD_IMMEDIATE_A_INDIRECT $SC_LD_INDIRECT
    $TGT_A $SC_TARGET
  opt-operand
    type comparator
    $CJUMP $VALUE
  opt-operand
    type xmmx xmmf32 xmmf64 xmmf32-packed xmmf64-packed xmmi-packed data integer const fconst float string
    $B $VALUE
    scramble rTEMPC
    $LD_IMMEDIATE_B $SC_LD
    $LD_IMMEDIATE_B_INDIRECT $SC_LD_INDIRECT
    $TGT_B $SC_TARGET
  select-template
    case DTD
      code
        cmp $A, $B
        $CJUMP .pass
    case DTI DTC DTS
      sub tmp $TGT_B
      code
        $LD_IMMEDIATE_B
        cmp $A, $TGT_B
        $CJUMP .pass
    case ITD CTD STD
      sub tmp a
      code
        $LD_IMMEDIATE_A_INDIRECT
        cmp rTEMPA, $B
        $CJUMP .pass
    
    case DAndD
      code
        test $A, $B
        $CJUMP .pass
    case DAndI DAndC DAndS
      sub tmp $TGT_B
      code
        $LD_IMMEDIATE_B
        test $A, $TGT_B
        $CJUMP .pass
    case IAndD CAndD SAndD
      sub tmp $TGT_B
      code
        $LD_IMMEDIATE_A
        test $B, $TGT_A
        $CJUMP .pass
    
    case DOrD
      sub tmp ra
      code
        assign rTEMPA, $A
        or rTEMPA, $B
        cmp $A, 0
        $CJUMP .pass
    case DOrI DOrC DOrS
      sub tmp $TGT_B
      code
        $LD_IMMEDIATE_B_INDIRECT
        or tTEMPC, $A
        cmp rTEMPC, 0
        $CJUMP .pass
    case IOrD COrD SOrD
      sub tmp $TGT_A
      code
        $LD_IMMEDIATE_A_INDIRECT
        or rTEMPA, $A
        cmp rTEMPA, 0
        $CJUMP .pass
    case D
      code
        cmp $A, 0
        $CJUMP .pass

subroutine cjump
  operand
    type branch codeblock
    $JTARGET $VALUE
    select $IS_CODEBLOCK
      case true
        $NEXT_INSTRUCTION $CODEBLOCK_CHILD_CLOSE
        $JTARGET $CODEBLOCK_CHILD_FIRST
      case false
    code
      $RESET_TEMP
      jmp $NEXT_INSTRUCTION
      .pass:
      $RESET_TEMP
      jmp $JTARGET

instruction if
  terminal
  sub test
  reset-template-selector
  sub cjump

subroutine const-assign
  pick .
  opt-operand
    type integer *const *branch-index *string float *fconst
    scramble rTEMPA
    $TGT_0 $SC_TARGET
    $LD_IMMEDIATE_0 $SC_LD
    $LD_IMMEDIATE_0_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer *const *branch-index *string float *fconst
    scramble rTEMPA
    $TGT_1 $SC_TARGET
    $LD_IMMEDIATE_1 $SC_LD
    $LD_IMMEDIATE_1_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer *const *branch-index *string float *fconst
    scramble rTEMPA
    $TGT_2 $SC_TARGET
    $LD_IMMEDIATE_2 $SC_LD
    $LD_IMMEDIATE_2_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer *const *branch-index *string float *fconst
    scramble rTEMPA
    $TGT_3 $SC_TARGET
    $LD_IMMEDIATE_3 $SC_LD
    $LD_IMMEDIATE_3_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer *const *branch-index *string float *fconst
    scramble rTEMPA
    $TGT_4 $SC_TARGET
    $LD_IMMEDIATE_4 $SC_LD
    $LD_IMMEDIATE_4_INDIRECT $SC_LD_INDIRECT
  opt-operand
    type integer *const *branch-index *string float *fconst
    scramble rTEMPA
    $TGT_5 $SC_TARGET
    $LD_IMMEDIATE_5 $SC_LD
    $LD_IMMEDIATE_5_INDIRECT $SC_LD_INDIRECT
  select-template
    case .
      # pass
    case .I
      code
        $LD_IMMEDIATE_0
        mov rA, $TGT_0
    case .II
      code
        $LD_IMMEDIATE_0
        mov rA, $TGT_0
        $LD_IMMEDIATE_1
        mov rB, $TGT_1
    case .III
      code
        $LD_IMMEDIATE_0
        mov rA, $TGT_0
        $LD_IMMEDIATE_1
        mov rB, $TGT_1
        $LD_IMMEDIATE_2
        mov rC, $TGT_2
    case .IIII
      code
        $LD_IMMEDIATE_0
        mov rA, $TGT_0
        $LD_IMMEDIATE_1
        mov rB, $TGT_1
        $LD_IMMEDIATE_2
        mov rC, $TGT_2
        $LD_IMMEDIATE_3
        mov rD, $TGT_3
    case .IIIII
      code
        $LD_IMMEDIATE_0
        mov rA, $TGT_0
        $LD_IMMEDIATE_1
        mov rB, $TGT_1
        $LD_IMMEDIATE_2
        mov rC, $TGT_2
        $LD_IMMEDIATE_3
        mov rD, $TGT_3
        $LD_IMMEDIATE_4
        mov rD, $TGT_4
    case .IIIIII
      code
        $LD_IMMEDIATE_0
        mov rA, $TGT_0
        $LD_IMMEDIATE_1
        mov rB, $TGT_1
        $LD_IMMEDIATE_2
        mov rC, $TGT_2
        $LD_IMMEDIATE_3
        mov rD, $TGT_3
        $LD_IMMEDIATE_4
        mov rD, $TGT_4
        $LD_IMMEDIATE_5
        mov rD, $TGT_5

instruction lwcall
  terminal
  operand
    type branch data const integer
    $JTARGET $VALUE
    scramble rMAPPER
    $LD_IMMEDIATE_SOFTREF_BRANCH $SC_LD_INDIRECT
    scramble rTEMPC $COMMAND_INDEX_NEXT
    $LD_RETURN_TARGET $SC_LD_INDIRECT
  $SEL $TEMPLATE_SELECTOR
  reset-template-selector
  sub const-assign
  select $SEL
    case L
      sub tmp a
      sub tmp c
      code
        $LD_RETURN_TARGET
        cmp rLWCSI, lwcall_stack_max
        errorge STATUS_STACK_OVERFLOW
        mov rTEMPA, rLWCSI
        shl rTEMPA, 2
        add rTEMPA, fs:[context.lwcall_stack_address + random_const_FS]
        mov dword [rTEMPA], rTEMPC_32
        inc rLWCSI
        $RESET_TEMP
        jmp $JTARGET
    case D
      sub tmp a
      sub tmp c
      code
        $LD_RETURN_TARGET
        cmp rLWCSI, lwcall_stack_max
        errorge STATUS_STACK_OVERFLOW
        mov rTEMPA, rLWCSI
        shl rTEMPA, 2
        add rTEMPA, fs:[context.lwcall_stack_address + random_const_FS]
        mov dword [rTEMPA], rTEMPC_32
        inc rLWCSI
        cmp $JTARGET, fs:[context.instruction_count + random_const_FS]
        errorge STATUS_ROGUE_BRANCH
        cmp $JTARGET, 0
        errorlt STATUS_ROGUE_BRANCH
        lfence
        mov rMAPPER, $JTARGET
        shl rMAPPER, 3
        add rMAPPER, fs:[context.program_map + random_const_FS]
        $RESET_TEMP
        jmp [rMAPPER]
    case C I
      sub tmp a
      sub tmp c
      code
        $LD_RETURN_TARGET
        cmp rLWCSI, lwcall_stack_max
        errorge STATUS_STACK_OVERFLOW
        mov rTEMPA, rLWCSI
        shl rTEMPA, 2
        add rTEMPA, fs:[context.lwcall_stack_address + random_const_FS]
        mov dword [rTEMPA], rTEMPC_32
        inc rLWCSI
        
        $LD_IMMEDIATE_SOFTREF_BRANCH
        cmp rMAPPER, fs:[context.instruction_count + random_const_FS]
        errorge STATUS_ROGUE_BRANCH
        cmp rMAPPER, 0
        errorlt STATUS_ROGUE_BRANCH
        lfence
        shl rMAPPER, 3
        add rMAPPER, fs:[context.program_map + random_const_FS]
        $RESET_TEMP
        jmp [rMAPPER]

instruction lwreturn
  terminal
  code
    cmp rLWCSI_16, fs:[context.lwcall_floor + random_const_FS]
    errorle STATUS_STACK_UNDERFLOW
    dec rLWCSI
    mov rMAPPER, rLWCSI
    shl rMAPPER, 2
    add rMAPPER, fs:[context.lwcall_stack_address + random_const_FS]
    mov rMAPPER_32, [rMAPPER]
    ;cmp rMAPPER, fs:[context.instruction_count + random_const_FS]
    ;errorge STATUS_ROGUE_BRANCH
    shl rMAPPER, 3
    add rMAPPER, fs:[context.program_map + random_const_FS]
    jmp [rMAPPER]

# temp register auto-reset code generation
subroutine tmp
  select $USE_AUTO_RESET_TEMP$arg.0
    case 1a 1ra 1rTEMPA
      select $tmplockra
        case X
          # pass
        default
          $tmplockra X
          code $RESET_TEMP
            xor rTEMPA, rTEMPA
    case 1b 1rb 1rTEMPB
      select $tmplockrb
        case X
          # pass
        default
          $tmplockrb X
          code $RESET_TEMP
            xor rTEMPB, rTEMPB
    case 1c 1rc 1rTEMPC
      select $tmplockrc
        case X
          # pass
        default
          $tmplockrc X
          code $RESET_TEMP
            xor rTEMPC, rTEMPC
    case 1xa 1xTEMPA
      select $tmplockxa
        case X
          # pass
        default
          $tmplockxa X
          code $RESET_TEMP
            pxor xTEMPA, xTEMPA
    case 1xb 1xTEMPB
      select $tmplockxb
        case X
          # pass
        default
          $tmplockxb X
          code $RESET_TEMP
            pxor xTEMPB, xTEMPB
    case 1map 1rmap
      select $tmplockmap
        case X
          # pass
        default
          $tmplockmap X
          code $RESET_TEMP
            xor rMAPPER, rMAPPER
    default
      # pass

instruction nop
  code
    nop

instruction skip
  code
    ; pass




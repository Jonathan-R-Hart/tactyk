# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#   Copyright 2023, Jonathan Hart
#   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation,
#   either version 3 of the License, or (at your option) any later version.
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#   You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------


# TACTYK Core Virtual ISA
# This is both the default configuration for TACTYK, as well as an example of how to use configuration-based virtual ISA specification

# addresses and data registers are recognized by reading code directly.
typespec address
  select-operand
    case @1 addr1 rADDR1
      value rADDR1
      $CTX_ADDR context.addr1
      $CTX_ARRAY_BOUND context.addr1_array_bound
      $CTX_ELEMENT_BOUND context.addr1_element_bound
      $CTX_MEMBLOCK_INDEX context.addr1_memblock_index
    case @2 addr2 rADDR2
      value rADDR2
      $CTX_ADDR context.addr2
      $CTX_ARRAY_BOUND context.addr2_array_bound
      $CTX_ELEMENT_BOUND context.addr2_element_bound
      $CTX_MEMBLOCK_INDEX context.addr2_memblock_index
    case @3 addr3 rADDR3
      value rADDR3
      $CTX_ADDR context.addr3
      $CTX_ARRAY_BOUND context.addr3_array_bound
      $CTX_ELEMENT_BOUND context.addr3_element_bound
      $CTX_MEMBLOCK_INDEX context.addr3_memblock_index
    case @4 addr4 rADDR4
      value rADDR4
      $CTX_ADDR context.addr4
      $CTX_ARRAY_BOUND context.addr4_array_bound
      $CTX_ELEMENT_BOUND context.addr4_element_bound
      $CTX_MEMBLOCK_INDEX context.addr4_memblock_index
  pick A

typespec data
  select-operand
    case a ra rA
      value rA
    case b rb rB
      value rB
    case c rc rC
      value rC
    case d rd rD
      value rD
    case e re rE
      value rE
    case f rf rF
      value rF
  pick D

typespec data-int
  select-operand
    case a ra rA
      value rA
    case b rb rB
      value rB
    case c rc rC
      value rC
    case d rd rD
      value rD
    case e re rE
      value rE
    case f rf rF
      value rF
  pick D

typespec data-f32
  select-operand
    case a.f32 ra.f32 rA.f32
      value rA
    case b.f32 rb.f32 rB.f32
      value rB
    case c.f32 rc.f32 rC.f32
      value rC
    case d.f32 rd.f32 rD.f32
      value rD
    case e.f32 re.f32 rE.f32
      value rE
    case f.f32 rf.f32 rF.f32
      value rF
  pick D.f32

typespec data-f64
  select-operand
    case a.f64 ra.f64 rA.f64
      value rA
    case b.f64 rb.f64 rB.f64
      value rB
    case c.f64 rc.f64 rC.f64
      value rC
    case d.f64 rd.f64 rD.f64
      value rD
    case e.f64 re.f64 rE.f64
      value rE
    case f.f64 rf.f64 rF.f64
      value rF
  pick D.f64

typespec word
  select-operand
    case byte i8
      $MOV movzx
      $MVKW byte
      $REGBITS_LD 64
      $REGBITS_ST 8
      $BYTEBOUND 0
      pick B
    case word i16
      $MOV movzx
      $MVKW word
      $REGBITS_LD 64
      $REGBITS_ST 16
      $BYTEBOUND 1
      pick W
    case dword i32
      $MOV mov
      $MVKW dword
      $REGBITS_LD 32
      $REGBITS_ST 32
      $BYTEBOUND 3
      pick D
    case qword i64
      $MOV mov
      $MVKW qword
      $REGBITS_LD 64
      $REGBITS_ST 64
      $BYTEBOUND 7
      pick Q
    case sbyte s8
      $MOV movsx
      $MVKW byte
      $REGBITS_LD 64
      $REGBITS_ST 8
      $BYTEBOUND 0
      pick B
    case sword s16
      $MOV movsx
      $MVKW word
      $REGBITS_LD 64
      $REGBITS_ST 16
      $BYTEBOUND 1
      pick W
    case sdword s32
      $MOV movsxd
      $MVKW dword
      $REGBITS_LD 64
      $REGBITS_ST 32
      $BYTEBOUND 3
      pick Ds
    case sqword s64
      $MOV mov
      $MVKW qword
      $REGBITS_LD 64
      $REGBITS_ST 64
      $BYTEBOUND 7
      pick Q
    case float float64
      $MOV_LD movq
      $MOV movq
      $BYTEBOUND 7
      $MVKW qword
      $REGBITS_LD 64
      $REGBITS_ST 64
      pick F64
    case float32
      $MOV_LD cvtss2sd
      $MOV movd
      $BYTEBOUND 3
      $MVKW dword
      $REGBITS_LD 32
      $REGBITS_ST 32
      pick F32
    case oword bits128
      $MOV_LD movdqu
      $MOV movdqu
      $BYTEBOUND 15
      $MVKW oword
      pick B128

typespec stackreg
  select-operand
    case mctx.pos mcxtstack.pos mctx.position mcxtstack.position
      value rMCSI
      $STACK_FLOOR context.microcontext_floor
    case lwcs.pos lwcstack.pos lwcs.position lwcstack.position
      value rLWCSI
      $STACK_FLOOR context.lwcall_floor
  pick Sreg


# integers are recognized by casting to integer, then range-tested to obtain a byte width.
typespec integer
  int-operand
  pick I

typespec *const
  symbol const
  pick I

typespec *string
  string-operand
  pick I

typespec *branch-index
  symbol label-index
  pick I

typespec float
  float-operand
  pick F

typespec *fconst
  symbol fconst
  pick F

# symbolic fields are handled by looking them up in symbol tables.
typespec branch
  symbol label
  $IS_CODEBLOCK false
  pick L

typespec branch-index
  symbol label-index
  pick Li

typespec const
  symbol const
  pick C

typespec fconst
  symbol fconst
  pick Cf

typespec memblock
  symbol mem
  pick M

typespec capi
  symbol capi
  pick Cfunc

typespec tapi
  symbol tapi
  pick Tfunc

typespec none
  nullarg
  pick N

typespec string
  string-operand
  pick S

typespec codeblock
  codeblock
  $IS_CODEBLOCK true
  pick B

typespec context-property
  select-operand
    case addr1.array_bound
      value context.addr1_array_bound
      $KW dword
    case addr1.element_bound
      value context.addr1_element_bound
      $KW dword
    case addr1.index
      value context.addr1_memblock_index
      $KW dword
    case addr1.offset
      value context.addr1_offset
      $KW dword
    case addr2.array_bound
      value context.addr2_array_bound
      $KW dword
    case addr2.element_bound
      value context.addr2_element_bound
      $KW dword
    case addr2.index
      value context.addr2_memblock_index
      $KW dword
    case addr2.offset
      value context.addr2_offset
      $KW dword
    case addr3.array_bound
      value context.addr3_array_bound
      $KW dword
    case addr3.element_bound
      value context.addr3_element_bound
      $KW dword
    case addr3.index
      value context.addr3_memblock_index
      $KW dword
    case addr3.offset
      value context.addr3_offset
      $KW dword
    case addr4.array_bound
      value context.addr4_array_bound
      $KW dword
    case addr4.element_bound
      value context.addr4_element_bound
      $KW dword
    case addr4.index
      value context.addr4_memblock_index
      $KW dword
    case addr4.offset
      value context.addr4_offset
      $KW dword
  pick Ctx

# set up a prototype paramter block 
typespec comparator
  select-operand
    case < *< lt any-lt
      value jl
      $VPRED 1
      $VPREDCOMPLEMENT 6
      pick T
    case <= *<= le any-le
      value jle
      $VPRED 2
      $VPREDCOMPLEMENT 5
      pick T
    case == *== eq any-eq
      value je
      $VPRED 0
      $VPREDCOMPLEMENT 0
      pick T
    case >= *>= ge any-ge
      value jge
      $VPRED 5
      $VPREDCOMPLEMENT 2
      pick T
    case > *> gt any-gt
      value jg
      $VPRED 6
      $VPREDCOMPLEMENT 1
      pick T
    case ~= != *~= *!= neq any-neq
      value jne
      $VPRED 4
      $VPREDCOMPLEMENT 4
      pick T

    case [<] [lt] all-lt
      value jl
      $VPRED 1
      $VPREDCOMPLEMENT 6
      pick Ta
    case [<=] [le] all-le
      value jle
      $VPRED 2
      $VPREDCOMPLEMENT 5
      pick Ta
    case [==] [eq] all-eq
      value je
      $VPRED 0
      $VPREDCOMPLEMENT 0
      pick Ta
    case [>=] [ge] all-ge
      value jge
      $VPRED 5
      $VPREDCOMPLEMENT 2
      pick Ta
    case [>] [gt] all-gt
      value jg
      $VPRED 6
      $VPREDCOMPLEMENT 1
      pick Ta
    case [~=] [!=] [neq] all-neq
      value jne
      $VPRED 4
      $VPREDCOMPLEMENT 4
      pick Ta
    
    case & and
      value jnz
      pick And
    case ~& !& ~and !and nand
      value jz
      pick And
    case [&] [and]
      value jnz
      pick Anda
    case [~&] [!&] [~and] [!and] [nand]
      value jz
      pick Anda
    case | or
      value jnz
      pick Or
    case ~| !| ~or !or nor
      value jz
      pick Or
    case [|] or
      value jnz
      pick Ora
    case [~|] [!|] [~or] [!or] [nor]
      value jz
      pick Ora

typespec address-offset
  select-operand
    case addr1.offset
      $ADDRESS_REGISTER rADDR1
      $CTX_ADDRESS context.addr1
      $CTX_ADDRESS_BOUND context.addr1_array_bound
    case addr2.offset
      $ADDRESS_REGISTER rADDR2
      $CTX_ADDRESS context.addr2
      $CTX_ADDRESS_BOUND context.addr2_array_bound
    case addr3.offset
      $ADDRESS_REGISTER rADDR3
      $CTX_ADDRESS context.addr3
      $CTX_ADDRESS_BOUND context.addr3_array_bound
    case addr4.offset
      $ADDRESS_REGISTER rADDR4
      $CTX_ADDRESS context.addr4
      $CTX_ADDRESS_BOUND context.addr4_array_bound
  pick O

typespec xmmx
  select-operand
    case x0 xmm0 xa xA
      value xA
    case x1 xmm1 xb xB
      value xB
    case x2 xmm2 xc xC
      value xC
    case x3 xmm3 xd xD
      value xD
    case x4 xmm4 xe xE
      value xE
    case x5 xmm5 xf xF
      value xF
    case x6 xmm6 xg xG
      value xG
    case x7 xmm7 xh xH
      value xH
    case x8 xmm8 xi xI
      value xI
    case x9 xmm9 xj xJ
      value xJ
    case x10 xmm10 xk xK
      value xK
    case x11 xmm11 xl xL
      value xL
    case x12 xmm12 xm xM
      value xM
    case x13 xmm13 xn xN
      value xN
  pick X

typespec xmmx.f64
  select-operand
    case x0 xmm0 xa xA
      value xA
    case x1 xmm1 xb xB
      value xB
    case x2 xmm2 xc xC
      value xC
    case x3 xmm3 xd xD
      value xD
    case x4 xmm4 xe xE
      value xE
    case x5 xmm5 xf xF
      value xF
    case x6 xmm6 xg xG
      value xG
    case x7 xmm7 xh xH
      value xH
    case x8 xmm8 xi xI
      value xI
    case x9 xmm9 xj xJ
      value xJ
    case x10 xmm10 xk xK
      value xK
    case x11 xmm11 xl xL
      value xL
    case x12 xmm12 xm xM
      value xM
    case x13 xmm13 xn xN
      value xN
  pick X

typespec xmmx-f32
  select-operand
    case x0.f32 xmm0.f32 xa.f32 xA.f32
      value xA
    case x1.f32 xmm1.f32 xb.f32 xB.f32
      value xB
    case x2.f32 xmm2.f32 xc.f32 xC.f32
      value xC
    case x3.f32 xmm3.f32 xd.f32 xD.f32
      value xD
    case x4.f32 xmm4.f32 xe.f32 xE.f32
      value xE
    case x5.f32 xmm5.f32 xf.f32 xF.f32
      value xF
    case x6.f32 xmm6.f32 xg.f32 xG.f32
      value xG
    case x7.f32 xmm7.f32 xh.f32 xH.f32
      value xH
    case x8.f32 xmm8.f32 xi.f32 xI.f32
      value xI
    case x9.f32 xmm9.f32 xj.f32 xJ.f32
      value xJ
    case x10.f32 xmm10.f32 xk.f32 xK.f32
      value xK
    case x11.f32 xmm11.f32 xl.f32 xL.f32
      value xL
    case x12.f32 xmm12.f32 xm.f32 xM.f32
      value xM
    case x13.f32 xmm13.f32 xn.f32 xN.f32
      value xN
  pick X.f32

typespec xmmx-int
  select-operand
    case x0.int xmm0.int xa.int xA.int
      value xA
    case x1.int xmm1.int xb.int xB.int
      value xB
    case x2.int xmm2.int xc.int xC.int
      value xC
    case x3.int xmm3.int xd.int xD.int
      value xD
    case x4.int xmm4.int xe.int xE.int
      value xE
    case x5.int xmm5.int xf.int xF.int
      value xF
    case x6.int xmm6.int xg.int xG.int
      value xG
    case x7.int xmm7.int xh.int xH.int
      value xH
    case x8.int xmm8.int xi.int xI.int
      value xI
    case x9.int xmm9.int xj.int xJ.int
      value xJ
    case x10.int xmm10.int xk.int xK.int
      value xK
    case x11.int xmm11.int xl.int xL.int
      value xL
    case x12.int xmm12.int xm.int xM.int
      value xM
    case x13.int xmm13.int xn.int xN.int
      value xN
  pick X.int

typespec xmmx-full
  select-operand
    case xx0 xxmm0 xxa xxA
      value xA
    case xx1 xxmm1 xxb xxB
      value xB
    case xx2 xxmm2 xxc xxC
      value xC
    case xx3 xxmm3 xxd xxD
      value xD
    case xx4 xxmm4 xxe xxE
      value xE
    case xx5 xxmm5 xxf xxF
      value xF
    case xx6 xxmm6 xxg xxG
      value xG
    case xx7 xxmm7 xxh xxH
      value xH
    case xx8 xxmm8 xxi xxI
      value xI
    case xx9 xxmm9 xxj xxJ
      value xJ
    case xx10 xxmm10 xxk xxK
      value xK
    case xx11 xxmm11 xxl xxL
      value xL
    case xx12 xxmm12 xxm xxM
      value xM
    case xx13 xxmm13 xxn xxN
      value xN
  pick Xx

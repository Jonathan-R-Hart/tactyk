
typespec stash-addr
  select-operand
    case s-addr1 stash-addr1
      value addr1
    case s-addr2 stash-addr2
      value addr2
    case s-addr3 stash-addr3
      value addr3
    case s-addr4 stash-addr4
      value addr4
  pick Sa

typespec stash-item
  select-operand
    case sa sA sa.int sA.int
      value al
    case sb sB sb.int sB.int
      value bl
    case sc sC sc.int sC.int
      value cl
    case sd sD sd.int sD.int
      value dl
    case se sE se.int sE.int
      value el
    
    case sf sF sf.int sF.int
      value fl
    case sg sG sg.int sG.int
      value gl
    case sh sH sh.int sH.int
      value hl
    case si sI si.int sI.int
      value il
    case sj sJ sj.int sJ.int
      value jl

    case sk sK sk.int sK.int
      value kl
    case sl sL sl.int sL.int
      value ll
    case sm sM sm.int sM.int
      value ml
    case sn sN sn.int sN.int
      value nl
    case so sO so.int sO.int
      value ol

    case sp sP sp.int sP.int
      value pl
    case sq sQ sq.int sQ.int
      value ql
    case sr sR sr.int sR.int
      value rl
    case ss sS ss.int sS.int
      value sl
    case st sT st.int sT.int
      value tl

    case su sU su.int sU.int
      value ul
    case sv sV sv.int sV.int
      value vl
    case sw sW sw.int sW.int
      value wl
    case sx sX sx.int sX.int
      value xl
    case sy sY sy.int sY.int
      value yl
    case sz sZ sz.int sZ.int
      value zl
    
    case s26 s26.int
      value s26
    case s27 s27.int
      value s27
    case s28 s28.int
      value s28
    case s29 s29.int
      value s29
    case s30 s30.int
      value s30
    case s31 s31.int
      value s31
  pick Si

typespec stash-item-small
  select-operand
    case sal sAl sal.int sAl.int
      value al
    case sbl sBl sbl.int sBl.int
      value bl
    case scl sCl scl.int sCl.int
      value cl
    case sdl sDl sdl.int sDl.int
      value dl
    case sel sEl sel.int sEl.int
      value el
    
    case sfl sFl sfl.int sFl.int
      value fl
    case sgl sGl sgl.int sGl.int
      value gl
    case shl sHl shl.int sHl.int
      value hl
    case sil sIl sil.int sIl.int
      value il
    case sjl sJl sjl.int sJl.int
      value jl

    case skl sKl skl.int sKl.int
      value kl
    case sll sLl sll.int sLl.int
      value ll
    case sml sMl sml.int sMl.int
      value ml
    case snl sNl snl.int sNl.int
      value nl
    case sol sOl sol.int sOl.int
      value ol

    case spl sPl spl.int sPl.int
      value pl
    case sql sQl sql.int sQl.int
      value ql
    case srl sRl srl.int sRl.int
      value rl
    case ssl sSl ssl.int sSl.int
      value sl
    case stl sTl stl.int sTl.int
      value tl

    case sul sUl sul.int sUl.int
      value ul
    case svl sVl svl.int sVl.int
      value vl
    case swl sWl swl.int sWl.int
      value wl
    case sxl sXl sxl.int sXl.int
      value xl
    case syl sYl syl.int sYl.int
      value yl
    case szl sZl szl.int sZl.int
      value zl
    
    case s26l
      value s26l s26l.int
    case s27l
      value s27l s27l.int
    case s28l
      value s28l s28l.int
    case s29l
      value s29l s29l.int
    case s30l
      value s30l s30l.int
    case s31l
      value s31l s31l.int
    
    case sah sAh sah.int sAh.int
      value ah
    case sbh sBh sbh.int sBh.int
      value bh
    case sch sCh sch.int sCh.int
      value ch
    case sdh sDh sdh.int sDh.int
      value dh
    case seh sEh seh.int sEh.int
      value eh
    
    case sfh sFh sfh.int sFh.int
      value fh
    case sgh sGh sgh.int sGh.int
      value gh
    case shh sHh shh.int sHh.int
      value hh
    case sih sIh sih.int sIh.int
      value ih
    case sjh sJh sjh.int sJh.int
      value jh

    case skh sKh skh.int sKh.int
      value kh
    case slh sLh slh.int sLh.int
      value lh
    case smh sMh smh.int sMh.int
      value mh
    case snh sNh snh.int sNh.int
      value nh
    case soh sOh soh.int sOh.int
      value oh

    case sph sPh sph.int sPh.int
      value ph
    case sqh sQh sqh.int sQh.int
      value qh
    case srh sRh srh.int sRh.int
      value rh
    case ssh sSh ssh.int sSh.int
      value sh
    case sth sTh sth.int sTh.int
      value th

    case suh sUh suh.int sUh.int
      value uh
    case svh sVh svh.int sVh.int
      value vh
    case swh sWh swh.int sWh.int
      value wh
    case sxh sXh sxh.int sXh.int
      value xh
    case syh sYh syh.int sYh.int
      value yh
    case szh sZh szh.int sZh.int
      value zh
    
    case s26h s26h.int
      value s26h
    case s27h s27h.int
      value s27h
    case s28h s28h.int
      value s28h
    case s29h s29h.int
      value s29h
    case s30h s30h.int
      value s30h
    case s31h s31h.int
      value s31h
  pick Sis

typespec fstash-item
  select-operand
    case saf sAf sa.f64 sA.f64
      value al
    case sbf sBf sb.f64 sB.f64
      value bl
    case scf sCf sc.f64 sC.f64
      value cl
    case sdf sDf sd.f64 sD.f64
      value dl
    case sef sEf se.f64 sE.f64
      value el
    
    case sff sFf sf.f64 sF.f64
      value fl
    case sgf sGf sg.f64 sG.f64
      value gl
    case shf sHf sh.f64 sH.f64
      value hl
    case sif sIf si.f64 sI.f64
      value il
    case sjf sJf sj.f64 sJ.f64
      value jl

    case skf sKf sk.f64 sK.f64
      value kl
    case slf sLf sl.f64 sL.f64
      value ll
    case smf sMf sm.f64 sM.f64
      value ml
    case snf sNf sn.f64 sN.f64
      value nl
    case sof sOf so.f64 sO.f64
      value ol

    case spf sPf sp.f64 sP.f64
      value pl
    case sqf sQf sq.f64 sQ.f64
      value ql
    case srf sRf sr.f64 sR.f64
      value rl
    case ssf sSf ss.f64 sS.f64
      value sl
    case stf sTf st.f64 sT.f64
      value tl

    case suf sUf su.f64 sU.f64
      value ul
    case svf sVf sv.f64 sV.f64
      value vl
    case swf sWf sw.f64 sW.f64
      value wl
    case sxf sXf sx.f64 sX.f64
      value xl
    case syf sYf sy.f64 sY.f64
      value yl
    case szf sZf sz.f64 sZ.f64
      value zl
    
    case s26f s26.f64
      value s26
    case s27f s27.f64
      value s27
    case s28f s28.f64
      value s28
    case s29f s29.f64
      value s29
    case s30f s30.f64
      value s30
    case s31f s31.f64
      value s31
  pick Sif

typespec fstash-item-small
  select-operand
    case salf sAlf sal.f64 sAl.f64
      value al
    case sblf sBlf sbl.f64 sBl.f64
      value bl
    case sclf sClf scl.f64 sCl.f64
      value cl
    case sdlf sDlf sdl.f64 sDl.f64
      value dl
    case self sElf sel.f64 sEl.f64
      value el
    
    case sflf sFlf sfl.f64 sFl.f64
      value fl
    case sglf sGlf sgl.f64 sGl.f64
      value gl
    case shlf sHlf shl.f64 sHl.f64
      value hl
    case silf sIlf sil.f64 sIl.f64
      value il
    case sjlf sJlf sjl.f64 sJl.f64
      value jl

    case sklf sKlf skl.f64 sKl.f64
      value kl
    case sllf sLlf sll.f64 sLl.f64
      value ll
    case smlf sMlf sml.f64 sMl.f64
      value ml
    case snlf sNlf snl.f64 sNl.f64
      value nl
    case solf sOlf sol.f64 sOl.f64
      value ol

    case splf sPlf spl.f64 sPl.f64
      value pl
    case sqlf sQlf sql.f64 sQl.f64
      value ql
    case srlf sRlf srl.f64 sRl.f64
      value rl
    case sslf sSlf ssl.f64 sSl.f64
      value sl
    case stlf sTlf stl.f64 sTl.f64
      value tl

    case sulf sUlf sul.f64 sUl.f64
      value ul
    case svlf sVlf svl.f64 sVl.f64
      value vl
    case swlf sWlf swl.f64 sWl.f64
      value wl
    case sxlf sXlf sxl.f64 sXl.f64
      value xl
    case sylf sYlf syl.f64 sYl.f64
      value yl
    case szlf sZlf szl.f64 sZl.f64
      value zl
    
    case s26lf s26l.f64
      value s26l
    case s27lf s27l.f64
      value s27l
    case s28lf s28l.f64
      value s28l
    case s29lf s29l.f64
      value s29l
    case s30lf s30l.f64
      value s30l
    case s31lf s31l.f64
      value s31l
    
    case sahf sAhf sah.f64 sAh.f64
      value ah
    case sbhf sBhf sbh.f64 sBh.f64
      value bh
    case schf sChf sch.f64 sCh.f64
      value ch
    case sdhf sDhf sdh.f64 sDh.f64
      value dh
    case sehf sEhf seh.f64 sEh.f64
      value eh
    
    case sfhf sFhf sfh.f64 sFh.f64
      value fh
    case sghf sGhf sgh.f64 sGh.f64
      value gh
    case shhf sHhf shh.f64 sHh.f64
      value hh
    case sihf sIhf sih.f64 sIh.f64
      value ih
    case sjhf sJhf sjh.f64 sJh.f64
      value jh

    case skhf sKhf skh.f64 sKh.f64
      value kh
    case slhf sLhf slh.f64 sLh.f64
      value lh
    case smhf sMhf smh.f64 sMh.f64
      value mh
    case snhf sNhf snh.f64 sNh.f64
      value nh
    case sohf sOhf soh.f64 sOh.f64
      value oh

    case sphf sPhf sph.f64 sPh.f64
      value ph
    case sqhf sQhf sqh.f64 sQh.f64
      value qh
    case srhf sRhf srh.f64 sRh.f64
      value rh
    case sshf sShf ssh.f64 sSh.f64
      value sh
    case sthf sThf sth.f64 sTh.f64
      value th

    case suhf sUhf suh.f64 sUh.f64
      value uh
    case svhf sVhf svh.f64 sVh.f64
      value vh
    case swhf sWhf swh.f64 sWh.f64
      value wh
    case sxhf sXhf sxh.f64 sXh.f64
      value xh
    case syhf sYhf syh.f64 sYh.f64
      value yh
    case szhf sZhf szh.f64 sZh.f64
      value zh
    
    case s26hf s26h.f64
      value s26h
    case s27hf s27h.f64
      value s27h
    case s28hf s28h.f64
      value s28h
    case s29hf s29h.f64
      value s29h
    case s30hf s30h.f64
      value s30h
    case s31hf s31h.f64
      value s31h
  pick Sifs


typespec f32stash-item
  select-operand
    case sa.0.f32 sA.0.f32
      value al.0
    case sb.0.f32 sB.0.f32
      value bl.0
    case sc.0.f32 sC.0.f32
      value cl.0
    case sd.0.f32 sD.0.f32
      value dl.0
    case se.0.f32 sE.0.f32
      value el.0
    
    case sf.0.f32 sF.0.f32
      value fl.0
    case sg.0.f32 sG.0.f32
      value gl.0
    case sh.0.f32 sH.0.f32
      value hl.0
    case si.0.f32 sI.0.f32
      value il.0
    case sj.0.f32 sJ.0.f32
      value jl.0

    case sk.0.f32 sK.0.f32
      value kl.0
    case sl.0.f32 sL.0.f32
      value ll.0
    case sm.0.f32 sM.0.f32
      value ml.0
    case sn.0.f32 sN.0.f32
      value nl.0
    case so.0.f32 sO.0.f32
      value ol.0

    case sp.0.f32 sP.0.f32
      value pl.0
    case sq.0.f32 sQ.0.f32
      value ql.0
    case sr.0.f32 sR.0.f32
      value rl.0
    case ss.0.f32 sS.0.f32
      value sl.0
    case st.0.f32 sT.0.f32
      value tl.0

    case su.0.f32 sU.0.f32
      value ul.0
    case sv.0.f32 sV.0.f32
      value vl.0
    case sw.0.f32 sW.0.f32
      value wl.0
    case sx.0.f32 sX.0.f32
      value xl.0
    case sy.0.f32 sY.0.f32
      value yl.0
    case sz.0.f32 sZ.0.f32
      value zl.0
    
    case s26.0.f32
      value s26.0
    case s27.0.f32
      value s27.0
    case s28.0.f32
      value s28.0
    case s29.0.f32
      value s29.0
    case s30.0.f32
      value s30.0
    case s31.0.f32
      value s31.0

    case sa.1.f32 sA.1.f32
      value al.1
    case sb.1.f32 sB.1.f32
      value bl.1
    case sc.1.f32 sC.1.f32
      value cl.1
    case sd.1.f32 sD.1.f32
      value dl.1
    case se.1.f32 sE.1.f32
      value el.1
    
    case sf.1.f32 sF.1.f32
      value fl.1
    case sg.1.f32 sG.1.f32
      value gl.1
    case sh.1.f32 sH.1.f32
      value hl.1
    case si.1.f32 sI.1.f32
      value il.1
    case sj.1.f32 sJ.1.f32
      value jl.1

    case sk.1.f32 sK.1.f32
      value kl.1
    case sl.1.f32 sL.1.f32
      value ll.1
    case sm.1.f32 sM.1.f32
      value ml.1
    case sn.1.f32 sN.1.f32
      value nl.1
    case so.1.f32 sO.1.f32
      value ol.1

    case sp.1.f32 sP.1.f32
      value pl.1
    case sq.1.f32 sQ.1.f32
      value ql.1
    case sr.1.f32 sR.1.f32
      value rl.1
    case ss.1.f32 sS.1.f32
      value sl.1
    case st.1.f32 sT.1.f32
      value tl.1

    case su.1.f32 sU.1.f32
      value ul.1
    case sv.1.f32 sV.1.f32
      value vl.1
    case sw.1.f32 sW.1.f32
      value wl.1
    case sx.1.f32 sX.1.f32
      value xl.1
    case sy.1.f32 sY.1.f32
      value yl.1
    case sz.1.f32 sZ.1.f32
      value zl.1
    
    case s26.1.f32
      value s26.1
    case s27.1.f32
      value s27.1
    case s28.1.f32
      value s28.1
    case s29.1.f32
      value s29.1
    case s30.1.f32
      value s30.1
    case s31.1.f32
      value s31.1

    case sa.2.f32 sA.2.f32
      value al.2
    case sb.2.f32 sB.2.f32
      value bl.2
    case sc.2.f32 sC.2.f32
      value cl.2
    case sd.2.f32 sD.2.f32
      value dl.2
    case se.2.f32 sE.2.f32
      value el.2
    
    case sf.2.f32 sF.2.f32
      value fl.2
    case sg.2.f32 sG.2.f32
      value gl.2
    case sh.2.f32 sH.2.f32
      value hl.2
    case si.2.f32 sI.2.f32
      value il.2
    case sj.2.f32 sJ.2.f32
      value jl.2

    case sk.2.f32 sK.2.f32
      value kl.2
    case sl.2.f32 sL.2.f32
      value ll.2
    case sm.2.f32 sM.2.f32
      value ml.2
    case sn.2.f32 sN.2.f32
      value nl.2
    case so.2.f32 sO.2.f32
      value ol.2

    case sp.2.f32 sP.2.f32
      value pl.2
    case sq.2.f32 sQ.2.f32
      value ql.2
    case sr.2.f32 sR.2.f32
      value rl.2
    case ss.2.f32 sS.2.f32
      value sl.2
    case st.2.f32 sT.2.f32
      value tl.2

    case su.2.f32 sU.2.f32
      value ul.2
    case sv.2.f32 sV.2.f32
      value vl.2
    case sw.2.f32 sW.2.f32
      value wl.2
    case sx.2.f32 sX.2.f32
      value xl.2
    case sy.2.f32 sY.2.f32
      value yl.2
    case sz.2.f32 sZ.2.f32
      value zl.2
    
    case s26.2.f32
      value s26.2
    case s27.2.f32
      value s27.2
    case s28.2.f32
      value s28.2
    case s29.2.f32
      value s29.2
    case s30.2.f32
      value s30.2
    case s31.2.f32
      value s31.2

    case sa.3.f32 sA.3.f32
      value al.3
    case sb.3.f32 sB.3.f32
      value bl.3
    case sc.3.f32 sC.3.f32
      value cl.3
    case sd.3.f32 sD.3.f32
      value dl.3
    case se.3.f32 sE.3.f32
      value el.3
    
    case sf.3.f32 sF.3.f32
      value fl.3
    case sg.3.f32 sG.3.f32
      value gl.3
    case sh.3.f32 sH.3.f32
      value hl.3
    case si.3.f32 sI.3.f32
      value il.3
    case sj.3.f32 sJ.3.f32
      value jl.3

    case sk.3.f32 sK.3.f32
      value kl.3
    case sl.3.f32 sL.3.f32
      value ll.3
    case sm.3.f32 sM.3.f32
      value ml.3
    case sn.3.f32 sN.3.f32
      value nl.3
    case so.3.f32 sO.3.f32
      value ol.3

    case sp.3.f32 sP.3.f32
      value pl.3
    case sq.3.f32 sQ.3.f32
      value ql.3
    case sr.3.f32 sR.3.f32
      value rl.3
    case ss.3.f32 sS.3.f32
      value sl.3
    case st.3.f32 sT.3.f32
      value tl.3

    case su.3.f32 sU.3.f32
      value ul.3
    case sv.3.f32 sV.3.f32
      value vl.3
    case sw.3.f32 sW.3.f32
      value wl.3
    case sx.3.f32 sX.3.f32
      value xl.3
    case sy.3.f32 sY.3.f32
      value yl.3
    case sz.3.f32 sZ.3.f32
      value zl.3
    
    case s26.3.f32
      value s26.3
    case s27.3.f32
      value s27.3
    case s28.3.f32
      value s28.3
    case s29.3.f32
      value s29.3
    case s30.3.f32
      value s30.3
    case s31.3.f32
      value s31.3
  pick Sif32



instruction block-stash
  operand
    type block-quantity
  opt-operand
    select-operand
      case swap
        pick W
  operand
    type data xmmx stash-item
    $DEST $VALUE
  operand
    type data xmmx stash-item
    $SRC $VALUE
  select-template
    case BqsSiD
      vcode $QTY
        1 mov gs:[ (microcontext.$DEST+0 )%microcontext_size + random_const_GS], $SRC~0
        2 mov gs:[ (microcontext.$DEST+8 )%microcontext_size + random_const_GS], $SRC~1
        3 mov gs:[ (microcontext.$DEST+16)%microcontext_size + random_const_GS], $SRC~2
        4 mov gs:[ (microcontext.$DEST+24)%microcontext_size + random_const_GS], $SRC~3
        5 mov gs:[ (microcontext.$DEST+32)%microcontext_size + random_const_GS], $SRC~4
        6 mov gs:[ (microcontext.$DEST+40)%microcontext_size + random_const_GS], $SRC~5
    case BqsDSi
      vcode $QTY
        1 mov $DEST~0, gs:[ (microcontext.$SRC+0 )%microcontext_size + random_const_GS]
        2 mov $DEST~1, gs:[ (microcontext.$SRC+8 )%microcontext_size + random_const_GS]
        3 mov $DEST~2, gs:[ (microcontext.$SRC+16)%microcontext_size + random_const_GS]
        4 mov $DEST~3, gs:[ (microcontext.$SRC+24)%microcontext_size + random_const_GS]
        5 mov $DEST~4, gs:[ (microcontext.$SRC+32)%microcontext_size + random_const_GS]
        6 mov $DEST~5, gs:[ (microcontext.$SRC+40)%microcontext_size + random_const_GS]
    case BqsSiX BqlSiX
      vcode $QTY
        1 movdqu gs:[ (microcontext.$DEST+0  )%microcontext_size + random_const_GS], $SRC~0
        2 movdqu gs:[ (microcontext.$DEST+16 )%microcontext_size + random_const_GS], $SRC~1
        3 movdqu gs:[ (microcontext.$DEST+32 )%microcontext_size + random_const_GS], $SRC~2
        4 movdqu gs:[ (microcontext.$DEST+48 )%microcontext_size + random_const_GS], $SRC~3
        5 movdqu gs:[ (microcontext.$DEST+64 )%microcontext_size + random_const_GS], $SRC~4
        6 movdqu gs:[ (microcontext.$DEST+80 )%microcontext_size + random_const_GS], $SRC~5
        7 movdqu gs:[ (microcontext.$DEST+96 )%microcontext_size + random_const_GS], $SRC~6
        8 movdqu gs:[ (microcontext.$DEST+112)%microcontext_size + random_const_GS], $SRC~7
        9 movdqu gs:[ (microcontext.$DEST+128)%microcontext_size + random_const_GS], $SRC~8
        10 movdqu gs:[ (microcontext.$DEST+144)%microcontext_size + random_const_GS], $SRC~9
        11 movdqu gs:[ (microcontext.$DEST+160)%microcontext_size + random_const_GS], $SRC~10
        12 movdqu gs:[ (microcontext.$DEST+176)%microcontext_size + random_const_GS], $SRC~11
        13 movdqu gs:[ (microcontext.$DEST+192)%microcontext_size + random_const_GS], $SRC~12
        14 movdqu gs:[ (microcontext.$DEST+208)%microcontext_size + random_const_GS], $SRC~13
    case BqsXSi BqlXSi
      vcode $QTY
        1 movdqu $DEST~0, gs:[ (microcontext.$SRC+0  )%microcontext_size + random_const_GS]
        2 movdqu $DEST~1, gs:[ (microcontext.$SRC+16 )%microcontext_size + random_const_GS]
        3 movdqu $DEST~2, gs:[ (microcontext.$SRC+32 )%microcontext_size + random_const_GS]
        4 movdqu $DEST~3, gs:[ (microcontext.$SRC+48 )%microcontext_size + random_const_GS]
        5 movdqu $DEST~4, gs:[ (microcontext.$SRC+64 )%microcontext_size + random_const_GS]
        6 movdqu $DEST~5, gs:[ (microcontext.$SRC+80 )%microcontext_size + random_const_GS]
        7 movdqu $DEST~6, gs:[ (microcontext.$SRC+96 )%microcontext_size + random_const_GS]
        8 movdqu $DEST~7, gs:[ (microcontext.$SRC+112)%microcontext_size + random_const_GS]
        9 movdqu $DEST~8, gs:[ (microcontext.$SRC+128)%microcontext_size + random_const_GS]
        10 movdqu $DEST~9, gs:[ (microcontext.$SRC+144)%microcontext_size + random_const_GS]
        11 movdqu $DEST~10, gs:[ (microcontext.$SRC+160)%microcontext_size + random_const_GS]
        12 movdqu $DEST~11, gs:[ (microcontext.$SRC+176)%microcontext_size + random_const_GS]
        13 movdqu $DEST~12, gs:[ (microcontext.$SRC+192)%microcontext_size + random_const_GS]
        14 movdqu $DEST~13, gs:[ (microcontext.$SRC+208)%microcontext_size + random_const_GS]
    case BqsWSiD BqlWSiD
      vcode $QTY
        1 xchg gs:[ (microcontext.$DEST+0 )%microcontext_size + random_const_GS], $SRC~0
        2 xchg gs:[ (microcontext.$DEST+8 )%microcontext_size + random_const_GS], $SRC~1
        3 xchg gs:[ (microcontext.$DEST+16)%microcontext_size + random_const_GS], $SRC~2
        4 xchg gs:[ (microcontext.$DEST+24)%microcontext_size + random_const_GS], $SRC~3
        5 xchg gs:[ (microcontext.$DEST+32)%microcontext_size + random_const_GS], $SRC~4
        6 xchg gs:[ (microcontext.$DEST+40)%microcontext_size + random_const_GS], $SRC~5
    case BqsWDSi BqlWDSi
      vcode $QTY
        1 xchg $DEST~0, gs:[ (microcontext.$SRC+0 )%microcontext_size + random_const_GS]
        2 xchg $DEST~1, gs:[ (microcontext.$SRC+8 )%microcontext_size + random_const_GS]
        3 xchg $DEST~2, gs:[ (microcontext.$SRC+16)%microcontext_size + random_const_GS]
        4 xchg $DEST~3, gs:[ (microcontext.$SRC+24)%microcontext_size + random_const_GS]
        5 xchg $DEST~4, gs:[ (microcontext.$SRC+32)%microcontext_size + random_const_GS]
        6 xchg $DEST~5, gs:[ (microcontext.$SRC+40)%microcontext_size + random_const_GS]
    case BqsWSiX BqsWXSi BqlWSiX BqlWXSi
      select-template
        case BqsWXSi BqlWXSi
        case BqsWSiX BqlWSiX
          $TEMP $SRC
          $SRC $DEST
          $DEST $TEMP
      sub tmp xa
      sub tmp xb
      vcode $QTY
        1 movdqu xTEMPA, gs:[ (microcontext.$SRC+0  )%microcontext_size + random_const_GS]
        2 movdqu xTEMPB, gs:[ (microcontext.$SRC+16 )%microcontext_size + random_const_GS]
        1 movdqu gs:[ (microcontext.$SRC+0  )%microcontext_size + random_const_GS], $DEST~0
        2 movdqu gs:[ (microcontext.$SRC+16 )%microcontext_size + random_const_GS], $DEST~1
        1 movdqa $DEST~0, xTEMPA
        2 movdqa $DEST~1, xTEMPB
        3 movdqu xTEMPA, gs:[ (microcontext.$SRC+32  )%microcontext_size + random_const_GS]
        4 movdqu xTEMPB, gs:[ (microcontext.$SRC+48  )%microcontext_size + random_const_GS]
        3 movdqu gs:[ (microcontext.$SRC+32 )%microcontext_size + random_const_GS], $DEST~2
        4 movdqu gs:[ (microcontext.$SRC+48 )%microcontext_size + random_const_GS], $DEST~3
        3 movdqa $DEST~2, xTEMPA
        4 movdqa $DEST~3, xTEMPB
        5 movdqu xTEMPA, gs:[ (microcontext.$SRC+64 )%microcontext_size + random_const_GS]
        6 movdqu xTEMPB, gs:[ (microcontext.$SRC+80 )%microcontext_size + random_const_GS]
        5 movdqu gs:[ (microcontext.$SRC+64 )%microcontext_size + random_const_GS], $DEST~4
        6 movdqu gs:[ (microcontext.$SRC+80 )%microcontext_size + random_const_GS], $DEST~5
        5 movdqa $DEST~4, xTEMPA
        6 movdqa $DEST~5, xTEMPB
        7 movdqu xTEMPA, gs:[ (microcontext.$SRC+96 )%microcontext_size + random_const_GS]
        8 movdqu xTEMPB, gs:[ (microcontext.$SRC+112)%microcontext_size + random_const_GS]
        7 movdqu gs:[ (microcontext.$SRC+96 )%microcontext_size + random_const_GS], $DEST~6
        8 movdqu gs:[ (microcontext.$SRC+112)%microcontext_size + random_const_GS], $DEST~7
        7 movdqa $DEST~6, xTEMPA
        8 movdqa $DEST~7, xTEMPB
        9 movdqu xTEMPA, gs:[ (microcontext.$SRC+128)%microcontext_size + random_const_GS]
        10 movdqu xTEMPB, gs:[ (microcontext.$SRC+144)%microcontext_size + random_const_GS]
        9 movdqu gs:[ (microcontext.$SRC+128)%microcontext_size + random_const_GS], $DEST~8
        10 movdqu gs:[ (microcontext.$SRC+144)%microcontext_size + random_const_GS], $DEST~9
        9 movdqa $DEST~8, xTEMPA
        10 movdqa $DEST~9, xTEMPB
        11 movdqu xTEMPA, gs:[ (microcontext.$SRC+160)%microcontext_size + random_const_GS]
        12 movdqu xTEMPB, gs:[ (microcontext.$SRC+176)%microcontext_size + random_const_GS]
        11 movdqu gs:[ (microcontext.$SRC+160)%microcontext_size + random_const_GS], $DEST~10
        12 movdqu gs:[ (microcontext.$SRC+176)%microcontext_size + random_const_GS], $DEST~11
        11 movdqa $DEST~10, xTEMPA
        12 movdqa $DEST~11, xTEMPB
        13 movdqu xTEMPA, gs:[ (microcontext.$SRC+192)%microcontext_size + random_const_GS]
        14 movdqu xTEMPB, gs:[ (microcontext.$SRC+208)%microcontext_size + random_const_GS]
        13 movdqu gs:[ (microcontext.$SRC+192)%microcontext_size + random_const_GS], $DEST~12
        14 movdqu gs:[ (microcontext.$SRC+208)%microcontext_size + random_const_GS], $DEST~13
        13 movdqa $DEST~12, xTEMPA
        14 movdqa $DEST~13, xTEMPB
        1 $RESET_TEMP

instruction stash
  composite 16 permute-code no-duplicates
    opt-operand
      select-operand
        case swap
          pick W
    operand
      type data xmmx stash-item stash-item-small
      $DEST $VALUE
    operand
      type data xmmx stash-item stash-item-small
      $SRC $VALUE
    select-template
      case SiD SisD
        code
          mov gs:[microcontext.$DEST+random_const_GS], $SRC
      case DSi DSis
        code
          mov $DEST, gs:[microcontext.$SRC+random_const_GS]
      case SisX
        code
          movq gs:[microcontext.$DEST+random_const_GS], $SRC
      case XSis
        code
          movq $DEST, gs:[microcontext.$SRC+random_const_GS]
      case SiX
        code
          movdqu gs:[microcontext.$DEST+random_const_GS], $SRC
      case XSi
        code
          movdqu $DEST, gs:[microcontext.$SRC+random_const_GS]
      case SiSi
        sub tmp xa
        code
          movdqu xTEMPA, gs:[microcontext.$SRC+random_const_GS]
          movdqu gs:[microcontext.$DEST+random_const_GS], xTEMPA
          pxor xTEMPA, xTEMPA
      case SisSis SisSi SiSis
        sub tmp ra
        code
          mov rTEMPA, gs:[microcontext.$SRC+random_const_GS]
          mov gs:[microcontext.$DEST+random_const_GS], rTEMPA
          xor rTEMPA, rTEMPA
      case WSiD WSisD
        code
          xchg gs:[microcontext.$DEST+random_const_GS], $SRC
      case WDSi WDSis
        code
          xchg $DEST, gs:[microcontext.$SRC+random_const_GS]
      case WSisX
        sub tmp xa
        code
          movq xTEMPA, $SRC
          movq $SRC, gs:[microcontext.$DEST+random_const_GS]
          movq gs:[microcontext.$DEST+random_const_GS], xTEMPA
          pxor xTEMPA, xTEMPA
      case WXSis
        sub tmp xa
        code
          movq xTEMPA, $DEST
          movq $DEST, gs:[microcontext.$SRC+random_const_GS]
          movq gs:[microcontext.$SRC+random_const_GS], xTEMPA
          pxor xTEMPA, xTEMPA
      case WSiX
        sub tmp xa
        code
          movdqu xTEMPA, $SRC
          movdqu $SRC, gs:[microcontext.$DEST+random_const_GS]
          movdqu gs:[microcontext.$DEST+random_const_GS], xTEMPA
          pxor xTEMPA, xTEMPA
      case WXSi
        sub tmp xa
        code
          movdqu xTEMPA, $DEST
          movdqu $DEST, gs:[microcontext.$SRC+random_const_GS]
          movdqu gs:[microcontext.$SRC+random_const_GS], xTEMPA
          pxor xTEMPA, xTEMPA
      case WSiSi
        sub tmp xa
        sub tmp xb
        code
          movdqu xTEMPA, gs:[microcontext.$SRC+random_const_GS]
          movdqu xTEMPB, gs:[microcontext.$DEST+random_const_GS]
          movdqu gs:[microcontext.$SRC+random_const_GS], xTEMPB
          movdqu gs:[microcontext.$DEST+random_const_GS], xTEMPA
          pxor xTEMPA, xTEMPA
          pxor xTEMPB, xTEMPB
      case WSisSis WSisSi WSiSis
        sub tmp ra
        code
          mov rTEMPA, gs:[microcontext.$SRC+random_const_GS]
          xchg rTEMPA, gs:[microcontext.$DEST+random_const_GS]
          mov gs:[microcontext.$SRC+random_const_GS], rTEMPA
          xor rTEMPA, rTEMPA
      #case SaA
      #  code
      #    mov rTEMPA, fs:[$CONTEXT_ADDR + random_const_FS]
      #    mov gs:[microcontext.$DEST+random_const_GS], rTEMPA
      #    negate rTEMPA
      #    add rTEMPA, $SRC
      #    mov dword gs:[microcontext.$DEST+20+random_const_GS], %[$SRC]_32
      #    mov rTEMPC, fs:[$CTX_ELEMENT_BOUND + random_const_FS]
      #    mov gs:[microcontext.$DEST+8+random_const_GS], rTEMPC
      #    mov rTEMPD_32, dword fs:[$CTX_MEMBLOCK_INDEX + random_const_FS]
      #    mov dword gs:[microcontext.$DEST+16+random_const_GS], rTEMPD_32
      #    xor rTEMPA, rTEMPA
      #    xor rTEMPC, rTEMPC
      #    xor rTEMPD, rTEMPD
      #case ASa
      #  code
      #    mov rTEMPA, gs:[microcontext.$SRC+random_const_GS]
      #    mov fs:[$CONTEST_ADDR + random_const_FS]
      #    mov $DEST, rTEMPA
      #    add $DEST, dword gs:[microcontext.$SRC+20+random_const_GS]
      #    mov rTEMPC, gs:[microcontext.$SRC+8+random_const_GS]
      #    mov fs:[$CTX_ELEMENT_BOUND + random_const_FS], rTEMPC
      #    mov rTEMPD_32, dword gs:[microcontext.$SRC+16+random_const_GS]
      #    mov dword fs:[$CTX_MEMBLOCK_INDEX + random_const_FS], rTEMPD_16
      #    xor rTEMPA, rTEMPA
      #    xor rTEMPC, rTEMPC
      #    xor rTEMPD, rTEMPD
  code
    $RESET_TEMP

instruction mctxpush
  sub tmp ra
  code
    cmp rMCSI, 65535
    errorge STATUS_STACK_OVERFLOW
    inc rMCSI_16
    movzx rTEMPA, rMCSI_16
    shl rTEMPA, microcontext_size_bits
    add rTEMPA, fs:[context.microcontext_stack_address + random_const_FS]
    sub rTEMPA, random_const_GS
    wrgsbase rTEMPA
    $RESET_TEMP

instruction mctxpop
  sub tmp ra
  code
    cmp rMCSI_16, word fs:[context.microcontext_floor + random_const_FS]
    errorle STATUS_STACK_UNDERFLOW
    dec rMCSI_16
    movzx rTEMPA, rMCSI_16
    shl rTEMPA, microcontext_size_bits
    add rTEMPA, fs:[context.microcontext_stack_address + random_const_FS]
    sub rTEMPA, random_const_GS
    wrgsbase rTEMPA
    $RESET_TEMP

instruction mctxjump
  operand
    type data const integer
    $TARGET $VALUE
    scramble rTEMPA
    $LD_IMMEDIATE_TARGET $SC_LD_INDIRECT
  select-template
    case D
      sub tmp a
      sub tmp c
      code
        mov rTEMPA, $TARGET
        mov rTEMPC_32, dword fs:[context.microcontext_floor + random_const_FS]
        add rTEMPA, rTEMPC
        cmp rTEMPA, rTEMPC
        errorlt STATUS_STACK_UNDERFLOW
        cmp rTEMPA, microcontext_stack_size
        errorgt STATUS_STACK_OVERFLOW
        mov rMCSI, rTEMPA
        shl rTEMPA, microcontext_size_bits
        add rTEMPA, fs:[context.microcontext_stack_address + random_const_FS]
        sub rTEMPA, random_const_GS
        wrgsbase rTEMPA
        xor rTEMPA, rTEMPA
        $RESET_TEMP
    case I C
      sub tmp a
      sub tmp c
      code
        $LD_IMMEDIATE_TARGET
        mov rTEMPC_32, dword fs:[context.microcontext_floor + random_const_FS]
        add rTEMPA, rTEMPC
        cmp rTEMPA, rTEMPC
        errorlt STATUS_STACK_UNDERFLOW
        cmp rTEMPA, microcontext_stack_size
        errorgt STATUS_STACK_OVERFLOW
        mov rMCSI, rTEMPA
        shl rTEMPA, microcontext_size_bits
        add rTEMPA, fs:[context.microcontext_stack_address + random_const_FS]
        sub rTEMPA, random_const_GS
        wrgsbase rTEMPA
        xor rTEMPA, rTEMPA
        $RESET_TEMP

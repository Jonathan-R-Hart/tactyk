# Basic framebuffer rendering example using an auxilliary SDL interface

extmem video

struct global
  8 width
  8 height
  8 padding

mem global_vars global 1

text header
  SDL framebuffer rendering demo

text footer
  Done.

const newline 10
const FRAME_WIDTH 640
const FRAME_HEIGHT 480

MAIN:
  bind addr1 header
  bind addr2 global_vars
  assign b 0
  
  PRINT_HEADER_CHAR:
  load byte a addr1 b
  ccall printchar
  add b 1
  if b < header_size PRINT_HEADER_CHAR
  
  assign a newline
  ccall printchar

  assign a 0
  assign b FRAME_WIDTH
  assign c FRAME_HEIGHT

  # obtain an SDL-backed framebuffer
  tcall sdl_init
  assign a 0
  tcall fb_new
  assign a 0
  
  store qword addr2 global.width b
  #store qword addr2 global.height c

  
  tcall fb_render
  
  # iterate each visible pixel in the frame buffer
  bind addr4 video

  assign b FRAME_WIDTH
  assign c FRAME_HEIGHT
  div b 2
  div c 2
  assign e 255
  
  lwcall RANDDRAW

  FINISH:  
  assign a 0
  tcall fb_update
  tcall fb_render

  WAIT:
  assign a 50
  ccall sleep
  
  assign a 0
  tcall fb_render
  tcall sdl_isclosing
  if a == 1 CLOSE
  
  goto WAIT
  
  CLOSE:
  
  # close the SDL window and clean up
  assign a 0
  tcall fb_release
  tcall sdl_quit
  
  bind addr1 footer
  assign b 0
  
  PRINT_FOOTER_CHAR:
  load byte a addr1 b
  ccall printchar
  add b 1
  if b < footer_size PRINT_FOOTER_CHAR

  assign a newline
  ccall printchar
  
  ccall printint
  exit

  RANDDRAW:
  assign a 0
  tcall fb_update
  tcall fb_render
  assign a 1
  ccall sleep

  tcall sdl_isclosing
  if a == 1 CLOSE
  
  mctxpush
  stash b1c1e1
  ccall a rand
  and a 3
  if a == 0 NORTH
  if a == 1 EAST
  if a == 2 SOUTH
  goto WEST
  
  WEST:
  sub b 1
  goto PUTIT

  NORTH:
  add c 1
  goto PUTIT

  EAST:
  add b 1
  goto PUTIT

  SOUTH:
  sub c 1
  goto PUTIT
  
  PUTIT:
  if b < 0 SKIPIT
  if c < 0 SKIPIT
  if b >= FRAME_WIDTH SKIPIT
  if c >= FRAME_HEIGHT SKIPIT
  
  load qword f addr2 global.width
  assign d c
  mul d f
  add d b
  mul d 4
  
  load byte a addr4 d
  if a != 0 SKIPIT

  store byte addr4 d e
  add d 1
  store byte addr4 d e
  add d 1
  store byte addr4 d e

  sub e 1
  if e <= 0 SKIPIT

  lwcall RANDDRAW

  unstash b1c1e1
  lwcall RANDDRAW

  unstash b1c1e1
  lwcall RANDDRAW

  unstash b1c1e1
  lwcall RANDDRAW

  unstash b1c1e1
  lwcall RANDDRAW
  
  SKIPIT:
  mctxpop
  lwreturn
  




# TACTYK recursion demo
#
# This uses the microcontext stack to store intermediate values from a modified random walk algorithm
#   The random walk has an energy limit, and it avoids visiting position previously reached.
#   All open positions are placed on the stack.
#   When out of energy, trapped, or out of bounds, the stack is unwound and the walk proceeds from a
#   preceding state.
#   When there are no more open positions, it returns, waits for the user to close the window, then exits.


struct global
  8 width
  8 height
  8 padding

struct sdl_state
  4 mpos_x
  4 mpos_y
  4 key_pressed__sdlcode
  4 key_released__sdlcode
  4 key_pressed
  4 key_released
  1 closing
  1 mouse_moved
  1 mouse_btn_pressed
  1 mouse_btn_released

mem global_vars global 1

text header
  TACTYK Example - Recursion
  This uses a randomized recursive backtracker to draw a blob.  This does not use memory very efficiently...
  Press 'q' or 'escape' to quit.  Or close the window.  It all suppsedly works.

text footer
  Done.

const newline 10
const FRAME_WIDTH 640
const FRAME_HEIGHT 480

MAIN:
  bind addr1 header
  bind addr2 global_vars
  assign b 0
  
  PRINT_HEADER_CHAR:
  load byte a addr1 b
  tcall print-text-a
  add b 1
  if b < header_size PRINT_HEADER_CHAR
  
  tcall print-newline

  # obtain an SDL-backed framebuffer
  
  assign a FRAME_WIDTH
  assign b FRAME_HEIGHT
  tcall sdl--new
  tcall sdl--get-eventview
  bind addr3 addr1
  tcall sdl--get-framebuffer
  bind addr4 addr1
  
  store qword addr2 global.width a
  
  tcall sdl--upload-framebuffer
  tcall sdl--render
  
  # iterate each visible pixel in the frame buffer

  assign b FRAME_WIDTH
  assign c FRAME_HEIGHT
  div b 2
  div c 2
  assign e 255
  
  lwcall RANDDRAW

  FINISH:
  tcall sdl--upload-framebuffer
  tcall sdl--render

  WAIT:
  tcall sleep 50
  
  lwcall CHK_UI_STATE
  
  tcall sdl--render
  
  goto WAIT
  
  CLOSE_AND_EXIT:  
  # close the SDL window and clean up
  tcall sdl--release
  tcall sdl--quit
  
  bind addr1 footer
  assign b 0
  
  PRINT_FOOTER_CHAR:
  load byte a addr1 b
  tcall print-text-a
  add b 1
  if b < footer_size PRINT_FOOTER_CHAR

  tcall print-newline
  exit

  RANDDRAW:
  tcall sdl--upload-framebuffer
  tcall sdl--render
  tcall sleep 1
  
  lwcall CHK_UI_STATE
  
  mctxpush
  stash sB b sC c sE e
  tcall rand-a
  and a 3
  if a == 0 NORTH
  if a == 1 EAST
  if a == 2 SOUTH
  goto WEST
  
  WEST:
  sub b 1
  goto PUTIT

  NORTH:
  add c 1
  goto PUTIT

  EAST:
  add b 1
  goto PUTIT

  SOUTH:
  sub c 1
  goto PUTIT
  
  PUTIT:
  if b < 0 SKIPIT
  if c < 0 SKIPIT
  if b >= FRAME_WIDTH SKIPIT
  if c >= FRAME_HEIGHT SKIPIT
  
  load qword f addr2 global.width
  assign d c
  mul d f
  add d b
  mul d 4
  
  load byte a addr4 d
  if a != 0 SKIPIT

  store byte addr4 d e
  add d 1
  store byte addr4 d e
  add d 1
  store byte addr4 d e

  sub e 1
  if e <= 0 SKIPIT

  lwcall RANDDRAW

  stash b sB c sC e sE
  lwcall RANDDRAW

  stash b sB c sC e sE
  lwcall RANDDRAW

  stash b sB c sC e sE
  lwcall RANDDRAW

  stash b sB c sC e sE
  lwcall RANDDRAW
  
  SKIPIT:
  mctxpop
  lwreturn

CHK_UI_STATE:
  tcall sdl--update_ui
  load dword a addr3 sdl_state.key_pressed__sdlcode
  if a == 20 CLOSE_AND_EXIT
  if a == 41 CLOSE_AND_EXIT
  load byte a addr3 sdl_state.closing
  if a == 1 CLOSE_AND_EXIT
  lwreturn


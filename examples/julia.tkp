# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#   Copyright 2023, Jonathan Hart
#   This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation,
#   either version 3 of the License, or (at your option) any later version.
#   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
#   PURPOSE. See the GNU General Public License for more details.
#   You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.
# -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------

text header
  TACTYK Example:  Julia Fractal
  This one is interactive - mouse-over the window to change the fractal parameters.
  The implementation is a bit sub-optimal.
  A large performance improvement could be attained by using vectorized math
  As of the time this was successfully tested, a few more instructions are/where needed for packing and unpacking.
  With some more work, it could also use some techniques for bypassing large portions of the connected set instead of running max iterations every pixel
  And there's probably a few places where the code could be cleaned up a bit.
  Press 'q' or 'escape' to quit.  Or close the window.  It all suppsedly works.

text footer
  Done.

struct sdl_state
  4 mpos_x
  4 mpos_y
  4 key_pressed__sdlcode
  4 key_released__sdlcode
  4 key_pressed
  4 key_released
  1 closing
  1 mouse_moved
  1 mouse_btn_pressed
  1 mouse_btn_released

const newline 10
const sp 32
const width 640
const height 480

struct globals
  8 padding

mem g globals 1

MAIN:
  bind addr2 g
  bind addr1 header
  assign b header_size
  lwcall PRINTIT
  
  assign a width
  assign b height
  tcall sdl--new
  tcall sdl--get-eventview
  bind addr3 addr1
  tcall sdl--get-framebuffer
  bind addr4 addr1
  
  assign c a
  # store budder width in stash
  stash sC c
  assign a 0
  assign b 0
  sub a 1
  stash sA a sB b

  # setup floating point constants
  # xk:  2.0/width
  # xl:  1.0/height
  # xj:  2.0
  # xm:  1.0

  assign xj 2
  assign xk xj
  assign xl xj
  div xk width
  div xl height
  
  # escape radius, radius**2
  assign xn 2
  assign xm xn
  mul xm xm
  
  assign e 128
  assign xg e
  
  # const additive
  assign xh 0.405
  assign xi 0.135
  
  assign xa xj

goto RENDER_FRAC
DISPLAY_IT:
  tcall sdl--upload-framebuffer
  tcall sdl--render
  goto MAINLOOP
DELAY_AND_RETRY:
  tcall sleep 10
MAINLOOP:
  tcall sdl--update_ui
  load dword a addr3 sdl_state.key_pressed__sdlcode
  if a == 20 CLOSE_AND_EXIT
  if a == 41 CLOSE_AND_EXIT
  load byte a addr3 sdl_state.mouse_moved
  if a == 0 DELAY_AND_RETRY
  load dword b addr3 sdl_state.mpos_x
  load dword c addr3 sdl_state.mpos_y
  load byte a addr3 sdl_state.closing
  if a == 1 CLOSE_AND_EXIT
  assign xh b
  assign xi c
  div xh width
  mul xh 2
  sub xh 1
  div xi height
  mul xi 2
  sub xi 1
  
  tcall sdl--upload-framebuffer
  tcall sdl--render
  add xh 0.02
  assign a 0
  assign b 0
  sub a 1
  stash sA a sB b
RENDER_FRAC:
  
  SELECT_NEXT_PIXEL:
    stash a sA b sB
    add a 1
    if a < width RENDER_PIXEL
      add b 1
      assign a 0
      if b == height DISPLAY_IT
  
  RENDER_PIXEL:
  stash sA a sB b
  
  # pixel buffer position - ([stashed] buffer width * y + x) * 4
  stash c sC
  mul c b
  add c a
  mul c 4
  
  # normlized coordinates (a,b -> range -1 to 1)
  assign xa a
  assign xb b
  mul xa xk
  mul xb xl
  sub xa 1
  sub xb 1
  # mul xa xn
  # mul xb xn
  
  assign d 0
  ITERATE:

    # iteration-limit test
    if d == e EMIT_PIXEL
    
    # xa**2, xb**2
    assign xc xa
    assign xd xb
    mul xc xc
    mul xd xd
    
    # xd = xa**2 + xb**2
    assign xe xc
    add xe xd
    
    # escape test
    if xe >= xm EMIT_PIXEL
    
    # xd -> xa**2 - xb**2    
    sub xc xd
    
    # xb = 2 * xa * xb + xi
    mul xb xj
    mul xb xa
    add xb xi
    
    # xa = previous[xa**2] - previous[xb**2] + xh
    assign xa xc
    add xa xh
    add d 1
    
    goto ITERATE

  EMIT_PIXEL:
  assign xf d
  mul xf xg
  div xf 64

  assign f xf

  store byte addr4 c f
  add c 1
  store byte addr4 c f
  add c 1
  store byte addr4 c f
  
  goto SELECT_NEXT_PIXEL
  
CLOSE_AND_EXIT:
  tcall sdl--release
  tcall sdl--quit

  bind addr1 footer
  assign b footer_size
  lwcall PRINTIT
  
  exit

PRINTIT:
  assign c 0
  PRINTIT_LOOP:
  load byte a addr1 c
  tcall print-text-a
  add c 1
  if c < b PRINTIT_LOOP
  tcall print-newline
  lwreturn
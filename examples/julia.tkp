# Julia Fractal on some level

text header
  SDL framebuffer rendering demo

text footer
  Done.

extmem video
const newline 10
const sp 32
const width 640
const height 480

struct globals
  8 padding

mem g globals 1

MAIN:
  bind addr4 video
  bind addr2 g
  bind addr1 header
  assign b header_size
  lwcall PRINTIT
  
  tcall sdl_init  
  assign a 0
  assign b 4
  assign c width
  assign d height
  tcall fb_new
  assign c a
  # store budder width in stash
  stash c1
  assign a 0
  assign b 0
  sub a 1
  stash a1b1

  # setup floating point constants
  # xk:  2.0/width
  # xl:  1.0/height
  # xj:  2.0
  # xm:  1.0

  assign xj 2
  assign xk xj
  assign xl xj
  div xk width
  div xl height
  assign xm 1

  # escape radius, radius**2
  assign xn 2
  assign xo xn
  mul xo xo
  
  assign a newline
  ccall printchar
  assign xa xk
  ccall printfloat
  ccall printchar
  assign xa xl
  ccall printfloat
  ccall printchar
  assign xa xm
  ccall printfloat
  ccall printchar
  mul xn xn
  assign xa xn
  ccall printfloat
  ccall printchar
  ccall printfloat
  ccall printchar

  exit

  assign e 10000
  assign xg e
  
  # goto MAINLOOP

  # const additive
  assign xh 0.25
  assign xi 0.125

MAINLOOP:
  assign a 0
  tcall fb_render
  
  SELECT_NEXT_PIXEL:
    unstash a1b1
    add a 1
    if a < width RENDER_PIXEL
      add b 1
      assign a 0
      if b == height WAIT_FOR_CLOSE_REQUEST
      
  RENDER_PIXEL:
  stash a1b1
  
  # pixel buffer position - ([stashed] buffer width * y + x) * 4
  unstash c1
  mul c b
  add c a
  mul c 4
  
  # normlaized coordinates (a,b -> range -1 to 1)
  assign xa a
  assign xb b
  mul xa xk
  mul xb xl
  sub xa xm
  sub xb xm
  mul xa xn
  mul xb xn

  #assign a xg
  
  assign d 0
  ITERATE:
    
    # iteration-limit test
    if d == e EMIT_PIXEL
    
    # xa**2, xb**2
    assign xc xa
    assign xd xb
    mul xc xc
    mul xd xd

    # xd = xa**2 + xb**2    
    assign xe xc
    add xe xd
    
    # escape test
    if xd < xo EMIT_PIXEL
    
    # xd -> xa**2 - xb**2    
    sub xc xd

    # xb = 2 * xa * xb + xi
    mul xb xj
    mul xb xa
    add xb xi
    
    # xa = previous[xa**2] - previous[xb**2] + xh
    assign xa xc
    add xa xh
    
    add d 1
    
    goto ITERATE

  EMIT_PIXEL:
  assign xf d
  mul xf xg
  div xf 256

  assign e xf
  
  store byte addr4 c e
  add c 1
  store byte addr4 c e
  add c 1
  store byte addr4 c e
  
  goto SELECT_NEXT_PIXEL

WAIT_FOR_CLOSE_REQUEST:
  assign a 50
  ccall sleep
  assign a 0
  tcall fb_update
  tcall fb_render
  tcall sdl_isclosing
  if a == 1 CLOSE_AND_EXIT
  goto WAIT_FOR_CLOSE_REQUEST
  
CLOSE_AND_EXIT:
  assign a 0
  tcall fb_release
  tcall sdl_quit

  bind addr1 footer
  assign b footer_size
  lwcall PRINTIT

  exit

PRINTIT:
  assign c 0
  PRINTIT_LOOP:
  load byte a addr1 c
  ccall printchar
  add c 1
  if c < b PRINTIT_LOOP
  assign a newline
  ccall printchar
  lwreturn

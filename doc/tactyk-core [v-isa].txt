TACTYK_CORE Virtual Instructon Set Architecture

This document covers the main TACTYK Virtual ISA (rsc/tactyk_core.txt).

For details on how to interpret this document, please review the Virtual ISA documentation.  In particular, focus on the "type" operator and how it relates to code template selection.


TYPE SPECIFICATIONS

address
  Select an address register
  Additionally obtains references to related context fields
Accepted values:
  @1 addr1 rADDR1
  @2 addr2 rADDR2
  @3 addr3 rADDR3
  @4 addr4 rADDR4
Assigned variables:
  $VALUE                address register name
  $CTX_ADDR             context field (base address)
  $CTX_ARRAY_BOUND      context field
  $CTX_ELEMENT_BOUND    context field
  $CTX_MEMBLOCK_INDEX   context field (integer handle)
template-selector:  'A'

data
  Select a data register
Accepted values:
  a ra rA
  b rb rB
  c rc rC
  d rd rD
  e re rE
  f rf rF
Assigned variables:
  $VALUE                data register name
template-selector:  'D'

xmmx
  Select an xmm register
Accpeted values:
  x0 xmm0 xa xA
  x1 xmm1 xb xB
  x2 xmm2 xc xC
  x3 xmm3 xd xD
  x4 xmm4 xe xE
  x5 xmm5 xf xF
  x6 xmm6 xg xG
  x7 xmm7 xh xH
  x8 xmm8 xi xI
  x9 xmm9 xj xJ
  x10 xmm10 xk xK
  x11 xmm11 xl xL
  x12 xmm12 xm xM
  x13 xmm13 xn xN
Assigned variables:
  $VALUE                xmm register name
template-selector:  'X'

xmmx-full
  A variant of the xmmx register selector which also provides a hint that the full 128 bits of the register should be used
  (most instructions affecting xmmx registers only affect the lower 64 bits)
  This is used for overloading certain instructions to allow them to optionally use wider data types
Accpeted values:
  xx0 xxmm0 xxa xxA
  xx1 xxmm1 xxb xxB
  xx2 xxmm2 xxc xxC
  xx3 xxmm3 xxd xxD
  xx4 xxmm4 xxe xxE
  xx5 xxmm5 xxf xxF
  xx6 xxmm6 xxg xxG
  xx7 xxmm7 xxh xxH
  xx8 xxmm8 xxi xxI
  xx9 xxmm9 xxj xxJ
  xx10 xxmm10 xxk xxK
  xx11 xxmm11 xxl xxL
  xx12 xxmm12 xxm xxM
  xx13 xxmm13 xxn xxN
Assigned variables:
  $VALUE                xmm register name
template-selector:  'Xx'

word
  Indicates the word size (or width) of an operation.  This also applies a set of supplemental parameters to help invoke specialized handling in various operations.
Accepted values:
  byte i8
  word i16
  dword i32
  qword i64
  oword bits128
  float
  sbyte s8
  sword s16
  sdword s32
  sqword s64
Assigned variables:
  $MOV          Which ASM transfer operation to use
  $MOV_LD       A special case transfer operation to apply when transfer also implies data type conversion
  $BYTEBOUND    byte size of word minus 1 (used for bounds checking)
  $MVKW         ASM word-size keyword (byte, word, dword, qword, etc)
  $REGBITS_LD   Register size specifier for load operations (used to select register a alias)
  $REGBITS_ST   Register size specifier for store operations (used to select register a alias)
template-selector:
  byte i8     'B'
  word i16    'W'
  dword i32   'D'
  qword i64   'Q'
  float       'X'
  sbyte s8    'B'
  sword s16   'W'
  sdword s32  'Ds'
  sqword s64  'Q'

stackreg
  Select a stack register
  Additionally obtains a reference to the stack floor context field
Accpeted values:
  mctx.pos mcxtstack.pos mctx.position mcxtstack.position
  lwcs.pos lwcstack.pos lwcs.position lwcstack.position
Assigned variables:
  $VALUE                stack register name
  $STACK_FLOOR          context field (minimum stack register value)
template-selector:  'Sreg'

integer
  parse an argument as an integer
Accpeted values:
  radix-10 integers without any prefix (integer decimal)
  radix-16 (hexadecimal) integers prefixed by "h." (hexadecimal literal)
  radix-2 integers prefixed by "b." (binary literal)
Assigned variables:
  $VALUE                integer value
template-selector:  'I'

float
  parse an argument as a floating point number
Accpeted values:
  Anything the C standard library function "strtod" can successfully interpret as a floating point value.
Assigned variables:
  $VALUE                floating point value
template-selector:  'F'

branch
  fetch a named label from the "label" symbol table
Accpeted values:
  The text value of any script-defined label
Assigned variables:
  $VALUE                An internal [sanitized] label name
template-selector:  'L'

branch-index
  Fetch a the numeric value of a named label from the "label" symbol table.
  This is used for dynamic programming.
Accpeted values:
  The text value of any script-defined label
Assigned variables:
  $VALUE                An internal [sanitized] label name
template-selector:  'Li'
Variant: *branch-index - same as branch-index, but uses 'I' as a template-selector (handling is identical to handling of integers)

const
  fetch a named integer constant from the "const" symbol table
Accpeted values:
  The text value of a defined constant
Assigned variables:
  $VALUE                The value of the named constant
template-selector:  'C'
Variant: *const - same as const, but uses 'I' as a template-selector (handling is identical to handling of integers)

const
  fetch a named integer constant from the "const" symbol table
Accpeted values:
  The text value of a defined constant
Assigned variables:
  $VALUE                The value of the named constant
template-selector:  'C'
Variant: *fconst - same as fconst, but uses 'I' as a template-selector (handling is identical to handling of floating point literals)

fconst
  fetch a named floating point constant from the "fconst" symbol table
Accpeted values:
  The text value of a defined constant
Assigned variables:
  $VALUE                The value of the named constant
template-selector:  'Cf'
Variant: *const - same as fconst, but uses 'F' as a template-selector (handling is identical to handling of integers)

capi
  fetch a reference to a C function from the "capi" symbol table
  These are supposed to be functions with simple function signatures that are easy to invoke from Assembly Language.
  CAPI functions 
Accpeted values:
  The name of a defined C-API function
Assigned variables:
  $VALUE                The integer value of a pointer to the function.
template-selector:  'Cfunc'

tapi
  fetch a reference to a Tactyk-API function from the "tapi" symbol table
  These are supposed to be functions which directly interact with tactyk contexts to obtain arguments and return results.
Accpeted values:
  The name of a defined T-API function
Assigned variables:
  $VALUE                The integer value of a pointer to the function.
template-selector:  'Tfunc'

string
  convert raw bytes into one or two integers
Accpeted values:
  Anythign prefixes with ', ", or ` (see string-operand in the Virtual-ISA documentation for details)
Assigned variables:
  $VALUE                lower 8 bytes
  $VALUE_UPPER          upper 8 bytes (if more than 8 bytes)
template-selector:  'S'
Variant: *string - same as string, but uses 'I' as a template-selector (handling is identical to handling of integers)

nullarg
  verify that the script-command argument is NULL
Accpeted values:
  Nothing!
Assigned variables:
  Nothing!
template-selector: 'N'
deprecation notice:  Instead of permtting trailing null entries, optional operands should be specified with the "opt-operand" operator.

codeblock
  Officially, this indicates that a subordinate block (to the instruction) should be handled as a separate code block.
  In terms of implementation, this only triggers a check for the existence of a codeblock (as it was necessesary to collect all details ahead of time).
Assigned variables:
  $IS_CODEBLOCK - set to "true" if the codeblock test
Template-selector:  'B'
Related variables:
  $CODEBLOCK_CHILD_CLOSE - branch target to the first line of code outside of the code block
  $CODEBLOCK_CHILD_FIRST - branch target to the first line of code inside of the codeblock

context-property
  select a context field
Accepted Values:
  addr1.array_bound
  addr1.element_bound
  addr1.memblock_index
  addr1.offset
  addr2.array_bound
  addr2.element_bound
  addr2.memblock_index
  addr2.offset
  addr3.array_bound
  addr3.element_bound
  addr3.memblock_index
  addr3.offset
  addr4.array_bound
  addr4.element_bound
  addr4.memblock_index
  addr4.offset
Assigned variables:
  $VALUE                reference to the associated context field
  $KW                   word size of the context field.
template-selector: 'Ctx'

comparator
  Represents a a value comparison or a bitwise comparison.
  The bracketted variants have an "all" connotation (if a conditional expression involves multiple fields, then the unbracketted comparator indicates that the test should 
  pass if any sub-expression passes, and the bracketted comparator indicates that the test should pass only if all sub-expressions pass).
Accpeted values:
  < lt
  <= le
  == eq
  >= ge
  > gt
  ~= != neq
  & and
  | or
  ~& nand
  ~or nor
  [<] [lt]
  [<=] [le]
  [==] [eq]
  [>=] [ge]
  [>] [gt]
  [~=] [!=] [neq]
  [&] [and]
  [|] [or]
  [~&] [nand]
  [~or] [nor]
Assigned variables:
  $VALUE                Assembly langauge instruction which performs the comparison [for conventional registers]
  $VPRED                Comparison predicate to use for SSE2-based comparison operations
  $VPREDCOMPLEMENT      Complementary comparison predicate to use for SSE2-based comparison operations when a reversed operand order is more conveinent/efficient
template-selector: 'T'

address-offset
  A pseudo-property used to obtain or manipulate offset addresses [in the assign instruction].
    Technically, the address typespec could be used for this, but any code using it would likely create confusion.
Accpeted values:
  addr1.offset
  addr2.offset
  addr3.offset
  addr4.offset
Assigned variables:
  $ADDRESS_REGISTER     name of address register
  $CTX_ADDRESS          context field (base address)
  $CTX_ADDRESS_BOUND    context field
template-selector: 'O'

stash-addr
  Select a reference to an address field in the microcontext stash
Accpeted values:
  s-addr1 stash-addr1
  s-addr2 stash-addr2
  s-addr3 stash-addr3
  s-addr4 stash-addr4
Assigned variables:
  $VALUE                reference to a microcontext stash address field
template-selector: 'Sa'

stash-item
  Select a 16-byte general-purpose field from the microcontext stash.
Accepted values:
  sa sA sb sB sc sC sd sD se sE sf sF
  sg sG sh sH si sI sj sJ sk sK sl sL
  sm sM sn sN so sO sp sP sq sQ sr sR
  ss sS st sT su sU sv sV sw sW sx sX
  sy sY sz sZ
Assigned variables:
  $VALUE                name of a microcontext stash general-purpose field
template-selector: 'Si'

stash-item-small
  Select an 8-byte general-purpose field from the microcontext stash.  These represent the upper and lower 8-byte words (qwords)
  of a 16-byte stash entry.
Accepted values:
  sal sAl sbl sBl scl sCl sdl sDl sel sEl sfl sFl
  sgl sGl shl sHl sil sIl sjl sJl skl sKl sll sLl
  sml sMl snl sNl sol sOl spl sPl sql sQl srl sRl
  ssl sSl stl sTl sul sUl svl sVl swl sWl sxl sXl
  syl sYl szl sZl
  sah sAh sbh sBh sch sCh sdh sDh seh sEh sfh sFh
  sgh sGh shh sHh sih sIh sjh sJh skh sKh slh sLh
  smh sMh snh sNh soh sOh sph sPh sqh sQh srh sRh
  ssh sSh sth sTh suh sUh svh sVh swh sWh sxh sXh
  syh sYh szh sZh
Assigned variables:
  $VALUE                name of a microcontext stash general-purpose field
template-selector: 'Sis'

block-quantity
  integer 1-14 with parameters needed to support operations on register groups
accepted values:
  1 2 3 4 5 6 7 8 9 10 11 12 13 14
Assigned variales:
  $QTY                          integer quantity (accepted interger literal)
  $ELEMENT_BOUND_MODIFIER_64    Bounds check modifier for 8-byte words  ($QTY*8 - 1)
  $ELEMENT_BOUND_MODIFIER_128   Bounds check modifier for 16-byte words ($QTY*16 - 1)
template-selector:
  'Bqs' if quanity equal to or less than 6
  'Bql'  if quanitty equal to or greater than 7
  The use of two template-selectors helps to bake in an assertion that quantity should not exceed 6 for data-register groups consisting


INSTRUCTIONS

Instructions are overloaded and vary based on which type specification matches each argument.  The format used to describe an instruction is as follows:
<instruction> <typespec> <typespec> ...
(refer to the "TYPE SPECTICATIONS" section for a description of what each opreand is)

run
TACTYK entry point
  store the native context
  load the tactyk context, set tactyk status to "RUN"
  and jump to the instruction indicated by context.instruction_index
NOTE:  This is called from the runtime, and not accessible to scripts

exit
Exit tactyk and return
  Set tactyk status to "HALT"
  store the current context
  restore the native context
  return to the caller

break
Place tactyk in a suspended/resumable state and return
  Set tactyk status to "SUSPEND"
  update context.instruction_index with the index of the next instruction
  store the current context
  restore the native context
  return to the caller


bind address-register memblock-ref
  Bind a memory block to an address register
  This also copies the memblock specification into context local storage.
Typespecs:
  address-register:       address
  memblock-ref:           address data integer memblock
    This is an integer index into the program's memblock array.
Variants:
  bind address data
  bind address integer
  bind address memblock
  bind address address
Unusual variants:
  bind address address
    This copies one memory binding onto another.

unbind address-register
Clear/reset a memory binding
Typespecs:
  address-register:       address
Variants:
  unbind address


load word-size destination-register address-register element-offset.
Fetch data from a memblock and load it onto a register.
If loading the type/destination are mismatched (such as loading a float onto a data register), this also implies a type conversion.
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
Typespecs:
  word-size:              word
  destination-register:   <int-type> xmmx
  address-register:       addr
  element-offset:         <int-type>
    This is comparable to an object member accessor
Variants:
  load qword <int-type> addr <int-type>
  load dword <int-type> addr <int-type>
  load word <int-type> addr <int-type>
  load byte <int-type> addr <int-type>
  load float <int-type> addr <int-type> 
  load float xmmx addr <int-type>

store word-size address-register element-offset source-register
  Take a value from a register and store it into a memblock.
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
Typespecs:
  word-size:              word
  address-register:       addr
  element-offset:         <int-type>
    This is comparable to an object member accessor
  source:                 <int-type> xmmx
Variants:
  store qword addr <int-type> <int-type>
  store dword addr <int-type> <int-type>
  store word addr <int-type> <int-type>
  store byte addr <int-type> <int-type>
  store float addr <int-type> <int-type>
  store float addr <int-type> xmmx

block-load block-size destination-register address-register element-offset
  Fetch data from a memblock and load it onto a register-group
  Word size is implicit and (determined by how a register is referenced)
Typespecs:
  block-size:             block-quanity
  destination-register:   data xmmx xmmx-full
  address-register:       addr
  element-offset:         data integer const
Variants:
  block-load block-quantity data addr data
  block-load block-quantity data addr integer
  block-load block-quantity data addr const
  block-load block-quantity xmmx addr data
  block-load block-quantity xmmx addr integer
  block-load block-quantity xmmx addr const
  block-load block-quantity xmmx-full addr data
  block-load block-quantity xmmx-full addr integer
  block-load block-quantity xmmx-full addr const


block-store block-size address-register element-offset source-register
  Take values from a register group and store them into a memblock.
  Word size is implicit and (determined by how a register is referenced)
Typespecs:
  block-size:             block-quanity
  address-register:       addr
  element-offset:         data integer const
  source-register:        data xmmx xmmx-full
Variants:
  block-store block-quantity addr data data
  block-store block-quantity addr integer data
  block-store block-quantity addr const data
  block-store block-quantity addr data xmmx
  block-store block-quantity addr integer xmmx
  block-store block-quantity addr const xmmx
  block-store block-quantity addr data xmmx-full
  block-store block-quantity addr integer xmmx-full
  block-store block-quantity addr const xmmx-full

pop destination-register address-register
  Treating a memblock as a stack, pop a value off a stack and load it onto a data register.
  An 8-byte word size is assumed.
Typespecs:
  destination-register:   data
  address-register:       addr
Variants:
  pop data addr

push address-register source
  Treating a memblock as a stack, push a value onto the stack.
  An 8-byte word size is assumed.
Typespecs:
  address-register:       addr
  source:                 data integer const
Variants:
  push addr data
  push addr integer
  push addr const

swap a b
  Swap the contents of two registers.
  If swapping between data and xmmx registers, this assumes the data register contains an integer and the xmmx register
  contains a floating point number, and will cast both values.
  If address registers are swapped, it also swaps the internal memory binding variables.
Typespecs:
  a:                      address data xmmx
  b:                      address data xmmx
Variants:
  swap data data
  swap xmmx xmmx
  swap data xmmx
  swap xmmx data
  swap address address

add a b
  Add the value b or value of register b onto the value of register a
  If either operand is a floating point number, the operation will be performed using xmm registers
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
  <float-type>:           xmmx float fconst
Typespecs:
  a:                      data xmmx stash-item stash-item-small
  b:                      data xmmx const fconst integer float stash-item stash-item-small
Variants:
  add <int-reg> <int-type>
  add <int-reg> <float-type>
  add xmmx <int-type>
  add xmmx <float-type>

sub a b
  Subtract the value b or value of register b from value of register a
  If either operand is a floating point number, the operation will be performed using xmm registers
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
  <float-type>:           xmmx float fconst
Typespecs:
  a:                      data xmmx stash-item stash-item-small
  b:                      data xmmx const fconst integer float stash-item stash-item-small
Variants:
  sub <int-reg> <int-type>
  sub <int-reg> <float-type>
  sub xmmx <int-type>
  sub xmmx <float-type>

mul a b
  Multiply the value of register a by value b or value of register b
  If either operand is a floating point number, the operation will be performed using xmm registers
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
  <float-type>:           xmmx float fconst
Typespecs:
  a:                      data xmmx stash-item stash-item-small
  b:                      data xmmx const fconst integer float stash-item stash-item-small
Variants:
  mul <int-reg> <int-type>
  mul <int-reg> <float-type>
  mul xmmx <int-type>
  mul xmmx <float-type>

div a b div-zero-branch
  Divide the value of register a by value b or value of register b
  If either operand is a floating point number, the operation will be performed using xmm registers
  If dividing a data register and a "div-zero-branch" operand is provided, it will jump to the specified branch target if the value of b is zero.
  If dividing a data register and a "div-zero-branch" is not provided, then it will set status to "DIVISION_BY_ZERO" and terminate execution if the value of b is zero.
  Floating point division by zero is unchecked (supposedly it doesn't cause floating point exceptions)
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
  <float-type>:           xmmx float fconst
Typespecs:
  a:                      data xmmx stash-item stash-item-small
  b:                      data xmmx const fconst integer float stash-item stash-item-small
Variants:
  div <int-reg> <int-type>
  div <int-reg> <float-type>
  div xmmx <int-type>
  div xmmx <float-type>
  div <int-reg> <int-type> div-zero-branch

abs dest opt-source
  compute the absolute value of a signed integer
  The operand form replaces a register value with the absolute value thereof.
  The two-operand form calculates the absolute value of the 2nd opreand and assigns it to the register given by the first.
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
typespecs:
  dest:                   <int-reg>
  source:                 <int-type>
variants:
  abs <int-reg>
  abs <int-reg> <int-type>

sign dest opt-source
  Extract the sign of an integer:  -1 if less than zero, 1 if greater then or equal to zero
  The operand form replaces a register value with the sign thereof.
  The two-operand form calculates the absolute value of the 2nd opreand and assigns it to the register given by the first.
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
typespecs:
  dest:                   <int-reg>
  source:                 <int-type>
variants:
  sign <int-reg>
  sign <int-reg> <int-type>

and destination source
  Apply bitwise AND to a data register.
  If applied to xmmx registers, this performs the binary operation on all 16 bytes
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            data xmmx stash-item stash-item-small
  source:                 data xmmx const integer stash-item stash-item-small
Variants:
  and <int-reg> <int-type>
  and xmmx <int-type>
  and <int-reg> xmmx
  and xmmx xmmx
  and stash-item stash-item
    (special wider case)

or destination source
  Apply bitwise OR to a data register
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            data xmmx stash-item stash-item-small
  source:                 data xmmx const integer stash-item stash-item-small
Variants:
  or <int-reg> <int-type>
  or xmmx <int-type>
  or <int-reg> xmmx
  or xmmx xmmx
  or stash-item stash-item
    (special wider case)

xor destination source
Apply bitwise XOR to a data register
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            data xmmx stash-item stash-item-small
  source:                 data xmmx const integer stash-item stash-item-small
Variants:
  xor <int-reg> <int-type>
  xor xmmx <int-type>
  xor <int-reg> xmmx
  xor xmmx xmmx
  xor stash-item stash-item
    (special wider case)

assign destination-register source
Assign the value of source to a register
The "Unusual Varaints" differ significantly.
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
  <int-reg>:              data stash-item stash-item-small
  <float-type>:           xmmx float fconst
Typespecs:
  destination:            <int-reg> xmmx address-offset
  source:                 <int-type> <float-type> stackreg address-offset context-property
Common Variants:
  assign <int-reg> <int-type>
  assign <int-reg> <float-type>
  assign xmmx <float-type>
  assign xmmx <int-type>

Unusual variants:
  assign <int-reg> context-property
    fetch a context property and assign it to an integer-type register
  assign <int-reg> address-offset
    calculate the offset of an address register and assign it to an integer-type register
  assign <int-reg> stackreg
    calculate the relative stack position and assign it to an integer-type register
    (stack position relative to the stack "floor" [base position when the current context was entered])
  assign address-offset <int-type>
    offset an address register by a value taken from an integer-type source

spread destination [literals ...]
  assign 1-6 integer literals to a data register group
  OR assign 1-14 floating point literals to an xmmx register group
  This is intended to make various forms of initialization easier to code.
typespecs:
  destination:            data xmmx
  literals:               integer float
Variants:
  spread DI
  spread DII
  spread DIII
  spread DIIII
  spread DIIIII
  spread DIIIIII
  spread XF
  spread XFF
  spread XFFF
  spread XFFFF
  spread XFFFFF
  spread XFFFFFF
  spread XFFFFFFF
  spread XFFFFFFFF
  spread XFFFFFFFFF
  spread XFFFFFFFFFF
  spread XFFFFFFFFFFF
  spread XFFFFFFFFFFFF
  spread XFFFFFFFFFFFFF
  spread XFFFFFFFFFFFFFF

shift-left destination source
Apply a bitwise left shift to an integer-type register
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
  source:                 <int-type>
Variants:
  shift-left <int-reg> <int-type>

shift-right destination source
Apply a bitwise right shift to an integer-type register
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
  source:                 <int-type>
Variants:
  shift-right <int-reg> <int-type>

rotate-left destination source
Apply a bitwise left rotation to an integer-type register
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
  source:                 <int-type>
Variants:
  rotate-left <int-reg> <int-type>

rotate-right destination source
Apply a bitwise right rotation to an integer-type register
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
  source:                 <int-type>
Variants:
  rotate-right <int-reg> <int-type>

inc destination
Add 1 to the value of an integer-type register
virtual typespecs:
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
Variants:
  inc data

dec destination
Subtract 1 from the value of an integer-type register
virtual typespecs:
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
Variants:
  dec data

not destination
Apply bitwise NOT to an integer-type register
virtual typespecs:
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
Variants:
  not data

negate destination
Multiply an integer-type register by -1
virtual typespecs:
  <int-reg>:              data stash-item stash-item-small
Typespecs:
  destination:            <int-reg>
Variants:
  negate data

goto branch
perform an unconditonal jump
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
Typespecs
  branch:                 label <int-type>
Variants:
  goto label
  goto <int-type>

if OPT-format a cmp b branch
  Perform a conditional branch based on the results of a numeric or bitwise comparison.
virtual typespecs:
  <int-type>:             data integer const stash-item stash-item-small string
  <int-reg>:              data stash-item stash-item-small
  <float-type>:           xmmx float fconst
  <numeric-comparator>    comparator
  <bitwise-comparator>    comparator
Typespecs:
  OPT-vec-format:         vec-float-format
    This assigns an instruction suffix for use with floating-point/SSE2 comparisons
    This is implicit in all variants (though irrelevant in integer-based comparators)
  a:                      <int-type> <float-type>
  cmp:                    <numeric-comparator> <bitwise-comparator>
  b:                      <int-type> <float-type>
  branch:                 label codeblock 
Variants:
  if <int-type> <numeric-comparator> <int-type> label
  if <int-type> <numeric-comparator> <float-type> label
  if <float-type> <numeric-comparator> <int-type> label
  if <float-type> <numeric-comparator> <float-type> label
  if <int-type> <numeric-comparator> <int-type> codeblock
  if <int-type> <numeric-comparator> <float-type> codeblock
  if <float-type> <numeric-comparator> <int-type> codeblock
  if <float-type> <numeric-comparator> <float-type> codeblock
  if <int-type> <bitwise-comparator> <int-type> label
  if <int-type> <bitwise-comparator> <float-type> label
  if <float-type> <bitwise-comparator> <int-type> label
  if <float-type> <bitwise-comparator> <float-type> label
  if <int-type> <bitwise-comparator> <int-type> codeblock
  if <int-type> <bitwise-comparator> <float-type> codeblock
  if <float-type> <bitwise-comparator> <int-type> codeblock
  if <float-type> <bitwise-comparator> <float-type> codeblock
  if <int-type> label
  if <int-type> codeblock
  if xmmx label
  if xmmx codeblock

ccall OPT-destination c-function
Call a C function and optionally assign its result to a data register
NOTE:  For the time being, only C functions with simple function signatures that are easy to call from Assembly Language are supported,
       and the "tcall" interface is going to be preferred mechanism for TACTYK programs to interface with the host application.
NOTE-1:  The specification here is slgithly simplified to omit a minor hack in the current implementation
         (ccalls were implemented prior to optional operands, so a "null" operand and some ugly overloading were used)
Typespecs:
  OPT-destination:        data
  c-function:             capi
Variants:
  tcall data capi
  tcall capi none

tcall t-function
Call a TACTYK-API function
TACTYK API functions use only a pointer to the context data structure and are expected to do I/O by reference
  Expected behavior of t-api fucntions is to read the exposed register contents from the context data structure to obtain arguments and
  overwrite the exposed register contents to return any results.
  This should more easily cover the many cases which would otherwise require a complex interface.
Typespecs:
  t-function:             tapi
Variants:
  tcall tapi

lwcall branch
Perform a lightweight call
This performs an "in-context" function call
  It pushes the index of the next instruction onto the lwcall stack, then unconditionally jumps to the specified branch target
Typespecs:
  branch:                 label <int-type>
Variants:
  lwcall label
  lwcall <int-type>

lwreturn
Return form a lightweight call
  This pops an instruction index off the lwcall stack and jumps to it.
Typespecs:
  Nothing!
Variants:
  lwreturn

mctxpush
Push a new stash onto the microcontext stash stack.
  This affects the region of memory which stash operations apply to.
Typespecs:
  Nothing!
Variants:
  mctxpush

mctxpop
Pop a stash off microcontext stash stack.
  This affects the region of memory which stash operations apply to.
  NOTE:  This only changes a pointer and does not remove any existing data from the stash.
Typespecs:
  Nothing!
Variants:
  mctxpop

mctxjump index
Explicitly select a microcontext stash entry to use for stash operations.
Typespecs:
  index:                  data integer const
Variants:
  mctxjump data
  mctxjump integer
  mctxjump const

tvmpush program-index function-index
TACTYK Virtual Machine Call
tvmcalls are calls from one tactyk program into another tactyk program.  A partial context switch is performed to prevent programs from
  interfering with each other or accessing private data
  This is complete context switch from the perspective of a tactyk program, but only a partial switch from the host/runtime perspective.
Initiate a tvmcall bypushing a new tvmcall entry onto the tvm stack
NOTE:  tvmcall set up is split to allow data registers to be used to reference a function to initiate the call, then replaced with intended
  arguments before performing the jump.
Typespecs:
  program-index:          data integer const
    "Nth" program loaded into the TACTYK Virtual Machine.
  function-index:         data integer const
    "Nth" declared branch target within the loaded program
Variants:
  tvmpush data data
  tvmpush data const
  tvmpush data integer
  tvmpush const data
  tvmpush const const
  tvmpush const integer
  tvmpush integer data
  tvmpush integer const
  tvmpush integer integer

tvmjump
Perform the tvm call into the function referenced by the immediately preceding tvmpush
typespecs:
  Nothing!
Variants:
  tvmjump

tvmreturn
return from a tvm call
typespecs:
  Nothing!
Variants:
  tvmreturn

stash   OPT-swap dest-0 source-0 ? OPT-swap dest-1 source-1 ? ... ? OPT-swap dest-15 source-15
Transfer data between registers and the stash or transfer data within the stash
This uses a variable-length argument list.  Each set of entries in the arguments list defines a stash transfer.
Typespecs:
  OPT-swap:               "swap"
    This is an inline typespec - if a "swap" token is present and in an appropriate location, then the stash transfer will be a swap operation isntead
    of an assignment operation.
  dest-N:                 data xmmx address stash-addr stash-item stash-item-small
  source-N:               data xmmx address stash-addr stash-item stash-item-small
Variants:
  stash ? data stash-item ?
  stash ? data stash-item-low ?
  stash ? swap data stash-item ?
  stash ? swap data stash-item-low ?
  stash ? stash-item data ?
  stash ? stash-item-low data ?
  stash ? swap stash-item data ?
  stash ? swap stash-item-low data ?
  stash ? xmmx stash-item ?
  stash ? xmmx stash-item-low ?
  stash ? swap xmmx stash-item ?
  stash ? swap xmmx stash-item-low ?
  stash ? stash-item xmmx ?
  stash ? stash-item-low xmmx ?
  stash ? swap stash-item xmmx ?
  stash ? swap stash-item-low xmmx ?
  stash ? stash-item stash-item ?
  stash ? stash-item stash-item-low ?
  stash ? stash-item-low stash-item ?
  stash ? swap stash-item stash-item-low ?
  stash ? swap stash-item-low stash-item ?
  stash ? stash-item-low stash-item-low ?
  stash ? swap stash-item stash-item ?
  stash ? swap stash-item-low stash-item-low ?
  stash ? addr stash-addr ?
  stash ? stash-addr addr ?

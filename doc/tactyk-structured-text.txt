TACTYK structured text format

TACTYK uses a simple text-based data format for all configuration and code inputs.  

Input data is represented internally with a 3-ary tree structure (three branches on each node).
  Each line of code is treated as a distinct element.
  The "sibling" branch is used to represents sequential relationships between distinct elements.
  The "child" branch represents hierarchical relationships between distinct elements.
  The "token" branch is used for the tokenized representation of an element.

Input files are broken up into a series of lines.  Newline characters are the delimiter used to break files into a series of lines.  All empty lines are removed from the resulting structure.  Lines which start with '#' are comments and are also removed.

Each line is arranged into a hierarchical structure based on the number of leading space characters (' ').  Misaligned lines are considered a fatal error (lines which can not be objectively placed in a child or sibling relationship).

Each line is tokenized by splitting it into a series of tokens using the space character as a delimiter (' ').  Any empty tokens are removed.

These parsing rules are mandatory through all of TACTYK; Escaping is prohibited.  In some cases, operators can obtain raw lines (though only with leading and trailing spaces removed).  If larger exceptions are needed, linked resource files are the favored solution.

The tab character is prohibited.  Configure your text editor to use spaces instead.  There is no restriction on the number of spaces per indentation level other than that each level of indentation must be the same for each of an element's siblings.

Notably absent from this is any provision for data types (integers, strings, enumerations, or whatever).  All such things are intentionally context-sensitive, semantically determined, and deferred to the individual software components which accept structured text.  

EXAMPLE:
  CHILD of EXAMPLE
    NESTED child of CHILD
  SIBLING of child
         
    NESTED child of SIBLING
  NEXT sibling of SIBLING
    TOKEN_0 TOKEN_1 TOKEN_1    TOKEN_3